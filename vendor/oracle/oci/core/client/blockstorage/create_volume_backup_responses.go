package blockstorage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateVolumeBackupReader is a Reader for the CreateVolumeBackup structure.
type CreateVolumeBackupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVolumeBackupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateVolumeBackupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateVolumeBackupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateVolumeBackupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateVolumeBackupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateVolumeBackupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateVolumeBackupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateVolumeBackupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateVolumeBackupOK creates a CreateVolumeBackupOK with default headers values
func NewCreateVolumeBackupOK() *CreateVolumeBackupOK {
	return &CreateVolumeBackupOK{}
}

/*CreateVolumeBackupOK handles this case with default header values.

The volume backup is being created.
*/
type CreateVolumeBackupOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.VolumeBackup
}

func (o *CreateVolumeBackupOK) Error() string {
	return fmt.Sprintf("[POST /volumeBackups][%d] createVolumeBackupOK  %+v", 200, o.Payload)
}

func (o *CreateVolumeBackupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.VolumeBackup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeBackupBadRequest creates a CreateVolumeBackupBadRequest with default headers values
func NewCreateVolumeBackupBadRequest() *CreateVolumeBackupBadRequest {
	return &CreateVolumeBackupBadRequest{}
}

/*CreateVolumeBackupBadRequest handles this case with default header values.

Bad Request
*/
type CreateVolumeBackupBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeBackupBadRequest) Error() string {
	return fmt.Sprintf("[POST /volumeBackups][%d] createVolumeBackupBadRequest  %+v", 400, o.Payload)
}

func (o *CreateVolumeBackupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeBackupUnauthorized creates a CreateVolumeBackupUnauthorized with default headers values
func NewCreateVolumeBackupUnauthorized() *CreateVolumeBackupUnauthorized {
	return &CreateVolumeBackupUnauthorized{}
}

/*CreateVolumeBackupUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateVolumeBackupUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeBackupUnauthorized) Error() string {
	return fmt.Sprintf("[POST /volumeBackups][%d] createVolumeBackupUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateVolumeBackupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeBackupNotFound creates a CreateVolumeBackupNotFound with default headers values
func NewCreateVolumeBackupNotFound() *CreateVolumeBackupNotFound {
	return &CreateVolumeBackupNotFound{}
}

/*CreateVolumeBackupNotFound handles this case with default header values.

Not Found
*/
type CreateVolumeBackupNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeBackupNotFound) Error() string {
	return fmt.Sprintf("[POST /volumeBackups][%d] createVolumeBackupNotFound  %+v", 404, o.Payload)
}

func (o *CreateVolumeBackupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeBackupConflict creates a CreateVolumeBackupConflict with default headers values
func NewCreateVolumeBackupConflict() *CreateVolumeBackupConflict {
	return &CreateVolumeBackupConflict{}
}

/*CreateVolumeBackupConflict handles this case with default header values.

Conflict
*/
type CreateVolumeBackupConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeBackupConflict) Error() string {
	return fmt.Sprintf("[POST /volumeBackups][%d] createVolumeBackupConflict  %+v", 409, o.Payload)
}

func (o *CreateVolumeBackupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeBackupInternalServerError creates a CreateVolumeBackupInternalServerError with default headers values
func NewCreateVolumeBackupInternalServerError() *CreateVolumeBackupInternalServerError {
	return &CreateVolumeBackupInternalServerError{}
}

/*CreateVolumeBackupInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateVolumeBackupInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeBackupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /volumeBackups][%d] createVolumeBackupInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateVolumeBackupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeBackupDefault creates a CreateVolumeBackupDefault with default headers values
func NewCreateVolumeBackupDefault(code int) *CreateVolumeBackupDefault {
	return &CreateVolumeBackupDefault{
		_statusCode: code,
	}
}

/*CreateVolumeBackupDefault handles this case with default header values.

An error has occurred.
*/
type CreateVolumeBackupDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create volume backup default response
func (o *CreateVolumeBackupDefault) Code() int {
	return o._statusCode
}

func (o *CreateVolumeBackupDefault) Error() string {
	return fmt.Sprintf("[POST /volumeBackups][%d] CreateVolumeBackup default  %+v", o._statusCode, o.Payload)
}

func (o *CreateVolumeBackupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
