package blockstorage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateVolumeReader is a Reader for the CreateVolume structure.
type CreateVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateVolumeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateVolumeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateVolumeOK creates a CreateVolumeOK with default headers values
func NewCreateVolumeOK() *CreateVolumeOK {
	return &CreateVolumeOK{}
}

/*CreateVolumeOK handles this case with default header values.

The volume is being created.
*/
type CreateVolumeOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Volume
}

func (o *CreateVolumeOK) Error() string {
	return fmt.Sprintf("[POST /volumes][%d] createVolumeOK  %+v", 200, o.Payload)
}

func (o *CreateVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Volume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeBadRequest creates a CreateVolumeBadRequest with default headers values
func NewCreateVolumeBadRequest() *CreateVolumeBadRequest {
	return &CreateVolumeBadRequest{}
}

/*CreateVolumeBadRequest handles this case with default header values.

Bad Request
*/
type CreateVolumeBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeBadRequest) Error() string {
	return fmt.Sprintf("[POST /volumes][%d] createVolumeBadRequest  %+v", 400, o.Payload)
}

func (o *CreateVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeUnauthorized creates a CreateVolumeUnauthorized with default headers values
func NewCreateVolumeUnauthorized() *CreateVolumeUnauthorized {
	return &CreateVolumeUnauthorized{}
}

/*CreateVolumeUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateVolumeUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /volumes][%d] createVolumeUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateVolumeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeNotFound creates a CreateVolumeNotFound with default headers values
func NewCreateVolumeNotFound() *CreateVolumeNotFound {
	return &CreateVolumeNotFound{}
}

/*CreateVolumeNotFound handles this case with default header values.

Not Found
*/
type CreateVolumeNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /volumes][%d] createVolumeNotFound  %+v", 404, o.Payload)
}

func (o *CreateVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeConflict creates a CreateVolumeConflict with default headers values
func NewCreateVolumeConflict() *CreateVolumeConflict {
	return &CreateVolumeConflict{}
}

/*CreateVolumeConflict handles this case with default header values.

Conflict
*/
type CreateVolumeConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeConflict) Error() string {
	return fmt.Sprintf("[POST /volumes][%d] createVolumeConflict  %+v", 409, o.Payload)
}

func (o *CreateVolumeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeInternalServerError creates a CreateVolumeInternalServerError with default headers values
func NewCreateVolumeInternalServerError() *CreateVolumeInternalServerError {
	return &CreateVolumeInternalServerError{}
}

/*CreateVolumeInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateVolumeInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /volumes][%d] createVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeDefault creates a CreateVolumeDefault with default headers values
func NewCreateVolumeDefault(code int) *CreateVolumeDefault {
	return &CreateVolumeDefault{
		_statusCode: code,
	}
}

/*CreateVolumeDefault handles this case with default header values.

An error has occurred.
*/
type CreateVolumeDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create volume default response
func (o *CreateVolumeDefault) Code() int {
	return o._statusCode
}

func (o *CreateVolumeDefault) Error() string {
	return fmt.Sprintf("[POST /volumes][%d] CreateVolume default  %+v", o._statusCode, o.Payload)
}

func (o *CreateVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
