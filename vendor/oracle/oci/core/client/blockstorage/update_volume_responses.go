package blockstorage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdateVolumeReader is a Reader for the UpdateVolume structure.
type UpdateVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateVolumeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateVolumePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVolumeOK creates a UpdateVolumeOK with default headers values
func NewUpdateVolumeOK() *UpdateVolumeOK {
	return &UpdateVolumeOK{}
}

/*UpdateVolumeOK handles this case with default header values.

The volume was updated.
*/
type UpdateVolumeOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Volume
}

func (o *UpdateVolumeOK) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volumeId}][%d] updateVolumeOK  %+v", 200, o.Payload)
}

func (o *UpdateVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Volume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBadRequest creates a UpdateVolumeBadRequest with default headers values
func NewUpdateVolumeBadRequest() *UpdateVolumeBadRequest {
	return &UpdateVolumeBadRequest{}
}

/*UpdateVolumeBadRequest handles this case with default header values.

Bad Request
*/
type UpdateVolumeBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volumeId}][%d] updateVolumeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeUnauthorized creates a UpdateVolumeUnauthorized with default headers values
func NewUpdateVolumeUnauthorized() *UpdateVolumeUnauthorized {
	return &UpdateVolumeUnauthorized{}
}

/*UpdateVolumeUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateVolumeUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volumeId}][%d] updateVolumeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateVolumeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeNotFound creates a UpdateVolumeNotFound with default headers values
func NewUpdateVolumeNotFound() *UpdateVolumeNotFound {
	return &UpdateVolumeNotFound{}
}

/*UpdateVolumeNotFound handles this case with default header values.

Not Found
*/
type UpdateVolumeNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeNotFound) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volumeId}][%d] updateVolumeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumePreconditionFailed creates a UpdateVolumePreconditionFailed with default headers values
func NewUpdateVolumePreconditionFailed() *UpdateVolumePreconditionFailed {
	return &UpdateVolumePreconditionFailed{}
}

/*UpdateVolumePreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateVolumePreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumePreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volumeId}][%d] updateVolumePreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateVolumePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeInternalServerError creates a UpdateVolumeInternalServerError with default headers values
func NewUpdateVolumeInternalServerError() *UpdateVolumeInternalServerError {
	return &UpdateVolumeInternalServerError{}
}

/*UpdateVolumeInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateVolumeInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volumeId}][%d] updateVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeDefault creates a UpdateVolumeDefault with default headers values
func NewUpdateVolumeDefault(code int) *UpdateVolumeDefault {
	return &UpdateVolumeDefault{
		_statusCode: code,
	}
}

/*UpdateVolumeDefault handles this case with default header values.

An error has occurred.
*/
type UpdateVolumeDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update volume default response
func (o *UpdateVolumeDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVolumeDefault) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volumeId}][%d] UpdateVolume default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
