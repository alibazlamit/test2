package blockstorage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetVolumeReader is a Reader for the GetVolume structure.
type GetVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetVolumeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVolumeOK creates a GetVolumeOK with default headers values
func NewGetVolumeOK() *GetVolumeOK {
	return &GetVolumeOK{}
}

/*GetVolumeOK handles this case with default header values.

The volume's information has been retrieved.
*/
type GetVolumeOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Volume
}

func (o *GetVolumeOK) Error() string {
	return fmt.Sprintf("[GET /volumes/{volumeId}][%d] getVolumeOK  %+v", 200, o.Payload)
}

func (o *GetVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Volume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeBadRequest creates a GetVolumeBadRequest with default headers values
func NewGetVolumeBadRequest() *GetVolumeBadRequest {
	return &GetVolumeBadRequest{}
}

/*GetVolumeBadRequest handles this case with default header values.

Bad Request
*/
type GetVolumeBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVolumeBadRequest) Error() string {
	return fmt.Sprintf("[GET /volumes/{volumeId}][%d] getVolumeBadRequest  %+v", 400, o.Payload)
}

func (o *GetVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeUnauthorized creates a GetVolumeUnauthorized with default headers values
func NewGetVolumeUnauthorized() *GetVolumeUnauthorized {
	return &GetVolumeUnauthorized{}
}

/*GetVolumeUnauthorized handles this case with default header values.

Unauthorized
*/
type GetVolumeUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVolumeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /volumes/{volumeId}][%d] getVolumeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVolumeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeNotFound creates a GetVolumeNotFound with default headers values
func NewGetVolumeNotFound() *GetVolumeNotFound {
	return &GetVolumeNotFound{}
}

/*GetVolumeNotFound handles this case with default header values.

Not Found
*/
type GetVolumeNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVolumeNotFound) Error() string {
	return fmt.Sprintf("[GET /volumes/{volumeId}][%d] getVolumeNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeInternalServerError creates a GetVolumeInternalServerError with default headers values
func NewGetVolumeInternalServerError() *GetVolumeInternalServerError {
	return &GetVolumeInternalServerError{}
}

/*GetVolumeInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetVolumeInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /volumes/{volumeId}][%d] getVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeDefault creates a GetVolumeDefault with default headers values
func NewGetVolumeDefault(code int) *GetVolumeDefault {
	return &GetVolumeDefault{
		_statusCode: code,
	}
}

/*GetVolumeDefault handles this case with default header values.

An error has occurred.
*/
type GetVolumeDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get volume default response
func (o *GetVolumeDefault) Code() int {
	return o._statusCode
}

func (o *GetVolumeDefault) Error() string {
	return fmt.Sprintf("[GET /volumes/{volumeId}][%d] GetVolume default  %+v", o._statusCode, o.Payload)
}

func (o *GetVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
