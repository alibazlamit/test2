package blockstorage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdateVolumeBackupReader is a Reader for the UpdateVolumeBackup structure.
type UpdateVolumeBackupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVolumeBackupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateVolumeBackupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateVolumeBackupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateVolumeBackupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateVolumeBackupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateVolumeBackupPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateVolumeBackupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateVolumeBackupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVolumeBackupOK creates a UpdateVolumeBackupOK with default headers values
func NewUpdateVolumeBackupOK() *UpdateVolumeBackupOK {
	return &UpdateVolumeBackupOK{}
}

/*UpdateVolumeBackupOK handles this case with default header values.

The volume backup was updated.
*/
type UpdateVolumeBackupOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string

	Payload *models.VolumeBackup
}

func (o *UpdateVolumeBackupOK) Error() string {
	return fmt.Sprintf("[PUT /volumeBackups/{volumeBackupId}][%d] updateVolumeBackupOK  %+v", 200, o.Payload)
}

func (o *UpdateVolumeBackupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	o.Payload = new(models.VolumeBackup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBackupBadRequest creates a UpdateVolumeBackupBadRequest with default headers values
func NewUpdateVolumeBackupBadRequest() *UpdateVolumeBackupBadRequest {
	return &UpdateVolumeBackupBadRequest{}
}

/*UpdateVolumeBackupBadRequest handles this case with default header values.

Bad Request
*/
type UpdateVolumeBackupBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeBackupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /volumeBackups/{volumeBackupId}][%d] updateVolumeBackupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVolumeBackupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBackupUnauthorized creates a UpdateVolumeBackupUnauthorized with default headers values
func NewUpdateVolumeBackupUnauthorized() *UpdateVolumeBackupUnauthorized {
	return &UpdateVolumeBackupUnauthorized{}
}

/*UpdateVolumeBackupUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateVolumeBackupUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeBackupUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /volumeBackups/{volumeBackupId}][%d] updateVolumeBackupUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateVolumeBackupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBackupNotFound creates a UpdateVolumeBackupNotFound with default headers values
func NewUpdateVolumeBackupNotFound() *UpdateVolumeBackupNotFound {
	return &UpdateVolumeBackupNotFound{}
}

/*UpdateVolumeBackupNotFound handles this case with default header values.

Not Found
*/
type UpdateVolumeBackupNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeBackupNotFound) Error() string {
	return fmt.Sprintf("[PUT /volumeBackups/{volumeBackupId}][%d] updateVolumeBackupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVolumeBackupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBackupPreconditionFailed creates a UpdateVolumeBackupPreconditionFailed with default headers values
func NewUpdateVolumeBackupPreconditionFailed() *UpdateVolumeBackupPreconditionFailed {
	return &UpdateVolumeBackupPreconditionFailed{}
}

/*UpdateVolumeBackupPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateVolumeBackupPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeBackupPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /volumeBackups/{volumeBackupId}][%d] updateVolumeBackupPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateVolumeBackupPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBackupInternalServerError creates a UpdateVolumeBackupInternalServerError with default headers values
func NewUpdateVolumeBackupInternalServerError() *UpdateVolumeBackupInternalServerError {
	return &UpdateVolumeBackupInternalServerError{}
}

/*UpdateVolumeBackupInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateVolumeBackupInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVolumeBackupInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /volumeBackups/{volumeBackupId}][%d] updateVolumeBackupInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVolumeBackupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBackupDefault creates a UpdateVolumeBackupDefault with default headers values
func NewUpdateVolumeBackupDefault(code int) *UpdateVolumeBackupDefault {
	return &UpdateVolumeBackupDefault{
		_statusCode: code,
	}
}

/*UpdateVolumeBackupDefault handles this case with default header values.

An error has occurred.
*/
type UpdateVolumeBackupDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update volume backup default response
func (o *UpdateVolumeBackupDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVolumeBackupDefault) Error() string {
	return fmt.Sprintf("[PUT /volumeBackups/{volumeBackupId}][%d] UpdateVolumeBackup default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateVolumeBackupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
