package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateDhcpOptionsReader is a Reader for the CreateDhcpOptions structure.
type CreateDhcpOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDhcpOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateDhcpOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateDhcpOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateDhcpOptionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateDhcpOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateDhcpOptionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateDhcpOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateDhcpOptionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDhcpOptionsOK creates a CreateDhcpOptionsOK with default headers values
func NewCreateDhcpOptionsOK() *CreateDhcpOptionsOK {
	return &CreateDhcpOptionsOK{}
}

/*CreateDhcpOptionsOK handles this case with default header values.

The set of DHCP options has been created.
*/
type CreateDhcpOptionsOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.DhcpOptions
}

func (o *CreateDhcpOptionsOK) Error() string {
	return fmt.Sprintf("[POST /dhcps][%d] createDhcpOptionsOK  %+v", 200, o.Payload)
}

func (o *CreateDhcpOptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.DhcpOptions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDhcpOptionsBadRequest creates a CreateDhcpOptionsBadRequest with default headers values
func NewCreateDhcpOptionsBadRequest() *CreateDhcpOptionsBadRequest {
	return &CreateDhcpOptionsBadRequest{}
}

/*CreateDhcpOptionsBadRequest handles this case with default header values.

Bad Request
*/
type CreateDhcpOptionsBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDhcpOptionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /dhcps][%d] createDhcpOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDhcpOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDhcpOptionsUnauthorized creates a CreateDhcpOptionsUnauthorized with default headers values
func NewCreateDhcpOptionsUnauthorized() *CreateDhcpOptionsUnauthorized {
	return &CreateDhcpOptionsUnauthorized{}
}

/*CreateDhcpOptionsUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateDhcpOptionsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDhcpOptionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dhcps][%d] createDhcpOptionsUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateDhcpOptionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDhcpOptionsNotFound creates a CreateDhcpOptionsNotFound with default headers values
func NewCreateDhcpOptionsNotFound() *CreateDhcpOptionsNotFound {
	return &CreateDhcpOptionsNotFound{}
}

/*CreateDhcpOptionsNotFound handles this case with default header values.

Not Found
*/
type CreateDhcpOptionsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDhcpOptionsNotFound) Error() string {
	return fmt.Sprintf("[POST /dhcps][%d] createDhcpOptionsNotFound  %+v", 404, o.Payload)
}

func (o *CreateDhcpOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDhcpOptionsConflict creates a CreateDhcpOptionsConflict with default headers values
func NewCreateDhcpOptionsConflict() *CreateDhcpOptionsConflict {
	return &CreateDhcpOptionsConflict{}
}

/*CreateDhcpOptionsConflict handles this case with default header values.

Conflict
*/
type CreateDhcpOptionsConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDhcpOptionsConflict) Error() string {
	return fmt.Sprintf("[POST /dhcps][%d] createDhcpOptionsConflict  %+v", 409, o.Payload)
}

func (o *CreateDhcpOptionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDhcpOptionsInternalServerError creates a CreateDhcpOptionsInternalServerError with default headers values
func NewCreateDhcpOptionsInternalServerError() *CreateDhcpOptionsInternalServerError {
	return &CreateDhcpOptionsInternalServerError{}
}

/*CreateDhcpOptionsInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateDhcpOptionsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDhcpOptionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dhcps][%d] createDhcpOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDhcpOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDhcpOptionsDefault creates a CreateDhcpOptionsDefault with default headers values
func NewCreateDhcpOptionsDefault(code int) *CreateDhcpOptionsDefault {
	return &CreateDhcpOptionsDefault{
		_statusCode: code,
	}
}

/*CreateDhcpOptionsDefault handles this case with default header values.

An error has occurred.
*/
type CreateDhcpOptionsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create dhcp options default response
func (o *CreateDhcpOptionsDefault) Code() int {
	return o._statusCode
}

func (o *CreateDhcpOptionsDefault) Error() string {
	return fmt.Sprintf("[POST /dhcps][%d] CreateDhcpOptions default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDhcpOptionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
