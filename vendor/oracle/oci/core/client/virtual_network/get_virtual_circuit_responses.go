package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetVirtualCircuitReader is a Reader for the GetVirtualCircuit structure.
type GetVirtualCircuitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVirtualCircuitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVirtualCircuitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetVirtualCircuitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetVirtualCircuitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetVirtualCircuitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVirtualCircuitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVirtualCircuitOK creates a GetVirtualCircuitOK with default headers values
func NewGetVirtualCircuitOK() *GetVirtualCircuitOK {
	return &GetVirtualCircuitOK{}
}

/*GetVirtualCircuitOK handles this case with default header values.

The virtual circuit was retrieved.
*/
type GetVirtualCircuitOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.VirtualCircuit
}

func (o *GetVirtualCircuitOK) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}][%d] getVirtualCircuitOK  %+v", 200, o.Payload)
}

func (o *GetVirtualCircuitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.VirtualCircuit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualCircuitUnauthorized creates a GetVirtualCircuitUnauthorized with default headers values
func NewGetVirtualCircuitUnauthorized() *GetVirtualCircuitUnauthorized {
	return &GetVirtualCircuitUnauthorized{}
}

/*GetVirtualCircuitUnauthorized handles this case with default header values.

Unauthorized
*/
type GetVirtualCircuitUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVirtualCircuitUnauthorized) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}][%d] getVirtualCircuitUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVirtualCircuitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualCircuitNotFound creates a GetVirtualCircuitNotFound with default headers values
func NewGetVirtualCircuitNotFound() *GetVirtualCircuitNotFound {
	return &GetVirtualCircuitNotFound{}
}

/*GetVirtualCircuitNotFound handles this case with default header values.

Not Found
*/
type GetVirtualCircuitNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVirtualCircuitNotFound) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}][%d] getVirtualCircuitNotFound  %+v", 404, o.Payload)
}

func (o *GetVirtualCircuitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualCircuitInternalServerError creates a GetVirtualCircuitInternalServerError with default headers values
func NewGetVirtualCircuitInternalServerError() *GetVirtualCircuitInternalServerError {
	return &GetVirtualCircuitInternalServerError{}
}

/*GetVirtualCircuitInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetVirtualCircuitInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVirtualCircuitInternalServerError) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}][%d] getVirtualCircuitInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVirtualCircuitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualCircuitDefault creates a GetVirtualCircuitDefault with default headers values
func NewGetVirtualCircuitDefault(code int) *GetVirtualCircuitDefault {
	return &GetVirtualCircuitDefault{
		_statusCode: code,
	}
}

/*GetVirtualCircuitDefault handles this case with default header values.

An error has occurred.
*/
type GetVirtualCircuitDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get virtual circuit default response
func (o *GetVirtualCircuitDefault) Code() int {
	return o._statusCode
}

func (o *GetVirtualCircuitDefault) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}][%d] GetVirtualCircuit default  %+v", o._statusCode, o.Payload)
}

func (o *GetVirtualCircuitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
