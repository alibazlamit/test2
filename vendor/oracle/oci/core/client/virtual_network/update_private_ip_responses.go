package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdatePrivateIPReader is a Reader for the UpdatePrivateIP structure.
type UpdatePrivateIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePrivateIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatePrivateIPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdatePrivateIPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdatePrivateIPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdatePrivateIPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdatePrivateIPPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdatePrivateIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdatePrivateIPDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePrivateIPOK creates a UpdatePrivateIPOK with default headers values
func NewUpdatePrivateIPOK() *UpdatePrivateIPOK {
	return &UpdatePrivateIPOK{}
}

/*UpdatePrivateIPOK handles this case with default header values.

The private IP was updated.
*/
type UpdatePrivateIPOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.PrivateIP
}

func (o *UpdatePrivateIPOK) Error() string {
	return fmt.Sprintf("[PUT /privateIps/{privateIpId}][%d] updatePrivateIpOK  %+v", 200, o.Payload)
}

func (o *UpdatePrivateIPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.PrivateIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePrivateIPBadRequest creates a UpdatePrivateIPBadRequest with default headers values
func NewUpdatePrivateIPBadRequest() *UpdatePrivateIPBadRequest {
	return &UpdatePrivateIPBadRequest{}
}

/*UpdatePrivateIPBadRequest handles this case with default header values.

Bad Request
*/
type UpdatePrivateIPBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePrivateIPBadRequest) Error() string {
	return fmt.Sprintf("[PUT /privateIps/{privateIpId}][%d] updatePrivateIpBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePrivateIPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePrivateIPUnauthorized creates a UpdatePrivateIPUnauthorized with default headers values
func NewUpdatePrivateIPUnauthorized() *UpdatePrivateIPUnauthorized {
	return &UpdatePrivateIPUnauthorized{}
}

/*UpdatePrivateIPUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdatePrivateIPUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePrivateIPUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /privateIps/{privateIpId}][%d] updatePrivateIpUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePrivateIPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePrivateIPNotFound creates a UpdatePrivateIPNotFound with default headers values
func NewUpdatePrivateIPNotFound() *UpdatePrivateIPNotFound {
	return &UpdatePrivateIPNotFound{}
}

/*UpdatePrivateIPNotFound handles this case with default header values.

Not Found
*/
type UpdatePrivateIPNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePrivateIPNotFound) Error() string {
	return fmt.Sprintf("[PUT /privateIps/{privateIpId}][%d] updatePrivateIpNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePrivateIPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePrivateIPPreconditionFailed creates a UpdatePrivateIPPreconditionFailed with default headers values
func NewUpdatePrivateIPPreconditionFailed() *UpdatePrivateIPPreconditionFailed {
	return &UpdatePrivateIPPreconditionFailed{}
}

/*UpdatePrivateIPPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdatePrivateIPPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePrivateIPPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /privateIps/{privateIpId}][%d] updatePrivateIpPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdatePrivateIPPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePrivateIPInternalServerError creates a UpdatePrivateIPInternalServerError with default headers values
func NewUpdatePrivateIPInternalServerError() *UpdatePrivateIPInternalServerError {
	return &UpdatePrivateIPInternalServerError{}
}

/*UpdatePrivateIPInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdatePrivateIPInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePrivateIPInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /privateIps/{privateIpId}][%d] updatePrivateIpInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdatePrivateIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePrivateIPDefault creates a UpdatePrivateIPDefault with default headers values
func NewUpdatePrivateIPDefault(code int) *UpdatePrivateIPDefault {
	return &UpdatePrivateIPDefault{
		_statusCode: code,
	}
}

/*UpdatePrivateIPDefault handles this case with default header values.

An error has occurred.
*/
type UpdatePrivateIPDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update private Ip default response
func (o *UpdatePrivateIPDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePrivateIPDefault) Error() string {
	return fmt.Sprintf("[PUT /privateIps/{privateIpId}][%d] UpdatePrivateIp default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePrivateIPDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
