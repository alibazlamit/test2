package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateIPSecConnectionReader is a Reader for the CreateIPSecConnection structure.
type CreateIPSecConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIPSecConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateIPSecConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateIPSecConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateIPSecConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateIPSecConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateIPSecConnectionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateIPSecConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateIPSecConnectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateIPSecConnectionOK creates a CreateIPSecConnectionOK with default headers values
func NewCreateIPSecConnectionOK() *CreateIPSecConnectionOK {
	return &CreateIPSecConnectionOK{}
}

/*CreateIPSecConnectionOK handles this case with default header values.

The IPSec connection was created.
*/
type CreateIPSecConnectionOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.IPSecConnection
}

func (o *CreateIPSecConnectionOK) Error() string {
	return fmt.Sprintf("[POST /ipsecConnections][%d] createIpSecConnectionOK  %+v", 200, o.Payload)
}

func (o *CreateIPSecConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.IPSecConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIPSecConnectionBadRequest creates a CreateIPSecConnectionBadRequest with default headers values
func NewCreateIPSecConnectionBadRequest() *CreateIPSecConnectionBadRequest {
	return &CreateIPSecConnectionBadRequest{}
}

/*CreateIPSecConnectionBadRequest handles this case with default header values.

Bad Request
*/
type CreateIPSecConnectionBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIPSecConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /ipsecConnections][%d] createIpSecConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIPSecConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIPSecConnectionUnauthorized creates a CreateIPSecConnectionUnauthorized with default headers values
func NewCreateIPSecConnectionUnauthorized() *CreateIPSecConnectionUnauthorized {
	return &CreateIPSecConnectionUnauthorized{}
}

/*CreateIPSecConnectionUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateIPSecConnectionUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIPSecConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ipsecConnections][%d] createIpSecConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateIPSecConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIPSecConnectionNotFound creates a CreateIPSecConnectionNotFound with default headers values
func NewCreateIPSecConnectionNotFound() *CreateIPSecConnectionNotFound {
	return &CreateIPSecConnectionNotFound{}
}

/*CreateIPSecConnectionNotFound handles this case with default header values.

Not Found
*/
type CreateIPSecConnectionNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIPSecConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /ipsecConnections][%d] createIpSecConnectionNotFound  %+v", 404, o.Payload)
}

func (o *CreateIPSecConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIPSecConnectionConflict creates a CreateIPSecConnectionConflict with default headers values
func NewCreateIPSecConnectionConflict() *CreateIPSecConnectionConflict {
	return &CreateIPSecConnectionConflict{}
}

/*CreateIPSecConnectionConflict handles this case with default header values.

Conflict
*/
type CreateIPSecConnectionConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIPSecConnectionConflict) Error() string {
	return fmt.Sprintf("[POST /ipsecConnections][%d] createIpSecConnectionConflict  %+v", 409, o.Payload)
}

func (o *CreateIPSecConnectionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIPSecConnectionInternalServerError creates a CreateIPSecConnectionInternalServerError with default headers values
func NewCreateIPSecConnectionInternalServerError() *CreateIPSecConnectionInternalServerError {
	return &CreateIPSecConnectionInternalServerError{}
}

/*CreateIPSecConnectionInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateIPSecConnectionInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIPSecConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ipsecConnections][%d] createIpSecConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateIPSecConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIPSecConnectionDefault creates a CreateIPSecConnectionDefault with default headers values
func NewCreateIPSecConnectionDefault(code int) *CreateIPSecConnectionDefault {
	return &CreateIPSecConnectionDefault{
		_statusCode: code,
	}
}

/*CreateIPSecConnectionDefault handles this case with default header values.

An error has occurred.
*/
type CreateIPSecConnectionDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create IP sec connection default response
func (o *CreateIPSecConnectionDefault) Code() int {
	return o._statusCode
}

func (o *CreateIPSecConnectionDefault) Error() string {
	return fmt.Sprintf("[POST /ipsecConnections][%d] CreateIPSecConnection default  %+v", o._statusCode, o.Payload)
}

func (o *CreateIPSecConnectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
