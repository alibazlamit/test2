package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetCpeReader is a Reader for the GetCpe structure.
type GetCpeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCpeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCpeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCpeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCpeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetCpeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetCpeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCpeOK creates a GetCpeOK with default headers values
func NewGetCpeOK() *GetCpeOK {
	return &GetCpeOK{}
}

/*GetCpeOK handles this case with default header values.

The CPE was retrieved.
*/
type GetCpeOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Cpe
}

func (o *GetCpeOK) Error() string {
	return fmt.Sprintf("[GET /cpes/{cpeId}][%d] getCpeOK  %+v", 200, o.Payload)
}

func (o *GetCpeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Cpe)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCpeUnauthorized creates a GetCpeUnauthorized with default headers values
func NewGetCpeUnauthorized() *GetCpeUnauthorized {
	return &GetCpeUnauthorized{}
}

/*GetCpeUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCpeUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCpeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cpes/{cpeId}][%d] getCpeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCpeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCpeNotFound creates a GetCpeNotFound with default headers values
func NewGetCpeNotFound() *GetCpeNotFound {
	return &GetCpeNotFound{}
}

/*GetCpeNotFound handles this case with default header values.

Not Found
*/
type GetCpeNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCpeNotFound) Error() string {
	return fmt.Sprintf("[GET /cpes/{cpeId}][%d] getCpeNotFound  %+v", 404, o.Payload)
}

func (o *GetCpeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCpeInternalServerError creates a GetCpeInternalServerError with default headers values
func NewGetCpeInternalServerError() *GetCpeInternalServerError {
	return &GetCpeInternalServerError{}
}

/*GetCpeInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetCpeInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCpeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cpes/{cpeId}][%d] getCpeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCpeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCpeDefault creates a GetCpeDefault with default headers values
func NewGetCpeDefault(code int) *GetCpeDefault {
	return &GetCpeDefault{
		_statusCode: code,
	}
}

/*GetCpeDefault handles this case with default header values.

An error has occurred.
*/
type GetCpeDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get cpe default response
func (o *GetCpeDefault) Code() int {
	return o._statusCode
}

func (o *GetCpeDefault) Error() string {
	return fmt.Sprintf("[GET /cpes/{cpeId}][%d] GetCpe default  %+v", o._statusCode, o.Payload)
}

func (o *GetCpeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
