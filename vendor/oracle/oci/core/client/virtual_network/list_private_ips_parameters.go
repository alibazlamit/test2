package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListPrivateIpsParams creates a new ListPrivateIpsParams object
// with the default values initialized.
func NewListPrivateIpsParams() *ListPrivateIpsParams {
	var ()
	return &ListPrivateIpsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListPrivateIpsParamsWithTimeout creates a new ListPrivateIpsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPrivateIpsParamsWithTimeout(timeout time.Duration) *ListPrivateIpsParams {
	var ()
	return &ListPrivateIpsParams{

		timeout: timeout,
	}
}

// NewListPrivateIpsParamsWithContext creates a new ListPrivateIpsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPrivateIpsParamsWithContext(ctx context.Context) *ListPrivateIpsParams {
	var ()
	return &ListPrivateIpsParams{

		Context: ctx,
	}
}

// NewListPrivateIpsParamsWithHTTPClient creates a new ListPrivateIpsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPrivateIpsParamsWithHTTPClient(client *http.Client) *ListPrivateIpsParams {
	var ()
	return &ListPrivateIpsParams{
		HTTPClient: client,
	}
}

/*ListPrivateIpsParams contains all the parameters to send to the API endpoint
for the list private ips operation typically these are written to a http.Request
*/
type ListPrivateIpsParams struct {

	/*IPAddress
	  The private IP address of the `privateIp` object.

	Example: `10.0.3.3`


	*/
	IPAddress *string
	/*Limit
	  The maximum number of items to return in a paginated "List" call.

	Example: `500`


	*/
	Limit *int64
	/*Page
	  The value of the `opc-next-page` response header from the previous "List" call.


	*/
	Page *string
	/*SubnetID
	  The OCID of the subnet.

	*/
	SubnetID *string
	/*VnicID
	  The OCID of the VNIC.

	*/
	VnicID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list private ips params
func (o *ListPrivateIpsParams) WithTimeout(timeout time.Duration) *ListPrivateIpsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list private ips params
func (o *ListPrivateIpsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list private ips params
func (o *ListPrivateIpsParams) WithContext(ctx context.Context) *ListPrivateIpsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list private ips params
func (o *ListPrivateIpsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list private ips params
func (o *ListPrivateIpsParams) WithHTTPClient(client *http.Client) *ListPrivateIpsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list private ips params
func (o *ListPrivateIpsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPAddress adds the iPAddress to the list private ips params
func (o *ListPrivateIpsParams) WithIPAddress(iPAddress *string) *ListPrivateIpsParams {
	o.SetIPAddress(iPAddress)
	return o
}

// SetIPAddress adds the ipAddress to the list private ips params
func (o *ListPrivateIpsParams) SetIPAddress(iPAddress *string) {
	o.IPAddress = iPAddress
}

// WithLimit adds the limit to the list private ips params
func (o *ListPrivateIpsParams) WithLimit(limit *int64) *ListPrivateIpsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list private ips params
func (o *ListPrivateIpsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPage adds the page to the list private ips params
func (o *ListPrivateIpsParams) WithPage(page *string) *ListPrivateIpsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list private ips params
func (o *ListPrivateIpsParams) SetPage(page *string) {
	o.Page = page
}

// WithSubnetID adds the subnetID to the list private ips params
func (o *ListPrivateIpsParams) WithSubnetID(subnetID *string) *ListPrivateIpsParams {
	o.SetSubnetID(subnetID)
	return o
}

// SetSubnetID adds the subnetId to the list private ips params
func (o *ListPrivateIpsParams) SetSubnetID(subnetID *string) {
	o.SubnetID = subnetID
}

// WithVnicID adds the vnicID to the list private ips params
func (o *ListPrivateIpsParams) WithVnicID(vnicID *string) *ListPrivateIpsParams {
	o.SetVnicID(vnicID)
	return o
}

// SetVnicID adds the vnicId to the list private ips params
func (o *ListPrivateIpsParams) SetVnicID(vnicID *string) {
	o.VnicID = vnicID
}

// WriteToRequest writes these params to a swagger request
func (o *ListPrivateIpsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IPAddress != nil {

		// query param ipAddress
		var qrIPAddress string
		if o.IPAddress != nil {
			qrIPAddress = *o.IPAddress
		}
		qIPAddress := qrIPAddress
		if qIPAddress != "" {
			if err := r.SetQueryParam("ipAddress", qIPAddress); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.SubnetID != nil {

		// query param subnetId
		var qrSubnetID string
		if o.SubnetID != nil {
			qrSubnetID = *o.SubnetID
		}
		qSubnetID := qrSubnetID
		if qSubnetID != "" {
			if err := r.SetQueryParam("subnetId", qSubnetID); err != nil {
				return err
			}
		}

	}

	if o.VnicID != nil {

		// query param vnicId
		var qrVnicID string
		if o.VnicID != nil {
			qrVnicID = *o.VnicID
		}
		qVnicID := qrVnicID
		if qVnicID != "" {
			if err := r.SetQueryParam("vnicId", qVnicID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
