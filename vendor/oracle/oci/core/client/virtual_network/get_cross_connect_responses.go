package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetCrossConnectReader is a Reader for the GetCrossConnect structure.
type GetCrossConnectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCrossConnectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCrossConnectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCrossConnectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCrossConnectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetCrossConnectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetCrossConnectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCrossConnectOK creates a GetCrossConnectOK with default headers values
func NewGetCrossConnectOK() *GetCrossConnectOK {
	return &GetCrossConnectOK{}
}

/*GetCrossConnectOK handles this case with default header values.

The cross-connect was retrieved.
*/
type GetCrossConnectOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.CrossConnect
}

func (o *GetCrossConnectOK) Error() string {
	return fmt.Sprintf("[GET /crossConnects/{crossConnectId}][%d] getCrossConnectOK  %+v", 200, o.Payload)
}

func (o *GetCrossConnectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.CrossConnect)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectUnauthorized creates a GetCrossConnectUnauthorized with default headers values
func NewGetCrossConnectUnauthorized() *GetCrossConnectUnauthorized {
	return &GetCrossConnectUnauthorized{}
}

/*GetCrossConnectUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCrossConnectUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCrossConnectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /crossConnects/{crossConnectId}][%d] getCrossConnectUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCrossConnectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectNotFound creates a GetCrossConnectNotFound with default headers values
func NewGetCrossConnectNotFound() *GetCrossConnectNotFound {
	return &GetCrossConnectNotFound{}
}

/*GetCrossConnectNotFound handles this case with default header values.

Not Found
*/
type GetCrossConnectNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCrossConnectNotFound) Error() string {
	return fmt.Sprintf("[GET /crossConnects/{crossConnectId}][%d] getCrossConnectNotFound  %+v", 404, o.Payload)
}

func (o *GetCrossConnectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectInternalServerError creates a GetCrossConnectInternalServerError with default headers values
func NewGetCrossConnectInternalServerError() *GetCrossConnectInternalServerError {
	return &GetCrossConnectInternalServerError{}
}

/*GetCrossConnectInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetCrossConnectInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCrossConnectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /crossConnects/{crossConnectId}][%d] getCrossConnectInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCrossConnectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectDefault creates a GetCrossConnectDefault with default headers values
func NewGetCrossConnectDefault(code int) *GetCrossConnectDefault {
	return &GetCrossConnectDefault{
		_statusCode: code,
	}
}

/*GetCrossConnectDefault handles this case with default header values.

An error has occurred.
*/
type GetCrossConnectDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get cross connect default response
func (o *GetCrossConnectDefault) Code() int {
	return o._statusCode
}

func (o *GetCrossConnectDefault) Error() string {
	return fmt.Sprintf("[GET /crossConnects/{crossConnectId}][%d] GetCrossConnect default  %+v", o._statusCode, o.Payload)
}

func (o *GetCrossConnectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
