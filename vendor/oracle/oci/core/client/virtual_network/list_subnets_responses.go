package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// ListSubnetsReader is a Reader for the ListSubnets structure.
type ListSubnetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSubnetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListSubnetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListSubnetsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListSubnetsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListSubnetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListSubnetsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListSubnetsOK creates a ListSubnetsOK with default headers values
func NewListSubnetsOK() *ListSubnetsOK {
	return &ListSubnetsOK{}
}

/*ListSubnetsOK handles this case with default header values.

The list is being retrieved.
*/
type ListSubnetsOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.Subnet
}

func (o *ListSubnetsOK) Error() string {
	return fmt.Sprintf("[GET /subnets][%d] listSubnetsOK  %+v", 200, o.Payload)
}

func (o *ListSubnetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSubnetsUnauthorized creates a ListSubnetsUnauthorized with default headers values
func NewListSubnetsUnauthorized() *ListSubnetsUnauthorized {
	return &ListSubnetsUnauthorized{}
}

/*ListSubnetsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListSubnetsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListSubnetsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /subnets][%d] listSubnetsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSubnetsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSubnetsNotFound creates a ListSubnetsNotFound with default headers values
func NewListSubnetsNotFound() *ListSubnetsNotFound {
	return &ListSubnetsNotFound{}
}

/*ListSubnetsNotFound handles this case with default header values.

Not Found
*/
type ListSubnetsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListSubnetsNotFound) Error() string {
	return fmt.Sprintf("[GET /subnets][%d] listSubnetsNotFound  %+v", 404, o.Payload)
}

func (o *ListSubnetsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSubnetsInternalServerError creates a ListSubnetsInternalServerError with default headers values
func NewListSubnetsInternalServerError() *ListSubnetsInternalServerError {
	return &ListSubnetsInternalServerError{}
}

/*ListSubnetsInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListSubnetsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListSubnetsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /subnets][%d] listSubnetsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListSubnetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSubnetsDefault creates a ListSubnetsDefault with default headers values
func NewListSubnetsDefault(code int) *ListSubnetsDefault {
	return &ListSubnetsDefault{
		_statusCode: code,
	}
}

/*ListSubnetsDefault handles this case with default header values.

An error has occurred.
*/
type ListSubnetsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list subnets default response
func (o *ListSubnetsDefault) Code() int {
	return o._statusCode
}

func (o *ListSubnetsDefault) Error() string {
	return fmt.Sprintf("[GET /subnets][%d] ListSubnets default  %+v", o._statusCode, o.Payload)
}

func (o *ListSubnetsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
