package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreatePrivateIPReader is a Reader for the CreatePrivateIP structure.
type CreatePrivateIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePrivateIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreatePrivateIPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreatePrivateIPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreatePrivateIPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreatePrivateIPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreatePrivateIPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreatePrivateIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreatePrivateIPDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreatePrivateIPOK creates a CreatePrivateIPOK with default headers values
func NewCreatePrivateIPOK() *CreatePrivateIPOK {
	return &CreatePrivateIPOK{}
}

/*CreatePrivateIPOK handles this case with default header values.

The private IP was created.
*/
type CreatePrivateIPOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.PrivateIP
}

func (o *CreatePrivateIPOK) Error() string {
	return fmt.Sprintf("[POST /privateIps][%d] createPrivateIpOK  %+v", 200, o.Payload)
}

func (o *CreatePrivateIPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.PrivateIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePrivateIPBadRequest creates a CreatePrivateIPBadRequest with default headers values
func NewCreatePrivateIPBadRequest() *CreatePrivateIPBadRequest {
	return &CreatePrivateIPBadRequest{}
}

/*CreatePrivateIPBadRequest handles this case with default header values.

Bad Request
*/
type CreatePrivateIPBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreatePrivateIPBadRequest) Error() string {
	return fmt.Sprintf("[POST /privateIps][%d] createPrivateIpBadRequest  %+v", 400, o.Payload)
}

func (o *CreatePrivateIPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePrivateIPUnauthorized creates a CreatePrivateIPUnauthorized with default headers values
func NewCreatePrivateIPUnauthorized() *CreatePrivateIPUnauthorized {
	return &CreatePrivateIPUnauthorized{}
}

/*CreatePrivateIPUnauthorized handles this case with default header values.

Unauthorized
*/
type CreatePrivateIPUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreatePrivateIPUnauthorized) Error() string {
	return fmt.Sprintf("[POST /privateIps][%d] createPrivateIpUnauthorized  %+v", 401, o.Payload)
}

func (o *CreatePrivateIPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePrivateIPNotFound creates a CreatePrivateIPNotFound with default headers values
func NewCreatePrivateIPNotFound() *CreatePrivateIPNotFound {
	return &CreatePrivateIPNotFound{}
}

/*CreatePrivateIPNotFound handles this case with default header values.

Not Found
*/
type CreatePrivateIPNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreatePrivateIPNotFound) Error() string {
	return fmt.Sprintf("[POST /privateIps][%d] createPrivateIpNotFound  %+v", 404, o.Payload)
}

func (o *CreatePrivateIPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePrivateIPConflict creates a CreatePrivateIPConflict with default headers values
func NewCreatePrivateIPConflict() *CreatePrivateIPConflict {
	return &CreatePrivateIPConflict{}
}

/*CreatePrivateIPConflict handles this case with default header values.

Conflict
*/
type CreatePrivateIPConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreatePrivateIPConflict) Error() string {
	return fmt.Sprintf("[POST /privateIps][%d] createPrivateIpConflict  %+v", 409, o.Payload)
}

func (o *CreatePrivateIPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePrivateIPInternalServerError creates a CreatePrivateIPInternalServerError with default headers values
func NewCreatePrivateIPInternalServerError() *CreatePrivateIPInternalServerError {
	return &CreatePrivateIPInternalServerError{}
}

/*CreatePrivateIPInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreatePrivateIPInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreatePrivateIPInternalServerError) Error() string {
	return fmt.Sprintf("[POST /privateIps][%d] createPrivateIpInternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePrivateIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePrivateIPDefault creates a CreatePrivateIPDefault with default headers values
func NewCreatePrivateIPDefault(code int) *CreatePrivateIPDefault {
	return &CreatePrivateIPDefault{
		_statusCode: code,
	}
}

/*CreatePrivateIPDefault handles this case with default header values.

An error has occurred.
*/
type CreatePrivateIPDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create private Ip default response
func (o *CreatePrivateIPDefault) Code() int {
	return o._statusCode
}

func (o *CreatePrivateIPDefault) Error() string {
	return fmt.Sprintf("[POST /privateIps][%d] CreatePrivateIp default  %+v", o._statusCode, o.Payload)
}

func (o *CreatePrivateIPDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
