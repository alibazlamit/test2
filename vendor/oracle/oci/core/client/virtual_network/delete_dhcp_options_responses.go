package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DeleteDhcpOptionsReader is a Reader for the DeleteDhcpOptions structure.
type DeleteDhcpOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDhcpOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteDhcpOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteDhcpOptionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteDhcpOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteDhcpOptionsPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteDhcpOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteDhcpOptionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteDhcpOptionsOK creates a DeleteDhcpOptionsOK with default headers values
func NewDeleteDhcpOptionsOK() *DeleteDhcpOptionsOK {
	return &DeleteDhcpOptionsOK{}
}

/*DeleteDhcpOptionsOK handles this case with default header values.

The set of DHCP options is being deleted.
*/
type DeleteDhcpOptionsOK struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteDhcpOptionsOK) Error() string {
	return fmt.Sprintf("[DELETE /dhcps/{dhcpId}][%d] deleteDhcpOptionsOK ", 200)
}

func (o *DeleteDhcpOptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteDhcpOptionsUnauthorized creates a DeleteDhcpOptionsUnauthorized with default headers values
func NewDeleteDhcpOptionsUnauthorized() *DeleteDhcpOptionsUnauthorized {
	return &DeleteDhcpOptionsUnauthorized{}
}

/*DeleteDhcpOptionsUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteDhcpOptionsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteDhcpOptionsUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /dhcps/{dhcpId}][%d] deleteDhcpOptionsUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteDhcpOptionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDhcpOptionsNotFound creates a DeleteDhcpOptionsNotFound with default headers values
func NewDeleteDhcpOptionsNotFound() *DeleteDhcpOptionsNotFound {
	return &DeleteDhcpOptionsNotFound{}
}

/*DeleteDhcpOptionsNotFound handles this case with default header values.

Not Found
*/
type DeleteDhcpOptionsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteDhcpOptionsNotFound) Error() string {
	return fmt.Sprintf("[DELETE /dhcps/{dhcpId}][%d] deleteDhcpOptionsNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDhcpOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDhcpOptionsPreconditionFailed creates a DeleteDhcpOptionsPreconditionFailed with default headers values
func NewDeleteDhcpOptionsPreconditionFailed() *DeleteDhcpOptionsPreconditionFailed {
	return &DeleteDhcpOptionsPreconditionFailed{}
}

/*DeleteDhcpOptionsPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteDhcpOptionsPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteDhcpOptionsPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /dhcps/{dhcpId}][%d] deleteDhcpOptionsPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteDhcpOptionsPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDhcpOptionsInternalServerError creates a DeleteDhcpOptionsInternalServerError with default headers values
func NewDeleteDhcpOptionsInternalServerError() *DeleteDhcpOptionsInternalServerError {
	return &DeleteDhcpOptionsInternalServerError{}
}

/*DeleteDhcpOptionsInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteDhcpOptionsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteDhcpOptionsInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /dhcps/{dhcpId}][%d] deleteDhcpOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDhcpOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDhcpOptionsDefault creates a DeleteDhcpOptionsDefault with default headers values
func NewDeleteDhcpOptionsDefault(code int) *DeleteDhcpOptionsDefault {
	return &DeleteDhcpOptionsDefault{
		_statusCode: code,
	}
}

/*DeleteDhcpOptionsDefault handles this case with default header values.

An error has occurred.
*/
type DeleteDhcpOptionsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete dhcp options default response
func (o *DeleteDhcpOptionsDefault) Code() int {
	return o._statusCode
}

func (o *DeleteDhcpOptionsDefault) Error() string {
	return fmt.Sprintf("[DELETE /dhcps/{dhcpId}][%d] DeleteDhcpOptions default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteDhcpOptionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
