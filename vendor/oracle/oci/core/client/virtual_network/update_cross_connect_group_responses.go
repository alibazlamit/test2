package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdateCrossConnectGroupReader is a Reader for the UpdateCrossConnectGroup structure.
type UpdateCrossConnectGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCrossConnectGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateCrossConnectGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateCrossConnectGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateCrossConnectGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateCrossConnectGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateCrossConnectGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateCrossConnectGroupPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateCrossConnectGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateCrossConnectGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateCrossConnectGroupOK creates a UpdateCrossConnectGroupOK with default headers values
func NewUpdateCrossConnectGroupOK() *UpdateCrossConnectGroupOK {
	return &UpdateCrossConnectGroupOK{}
}

/*UpdateCrossConnectGroupOK handles this case with default header values.

The cross-connect group was updated.
*/
type UpdateCrossConnectGroupOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.CrossConnectGroup
}

func (o *UpdateCrossConnectGroupOK) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] updateCrossConnectGroupOK  %+v", 200, o.Payload)
}

func (o *UpdateCrossConnectGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.CrossConnectGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCrossConnectGroupBadRequest creates a UpdateCrossConnectGroupBadRequest with default headers values
func NewUpdateCrossConnectGroupBadRequest() *UpdateCrossConnectGroupBadRequest {
	return &UpdateCrossConnectGroupBadRequest{}
}

/*UpdateCrossConnectGroupBadRequest handles this case with default header values.

Bad Request
*/
type UpdateCrossConnectGroupBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCrossConnectGroupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] updateCrossConnectGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCrossConnectGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCrossConnectGroupUnauthorized creates a UpdateCrossConnectGroupUnauthorized with default headers values
func NewUpdateCrossConnectGroupUnauthorized() *UpdateCrossConnectGroupUnauthorized {
	return &UpdateCrossConnectGroupUnauthorized{}
}

/*UpdateCrossConnectGroupUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateCrossConnectGroupUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCrossConnectGroupUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] updateCrossConnectGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateCrossConnectGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCrossConnectGroupNotFound creates a UpdateCrossConnectGroupNotFound with default headers values
func NewUpdateCrossConnectGroupNotFound() *UpdateCrossConnectGroupNotFound {
	return &UpdateCrossConnectGroupNotFound{}
}

/*UpdateCrossConnectGroupNotFound handles this case with default header values.

Not Found
*/
type UpdateCrossConnectGroupNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCrossConnectGroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] updateCrossConnectGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCrossConnectGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCrossConnectGroupConflict creates a UpdateCrossConnectGroupConflict with default headers values
func NewUpdateCrossConnectGroupConflict() *UpdateCrossConnectGroupConflict {
	return &UpdateCrossConnectGroupConflict{}
}

/*UpdateCrossConnectGroupConflict handles this case with default header values.

Conflict
*/
type UpdateCrossConnectGroupConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCrossConnectGroupConflict) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] updateCrossConnectGroupConflict  %+v", 409, o.Payload)
}

func (o *UpdateCrossConnectGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCrossConnectGroupPreconditionFailed creates a UpdateCrossConnectGroupPreconditionFailed with default headers values
func NewUpdateCrossConnectGroupPreconditionFailed() *UpdateCrossConnectGroupPreconditionFailed {
	return &UpdateCrossConnectGroupPreconditionFailed{}
}

/*UpdateCrossConnectGroupPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateCrossConnectGroupPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCrossConnectGroupPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] updateCrossConnectGroupPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateCrossConnectGroupPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCrossConnectGroupInternalServerError creates a UpdateCrossConnectGroupInternalServerError with default headers values
func NewUpdateCrossConnectGroupInternalServerError() *UpdateCrossConnectGroupInternalServerError {
	return &UpdateCrossConnectGroupInternalServerError{}
}

/*UpdateCrossConnectGroupInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateCrossConnectGroupInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCrossConnectGroupInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] updateCrossConnectGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCrossConnectGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCrossConnectGroupDefault creates a UpdateCrossConnectGroupDefault with default headers values
func NewUpdateCrossConnectGroupDefault(code int) *UpdateCrossConnectGroupDefault {
	return &UpdateCrossConnectGroupDefault{
		_statusCode: code,
	}
}

/*UpdateCrossConnectGroupDefault handles this case with default header values.

An error has occurred.
*/
type UpdateCrossConnectGroupDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update cross connect group default response
func (o *UpdateCrossConnectGroupDefault) Code() int {
	return o._statusCode
}

func (o *UpdateCrossConnectGroupDefault) Error() string {
	return fmt.Sprintf("[PUT /crossConnectGroups/{crossConnectGroupId}][%d] UpdateCrossConnectGroup default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateCrossConnectGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
