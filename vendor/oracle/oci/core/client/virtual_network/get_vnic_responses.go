package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetVnicReader is a Reader for the GetVnic structure.
type GetVnicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVnicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVnicOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetVnicUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetVnicNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetVnicInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVnicDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVnicOK creates a GetVnicOK with default headers values
func NewGetVnicOK() *GetVnicOK {
	return &GetVnicOK{}
}

/*GetVnicOK handles this case with default header values.

The VNIC was retrieved.
*/
type GetVnicOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Vnic
}

func (o *GetVnicOK) Error() string {
	return fmt.Sprintf("[GET /vnics/{vnicId}][%d] getVnicOK  %+v", 200, o.Payload)
}

func (o *GetVnicOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Vnic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicUnauthorized creates a GetVnicUnauthorized with default headers values
func NewGetVnicUnauthorized() *GetVnicUnauthorized {
	return &GetVnicUnauthorized{}
}

/*GetVnicUnauthorized handles this case with default header values.

Unauthorized
*/
type GetVnicUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVnicUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vnics/{vnicId}][%d] getVnicUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVnicUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicNotFound creates a GetVnicNotFound with default headers values
func NewGetVnicNotFound() *GetVnicNotFound {
	return &GetVnicNotFound{}
}

/*GetVnicNotFound handles this case with default header values.

Not Found
*/
type GetVnicNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVnicNotFound) Error() string {
	return fmt.Sprintf("[GET /vnics/{vnicId}][%d] getVnicNotFound  %+v", 404, o.Payload)
}

func (o *GetVnicNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicInternalServerError creates a GetVnicInternalServerError with default headers values
func NewGetVnicInternalServerError() *GetVnicInternalServerError {
	return &GetVnicInternalServerError{}
}

/*GetVnicInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetVnicInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVnicInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vnics/{vnicId}][%d] getVnicInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVnicInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicDefault creates a GetVnicDefault with default headers values
func NewGetVnicDefault(code int) *GetVnicDefault {
	return &GetVnicDefault{
		_statusCode: code,
	}
}

/*GetVnicDefault handles this case with default header values.

An error has occurred.
*/
type GetVnicDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get vnic default response
func (o *GetVnicDefault) Code() int {
	return o._statusCode
}

func (o *GetVnicDefault) Error() string {
	return fmt.Sprintf("[GET /vnics/{vnicId}][%d] GetVnic default  %+v", o._statusCode, o.Payload)
}

func (o *GetVnicDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
