package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdateDrgAttachmentReader is a Reader for the UpdateDrgAttachment structure.
type UpdateDrgAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDrgAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDrgAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateDrgAttachmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateDrgAttachmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateDrgAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateDrgAttachmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateDrgAttachmentPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateDrgAttachmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateDrgAttachmentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateDrgAttachmentOK creates a UpdateDrgAttachmentOK with default headers values
func NewUpdateDrgAttachmentOK() *UpdateDrgAttachmentOK {
	return &UpdateDrgAttachmentOK{}
}

/*UpdateDrgAttachmentOK handles this case with default header values.

The `DrgAttachment` was updated.
*/
type UpdateDrgAttachmentOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.DrgAttachment
}

func (o *UpdateDrgAttachmentOK) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] updateDrgAttachmentOK  %+v", 200, o.Payload)
}

func (o *UpdateDrgAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.DrgAttachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDrgAttachmentBadRequest creates a UpdateDrgAttachmentBadRequest with default headers values
func NewUpdateDrgAttachmentBadRequest() *UpdateDrgAttachmentBadRequest {
	return &UpdateDrgAttachmentBadRequest{}
}

/*UpdateDrgAttachmentBadRequest handles this case with default header values.

Bad Request
*/
type UpdateDrgAttachmentBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateDrgAttachmentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] updateDrgAttachmentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDrgAttachmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDrgAttachmentUnauthorized creates a UpdateDrgAttachmentUnauthorized with default headers values
func NewUpdateDrgAttachmentUnauthorized() *UpdateDrgAttachmentUnauthorized {
	return &UpdateDrgAttachmentUnauthorized{}
}

/*UpdateDrgAttachmentUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateDrgAttachmentUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateDrgAttachmentUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] updateDrgAttachmentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateDrgAttachmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDrgAttachmentNotFound creates a UpdateDrgAttachmentNotFound with default headers values
func NewUpdateDrgAttachmentNotFound() *UpdateDrgAttachmentNotFound {
	return &UpdateDrgAttachmentNotFound{}
}

/*UpdateDrgAttachmentNotFound handles this case with default header values.

Not Found
*/
type UpdateDrgAttachmentNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateDrgAttachmentNotFound) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] updateDrgAttachmentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDrgAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDrgAttachmentConflict creates a UpdateDrgAttachmentConflict with default headers values
func NewUpdateDrgAttachmentConflict() *UpdateDrgAttachmentConflict {
	return &UpdateDrgAttachmentConflict{}
}

/*UpdateDrgAttachmentConflict handles this case with default header values.

Conflict
*/
type UpdateDrgAttachmentConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateDrgAttachmentConflict) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] updateDrgAttachmentConflict  %+v", 409, o.Payload)
}

func (o *UpdateDrgAttachmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDrgAttachmentPreconditionFailed creates a UpdateDrgAttachmentPreconditionFailed with default headers values
func NewUpdateDrgAttachmentPreconditionFailed() *UpdateDrgAttachmentPreconditionFailed {
	return &UpdateDrgAttachmentPreconditionFailed{}
}

/*UpdateDrgAttachmentPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateDrgAttachmentPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateDrgAttachmentPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] updateDrgAttachmentPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateDrgAttachmentPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDrgAttachmentInternalServerError creates a UpdateDrgAttachmentInternalServerError with default headers values
func NewUpdateDrgAttachmentInternalServerError() *UpdateDrgAttachmentInternalServerError {
	return &UpdateDrgAttachmentInternalServerError{}
}

/*UpdateDrgAttachmentInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateDrgAttachmentInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateDrgAttachmentInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] updateDrgAttachmentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDrgAttachmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDrgAttachmentDefault creates a UpdateDrgAttachmentDefault with default headers values
func NewUpdateDrgAttachmentDefault(code int) *UpdateDrgAttachmentDefault {
	return &UpdateDrgAttachmentDefault{
		_statusCode: code,
	}
}

/*UpdateDrgAttachmentDefault handles this case with default header values.

An error has occurred.
*/
type UpdateDrgAttachmentDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update drg attachment default response
func (o *UpdateDrgAttachmentDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDrgAttachmentDefault) Error() string {
	return fmt.Sprintf("[PUT /drgAttachments/{drgAttachmentId}][%d] UpdateDrgAttachment default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDrgAttachmentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
