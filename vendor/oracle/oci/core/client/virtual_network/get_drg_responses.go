package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetDrgReader is a Reader for the GetDrg structure.
type GetDrgReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDrgReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDrgOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetDrgUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDrgNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewGetDrgPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetDrgInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetDrgDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDrgOK creates a GetDrgOK with default headers values
func NewGetDrgOK() *GetDrgOK {
	return &GetDrgOK{}
}

/*GetDrgOK handles this case with default header values.

The DRG was retrieved.
*/
type GetDrgOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Drg
}

func (o *GetDrgOK) Error() string {
	return fmt.Sprintf("[GET /drgs/{drgId}][%d] getDrgOK  %+v", 200, o.Payload)
}

func (o *GetDrgOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Drg)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgUnauthorized creates a GetDrgUnauthorized with default headers values
func NewGetDrgUnauthorized() *GetDrgUnauthorized {
	return &GetDrgUnauthorized{}
}

/*GetDrgUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDrgUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetDrgUnauthorized) Error() string {
	return fmt.Sprintf("[GET /drgs/{drgId}][%d] getDrgUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDrgUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgNotFound creates a GetDrgNotFound with default headers values
func NewGetDrgNotFound() *GetDrgNotFound {
	return &GetDrgNotFound{}
}

/*GetDrgNotFound handles this case with default header values.

Not Found
*/
type GetDrgNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetDrgNotFound) Error() string {
	return fmt.Sprintf("[GET /drgs/{drgId}][%d] getDrgNotFound  %+v", 404, o.Payload)
}

func (o *GetDrgNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgPreconditionFailed creates a GetDrgPreconditionFailed with default headers values
func NewGetDrgPreconditionFailed() *GetDrgPreconditionFailed {
	return &GetDrgPreconditionFailed{}
}

/*GetDrgPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type GetDrgPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetDrgPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /drgs/{drgId}][%d] getDrgPreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetDrgPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgInternalServerError creates a GetDrgInternalServerError with default headers values
func NewGetDrgInternalServerError() *GetDrgInternalServerError {
	return &GetDrgInternalServerError{}
}

/*GetDrgInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetDrgInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetDrgInternalServerError) Error() string {
	return fmt.Sprintf("[GET /drgs/{drgId}][%d] getDrgInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDrgInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgDefault creates a GetDrgDefault with default headers values
func NewGetDrgDefault(code int) *GetDrgDefault {
	return &GetDrgDefault{
		_statusCode: code,
	}
}

/*GetDrgDefault handles this case with default header values.

An error has occurred.
*/
type GetDrgDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get drg default response
func (o *GetDrgDefault) Code() int {
	return o._statusCode
}

func (o *GetDrgDefault) Error() string {
	return fmt.Sprintf("[GET /drgs/{drgId}][%d] GetDrg default  %+v", o._statusCode, o.Payload)
}

func (o *GetDrgDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
