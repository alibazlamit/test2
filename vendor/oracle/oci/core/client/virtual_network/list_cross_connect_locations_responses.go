package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// ListCrossConnectLocationsReader is a Reader for the ListCrossConnectLocations structure.
type ListCrossConnectLocationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCrossConnectLocationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListCrossConnectLocationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListCrossConnectLocationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListCrossConnectLocationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListCrossConnectLocationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListCrossConnectLocationsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListCrossConnectLocationsOK creates a ListCrossConnectLocationsOK with default headers values
func NewListCrossConnectLocationsOK() *ListCrossConnectLocationsOK {
	return &ListCrossConnectLocationsOK{}
}

/*ListCrossConnectLocationsOK handles this case with default header values.

The list is being retrieved.
*/
type ListCrossConnectLocationsOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.CrossConnectLocation
}

func (o *ListCrossConnectLocationsOK) Error() string {
	return fmt.Sprintf("[GET /crossConnectLocations][%d] listCrossConnectLocationsOK  %+v", 200, o.Payload)
}

func (o *ListCrossConnectLocationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCrossConnectLocationsUnauthorized creates a ListCrossConnectLocationsUnauthorized with default headers values
func NewListCrossConnectLocationsUnauthorized() *ListCrossConnectLocationsUnauthorized {
	return &ListCrossConnectLocationsUnauthorized{}
}

/*ListCrossConnectLocationsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListCrossConnectLocationsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListCrossConnectLocationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /crossConnectLocations][%d] listCrossConnectLocationsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListCrossConnectLocationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCrossConnectLocationsNotFound creates a ListCrossConnectLocationsNotFound with default headers values
func NewListCrossConnectLocationsNotFound() *ListCrossConnectLocationsNotFound {
	return &ListCrossConnectLocationsNotFound{}
}

/*ListCrossConnectLocationsNotFound handles this case with default header values.

Not Found
*/
type ListCrossConnectLocationsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListCrossConnectLocationsNotFound) Error() string {
	return fmt.Sprintf("[GET /crossConnectLocations][%d] listCrossConnectLocationsNotFound  %+v", 404, o.Payload)
}

func (o *ListCrossConnectLocationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCrossConnectLocationsInternalServerError creates a ListCrossConnectLocationsInternalServerError with default headers values
func NewListCrossConnectLocationsInternalServerError() *ListCrossConnectLocationsInternalServerError {
	return &ListCrossConnectLocationsInternalServerError{}
}

/*ListCrossConnectLocationsInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListCrossConnectLocationsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListCrossConnectLocationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /crossConnectLocations][%d] listCrossConnectLocationsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListCrossConnectLocationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCrossConnectLocationsDefault creates a ListCrossConnectLocationsDefault with default headers values
func NewListCrossConnectLocationsDefault(code int) *ListCrossConnectLocationsDefault {
	return &ListCrossConnectLocationsDefault{
		_statusCode: code,
	}
}

/*ListCrossConnectLocationsDefault handles this case with default header values.

An error has occurred.
*/
type ListCrossConnectLocationsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list cross connect locations default response
func (o *ListCrossConnectLocationsDefault) Code() int {
	return o._statusCode
}

func (o *ListCrossConnectLocationsDefault) Error() string {
	return fmt.Sprintf("[GET /crossConnectLocations][%d] ListCrossConnectLocations default  %+v", o._statusCode, o.Payload)
}

func (o *ListCrossConnectLocationsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
