package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetVcnReader is a Reader for the GetVcn structure.
type GetVcnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVcnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVcnOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetVcnUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetVcnNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetVcnInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVcnDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVcnOK creates a GetVcnOK with default headers values
func NewGetVcnOK() *GetVcnOK {
	return &GetVcnOK{}
}

/*GetVcnOK handles this case with default header values.

The VCN was retrieved.
*/
type GetVcnOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Vcn
}

func (o *GetVcnOK) Error() string {
	return fmt.Sprintf("[GET /vcns/{vcnId}][%d] getVcnOK  %+v", 200, o.Payload)
}

func (o *GetVcnOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Vcn)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcnUnauthorized creates a GetVcnUnauthorized with default headers values
func NewGetVcnUnauthorized() *GetVcnUnauthorized {
	return &GetVcnUnauthorized{}
}

/*GetVcnUnauthorized handles this case with default header values.

Unauthorized
*/
type GetVcnUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVcnUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vcns/{vcnId}][%d] getVcnUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVcnUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcnNotFound creates a GetVcnNotFound with default headers values
func NewGetVcnNotFound() *GetVcnNotFound {
	return &GetVcnNotFound{}
}

/*GetVcnNotFound handles this case with default header values.

Not Found
*/
type GetVcnNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVcnNotFound) Error() string {
	return fmt.Sprintf("[GET /vcns/{vcnId}][%d] getVcnNotFound  %+v", 404, o.Payload)
}

func (o *GetVcnNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcnInternalServerError creates a GetVcnInternalServerError with default headers values
func NewGetVcnInternalServerError() *GetVcnInternalServerError {
	return &GetVcnInternalServerError{}
}

/*GetVcnInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetVcnInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVcnInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vcns/{vcnId}][%d] getVcnInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVcnInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcnDefault creates a GetVcnDefault with default headers values
func NewGetVcnDefault(code int) *GetVcnDefault {
	return &GetVcnDefault{
		_statusCode: code,
	}
}

/*GetVcnDefault handles this case with default header values.

An error has occurred.
*/
type GetVcnDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get vcn default response
func (o *GetVcnDefault) Code() int {
	return o._statusCode
}

func (o *GetVcnDefault) Error() string {
	return fmt.Sprintf("[GET /vcns/{vcnId}][%d] GetVcn default  %+v", o._statusCode, o.Payload)
}

func (o *GetVcnDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
