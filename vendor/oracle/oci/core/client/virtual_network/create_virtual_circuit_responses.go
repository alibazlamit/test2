package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateVirtualCircuitReader is a Reader for the CreateVirtualCircuit structure.
type CreateVirtualCircuitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVirtualCircuitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateVirtualCircuitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateVirtualCircuitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateVirtualCircuitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateVirtualCircuitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateVirtualCircuitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateVirtualCircuitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateVirtualCircuitOK creates a CreateVirtualCircuitOK with default headers values
func NewCreateVirtualCircuitOK() *CreateVirtualCircuitOK {
	return &CreateVirtualCircuitOK{}
}

/*CreateVirtualCircuitOK handles this case with default header values.

The VirtualCircuit was created.
*/
type CreateVirtualCircuitOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.VirtualCircuit
}

func (o *CreateVirtualCircuitOK) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits][%d] createVirtualCircuitOK  %+v", 200, o.Payload)
}

func (o *CreateVirtualCircuitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.VirtualCircuit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualCircuitBadRequest creates a CreateVirtualCircuitBadRequest with default headers values
func NewCreateVirtualCircuitBadRequest() *CreateVirtualCircuitBadRequest {
	return &CreateVirtualCircuitBadRequest{}
}

/*CreateVirtualCircuitBadRequest handles this case with default header values.

Bad Request
*/
type CreateVirtualCircuitBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVirtualCircuitBadRequest) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits][%d] createVirtualCircuitBadRequest  %+v", 400, o.Payload)
}

func (o *CreateVirtualCircuitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualCircuitUnauthorized creates a CreateVirtualCircuitUnauthorized with default headers values
func NewCreateVirtualCircuitUnauthorized() *CreateVirtualCircuitUnauthorized {
	return &CreateVirtualCircuitUnauthorized{}
}

/*CreateVirtualCircuitUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateVirtualCircuitUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVirtualCircuitUnauthorized) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits][%d] createVirtualCircuitUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateVirtualCircuitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualCircuitConflict creates a CreateVirtualCircuitConflict with default headers values
func NewCreateVirtualCircuitConflict() *CreateVirtualCircuitConflict {
	return &CreateVirtualCircuitConflict{}
}

/*CreateVirtualCircuitConflict handles this case with default header values.

Conflict
*/
type CreateVirtualCircuitConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVirtualCircuitConflict) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits][%d] createVirtualCircuitConflict  %+v", 409, o.Payload)
}

func (o *CreateVirtualCircuitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualCircuitInternalServerError creates a CreateVirtualCircuitInternalServerError with default headers values
func NewCreateVirtualCircuitInternalServerError() *CreateVirtualCircuitInternalServerError {
	return &CreateVirtualCircuitInternalServerError{}
}

/*CreateVirtualCircuitInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateVirtualCircuitInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateVirtualCircuitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits][%d] createVirtualCircuitInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateVirtualCircuitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualCircuitDefault creates a CreateVirtualCircuitDefault with default headers values
func NewCreateVirtualCircuitDefault(code int) *CreateVirtualCircuitDefault {
	return &CreateVirtualCircuitDefault{
		_statusCode: code,
	}
}

/*CreateVirtualCircuitDefault handles this case with default header values.

An error has occurred.
*/
type CreateVirtualCircuitDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create virtual circuit default response
func (o *CreateVirtualCircuitDefault) Code() int {
	return o._statusCode
}

func (o *CreateVirtualCircuitDefault) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits][%d] CreateVirtualCircuit default  %+v", o._statusCode, o.Payload)
}

func (o *CreateVirtualCircuitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
