package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateRouteTableReader is a Reader for the CreateRouteTable structure.
type CreateRouteTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRouteTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateRouteTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateRouteTableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateRouteTableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateRouteTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateRouteTableConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateRouteTableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateRouteTableDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateRouteTableOK creates a CreateRouteTableOK with default headers values
func NewCreateRouteTableOK() *CreateRouteTableOK {
	return &CreateRouteTableOK{}
}

/*CreateRouteTableOK handles this case with default header values.

The route table was created.
*/
type CreateRouteTableOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.RouteTable
}

func (o *CreateRouteTableOK) Error() string {
	return fmt.Sprintf("[POST /routeTables][%d] createRouteTableOK  %+v", 200, o.Payload)
}

func (o *CreateRouteTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.RouteTable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRouteTableBadRequest creates a CreateRouteTableBadRequest with default headers values
func NewCreateRouteTableBadRequest() *CreateRouteTableBadRequest {
	return &CreateRouteTableBadRequest{}
}

/*CreateRouteTableBadRequest handles this case with default header values.

Bad Request
*/
type CreateRouteTableBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRouteTableBadRequest) Error() string {
	return fmt.Sprintf("[POST /routeTables][%d] createRouteTableBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRouteTableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRouteTableUnauthorized creates a CreateRouteTableUnauthorized with default headers values
func NewCreateRouteTableUnauthorized() *CreateRouteTableUnauthorized {
	return &CreateRouteTableUnauthorized{}
}

/*CreateRouteTableUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateRouteTableUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRouteTableUnauthorized) Error() string {
	return fmt.Sprintf("[POST /routeTables][%d] createRouteTableUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRouteTableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRouteTableNotFound creates a CreateRouteTableNotFound with default headers values
func NewCreateRouteTableNotFound() *CreateRouteTableNotFound {
	return &CreateRouteTableNotFound{}
}

/*CreateRouteTableNotFound handles this case with default header values.

Not Found
*/
type CreateRouteTableNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRouteTableNotFound) Error() string {
	return fmt.Sprintf("[POST /routeTables][%d] createRouteTableNotFound  %+v", 404, o.Payload)
}

func (o *CreateRouteTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRouteTableConflict creates a CreateRouteTableConflict with default headers values
func NewCreateRouteTableConflict() *CreateRouteTableConflict {
	return &CreateRouteTableConflict{}
}

/*CreateRouteTableConflict handles this case with default header values.

Conflict
*/
type CreateRouteTableConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRouteTableConflict) Error() string {
	return fmt.Sprintf("[POST /routeTables][%d] createRouteTableConflict  %+v", 409, o.Payload)
}

func (o *CreateRouteTableConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRouteTableInternalServerError creates a CreateRouteTableInternalServerError with default headers values
func NewCreateRouteTableInternalServerError() *CreateRouteTableInternalServerError {
	return &CreateRouteTableInternalServerError{}
}

/*CreateRouteTableInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateRouteTableInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRouteTableInternalServerError) Error() string {
	return fmt.Sprintf("[POST /routeTables][%d] createRouteTableInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRouteTableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRouteTableDefault creates a CreateRouteTableDefault with default headers values
func NewCreateRouteTableDefault(code int) *CreateRouteTableDefault {
	return &CreateRouteTableDefault{
		_statusCode: code,
	}
}

/*CreateRouteTableDefault handles this case with default header values.

An error has occurred.
*/
type CreateRouteTableDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create route table default response
func (o *CreateRouteTableDefault) Code() int {
	return o._statusCode
}

func (o *CreateRouteTableDefault) Error() string {
	return fmt.Sprintf("[POST /routeTables][%d] CreateRouteTable default  %+v", o._statusCode, o.Payload)
}

func (o *CreateRouteTableDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
