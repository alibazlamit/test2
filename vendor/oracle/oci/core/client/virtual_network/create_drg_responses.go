package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateDrgReader is a Reader for the CreateDrg structure.
type CreateDrgReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDrgReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateDrgOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateDrgBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateDrgUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateDrgNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateDrgConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateDrgInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateDrgDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDrgOK creates a CreateDrgOK with default headers values
func NewCreateDrgOK() *CreateDrgOK {
	return &CreateDrgOK{}
}

/*CreateDrgOK handles this case with default header values.

The DRG was created.
*/
type CreateDrgOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Drg
}

func (o *CreateDrgOK) Error() string {
	return fmt.Sprintf("[POST /drgs][%d] createDrgOK  %+v", 200, o.Payload)
}

func (o *CreateDrgOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Drg)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgBadRequest creates a CreateDrgBadRequest with default headers values
func NewCreateDrgBadRequest() *CreateDrgBadRequest {
	return &CreateDrgBadRequest{}
}

/*CreateDrgBadRequest handles this case with default header values.

Bad Request
*/
type CreateDrgBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgBadRequest) Error() string {
	return fmt.Sprintf("[POST /drgs][%d] createDrgBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDrgBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgUnauthorized creates a CreateDrgUnauthorized with default headers values
func NewCreateDrgUnauthorized() *CreateDrgUnauthorized {
	return &CreateDrgUnauthorized{}
}

/*CreateDrgUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateDrgUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgUnauthorized) Error() string {
	return fmt.Sprintf("[POST /drgs][%d] createDrgUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateDrgUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgNotFound creates a CreateDrgNotFound with default headers values
func NewCreateDrgNotFound() *CreateDrgNotFound {
	return &CreateDrgNotFound{}
}

/*CreateDrgNotFound handles this case with default header values.

Not Found
*/
type CreateDrgNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgNotFound) Error() string {
	return fmt.Sprintf("[POST /drgs][%d] createDrgNotFound  %+v", 404, o.Payload)
}

func (o *CreateDrgNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgConflict creates a CreateDrgConflict with default headers values
func NewCreateDrgConflict() *CreateDrgConflict {
	return &CreateDrgConflict{}
}

/*CreateDrgConflict handles this case with default header values.

Conflict
*/
type CreateDrgConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgConflict) Error() string {
	return fmt.Sprintf("[POST /drgs][%d] createDrgConflict  %+v", 409, o.Payload)
}

func (o *CreateDrgConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgInternalServerError creates a CreateDrgInternalServerError with default headers values
func NewCreateDrgInternalServerError() *CreateDrgInternalServerError {
	return &CreateDrgInternalServerError{}
}

/*CreateDrgInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateDrgInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgInternalServerError) Error() string {
	return fmt.Sprintf("[POST /drgs][%d] createDrgInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDrgInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgDefault creates a CreateDrgDefault with default headers values
func NewCreateDrgDefault(code int) *CreateDrgDefault {
	return &CreateDrgDefault{
		_statusCode: code,
	}
}

/*CreateDrgDefault handles this case with default header values.

An error has occurred.
*/
type CreateDrgDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create drg default response
func (o *CreateDrgDefault) Code() int {
	return o._statusCode
}

func (o *CreateDrgDefault) Error() string {
	return fmt.Sprintf("[POST /drgs][%d] CreateDrg default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDrgDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
