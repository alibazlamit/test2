package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetSubnetReader is a Reader for the GetSubnet structure.
type GetSubnetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubnetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSubnetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetSubnetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSubnetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSubnetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetSubnetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSubnetOK creates a GetSubnetOK with default headers values
func NewGetSubnetOK() *GetSubnetOK {
	return &GetSubnetOK{}
}

/*GetSubnetOK handles this case with default header values.

The subnet was retrieved.
*/
type GetSubnetOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Subnet
}

func (o *GetSubnetOK) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnetId}][%d] getSubnetOK  %+v", 200, o.Payload)
}

func (o *GetSubnetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Subnet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetUnauthorized creates a GetSubnetUnauthorized with default headers values
func NewGetSubnetUnauthorized() *GetSubnetUnauthorized {
	return &GetSubnetUnauthorized{}
}

/*GetSubnetUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSubnetUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetSubnetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnetId}][%d] getSubnetUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSubnetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetNotFound creates a GetSubnetNotFound with default headers values
func NewGetSubnetNotFound() *GetSubnetNotFound {
	return &GetSubnetNotFound{}
}

/*GetSubnetNotFound handles this case with default header values.

Not Found
*/
type GetSubnetNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetSubnetNotFound) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnetId}][%d] getSubnetNotFound  %+v", 404, o.Payload)
}

func (o *GetSubnetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetInternalServerError creates a GetSubnetInternalServerError with default headers values
func NewGetSubnetInternalServerError() *GetSubnetInternalServerError {
	return &GetSubnetInternalServerError{}
}

/*GetSubnetInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSubnetInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetSubnetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnetId}][%d] getSubnetInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSubnetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetDefault creates a GetSubnetDefault with default headers values
func NewGetSubnetDefault(code int) *GetSubnetDefault {
	return &GetSubnetDefault{
		_statusCode: code,
	}
}

/*GetSubnetDefault handles this case with default header values.

An error has occurred.
*/
type GetSubnetDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get subnet default response
func (o *GetSubnetDefault) Code() int {
	return o._statusCode
}

func (o *GetSubnetDefault) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnetId}][%d] GetSubnet default  %+v", o._statusCode, o.Payload)
}

func (o *GetSubnetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
