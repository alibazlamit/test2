package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DeleteCrossConnectGroupReader is a Reader for the DeleteCrossConnectGroup structure.
type DeleteCrossConnectGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCrossConnectGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteCrossConnectGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteCrossConnectGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteCrossConnectGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteCrossConnectGroupPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteCrossConnectGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteCrossConnectGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteCrossConnectGroupNoContent creates a DeleteCrossConnectGroupNoContent with default headers values
func NewDeleteCrossConnectGroupNoContent() *DeleteCrossConnectGroupNoContent {
	return &DeleteCrossConnectGroupNoContent{}
}

/*DeleteCrossConnectGroupNoContent handles this case with default header values.

The cross-connect group is being deleted.
*/
type DeleteCrossConnectGroupNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteCrossConnectGroupNoContent) Error() string {
	return fmt.Sprintf("[DELETE /crossConnectGroups/{crossConnectGroupId}][%d] deleteCrossConnectGroupNoContent ", 204)
}

func (o *DeleteCrossConnectGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteCrossConnectGroupUnauthorized creates a DeleteCrossConnectGroupUnauthorized with default headers values
func NewDeleteCrossConnectGroupUnauthorized() *DeleteCrossConnectGroupUnauthorized {
	return &DeleteCrossConnectGroupUnauthorized{}
}

/*DeleteCrossConnectGroupUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteCrossConnectGroupUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteCrossConnectGroupUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /crossConnectGroups/{crossConnectGroupId}][%d] deleteCrossConnectGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteCrossConnectGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCrossConnectGroupNotFound creates a DeleteCrossConnectGroupNotFound with default headers values
func NewDeleteCrossConnectGroupNotFound() *DeleteCrossConnectGroupNotFound {
	return &DeleteCrossConnectGroupNotFound{}
}

/*DeleteCrossConnectGroupNotFound handles this case with default header values.

Not Found
*/
type DeleteCrossConnectGroupNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteCrossConnectGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /crossConnectGroups/{crossConnectGroupId}][%d] deleteCrossConnectGroupNotFound  %+v", 404, o.Payload)
}

func (o *DeleteCrossConnectGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCrossConnectGroupPreconditionFailed creates a DeleteCrossConnectGroupPreconditionFailed with default headers values
func NewDeleteCrossConnectGroupPreconditionFailed() *DeleteCrossConnectGroupPreconditionFailed {
	return &DeleteCrossConnectGroupPreconditionFailed{}
}

/*DeleteCrossConnectGroupPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteCrossConnectGroupPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteCrossConnectGroupPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /crossConnectGroups/{crossConnectGroupId}][%d] deleteCrossConnectGroupPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteCrossConnectGroupPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCrossConnectGroupInternalServerError creates a DeleteCrossConnectGroupInternalServerError with default headers values
func NewDeleteCrossConnectGroupInternalServerError() *DeleteCrossConnectGroupInternalServerError {
	return &DeleteCrossConnectGroupInternalServerError{}
}

/*DeleteCrossConnectGroupInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteCrossConnectGroupInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteCrossConnectGroupInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /crossConnectGroups/{crossConnectGroupId}][%d] deleteCrossConnectGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteCrossConnectGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCrossConnectGroupDefault creates a DeleteCrossConnectGroupDefault with default headers values
func NewDeleteCrossConnectGroupDefault(code int) *DeleteCrossConnectGroupDefault {
	return &DeleteCrossConnectGroupDefault{
		_statusCode: code,
	}
}

/*DeleteCrossConnectGroupDefault handles this case with default header values.

An error has occurred.
*/
type DeleteCrossConnectGroupDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete cross connect group default response
func (o *DeleteCrossConnectGroupDefault) Code() int {
	return o._statusCode
}

func (o *DeleteCrossConnectGroupDefault) Error() string {
	return fmt.Sprintf("[DELETE /crossConnectGroups/{crossConnectGroupId}][%d] DeleteCrossConnectGroup default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteCrossConnectGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
