package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DeleteVirtualCircuitReader is a Reader for the DeleteVirtualCircuit structure.
type DeleteVirtualCircuitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVirtualCircuitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteVirtualCircuitNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteVirtualCircuitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteVirtualCircuitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteVirtualCircuitPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteVirtualCircuitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteVirtualCircuitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteVirtualCircuitNoContent creates a DeleteVirtualCircuitNoContent with default headers values
func NewDeleteVirtualCircuitNoContent() *DeleteVirtualCircuitNoContent {
	return &DeleteVirtualCircuitNoContent{}
}

/*DeleteVirtualCircuitNoContent handles this case with default header values.

The virtual circuit is being deleted.
*/
type DeleteVirtualCircuitNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteVirtualCircuitNoContent) Error() string {
	return fmt.Sprintf("[DELETE /virtualCircuits/{virtualCircuitId}][%d] deleteVirtualCircuitNoContent ", 204)
}

func (o *DeleteVirtualCircuitNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteVirtualCircuitUnauthorized creates a DeleteVirtualCircuitUnauthorized with default headers values
func NewDeleteVirtualCircuitUnauthorized() *DeleteVirtualCircuitUnauthorized {
	return &DeleteVirtualCircuitUnauthorized{}
}

/*DeleteVirtualCircuitUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteVirtualCircuitUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteVirtualCircuitUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /virtualCircuits/{virtualCircuitId}][%d] deleteVirtualCircuitUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteVirtualCircuitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVirtualCircuitNotFound creates a DeleteVirtualCircuitNotFound with default headers values
func NewDeleteVirtualCircuitNotFound() *DeleteVirtualCircuitNotFound {
	return &DeleteVirtualCircuitNotFound{}
}

/*DeleteVirtualCircuitNotFound handles this case with default header values.

Not Found
*/
type DeleteVirtualCircuitNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteVirtualCircuitNotFound) Error() string {
	return fmt.Sprintf("[DELETE /virtualCircuits/{virtualCircuitId}][%d] deleteVirtualCircuitNotFound  %+v", 404, o.Payload)
}

func (o *DeleteVirtualCircuitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVirtualCircuitPreconditionFailed creates a DeleteVirtualCircuitPreconditionFailed with default headers values
func NewDeleteVirtualCircuitPreconditionFailed() *DeleteVirtualCircuitPreconditionFailed {
	return &DeleteVirtualCircuitPreconditionFailed{}
}

/*DeleteVirtualCircuitPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteVirtualCircuitPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteVirtualCircuitPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /virtualCircuits/{virtualCircuitId}][%d] deleteVirtualCircuitPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteVirtualCircuitPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVirtualCircuitInternalServerError creates a DeleteVirtualCircuitInternalServerError with default headers values
func NewDeleteVirtualCircuitInternalServerError() *DeleteVirtualCircuitInternalServerError {
	return &DeleteVirtualCircuitInternalServerError{}
}

/*DeleteVirtualCircuitInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteVirtualCircuitInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteVirtualCircuitInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /virtualCircuits/{virtualCircuitId}][%d] deleteVirtualCircuitInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteVirtualCircuitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVirtualCircuitDefault creates a DeleteVirtualCircuitDefault with default headers values
func NewDeleteVirtualCircuitDefault(code int) *DeleteVirtualCircuitDefault {
	return &DeleteVirtualCircuitDefault{
		_statusCode: code,
	}
}

/*DeleteVirtualCircuitDefault handles this case with default header values.

An error has occurred.
*/
type DeleteVirtualCircuitDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete virtual circuit default response
func (o *DeleteVirtualCircuitDefault) Code() int {
	return o._statusCode
}

func (o *DeleteVirtualCircuitDefault) Error() string {
	return fmt.Sprintf("[DELETE /virtualCircuits/{virtualCircuitId}][%d] DeleteVirtualCircuit default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVirtualCircuitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
