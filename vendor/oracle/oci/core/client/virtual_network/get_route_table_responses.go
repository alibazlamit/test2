package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetRouteTableReader is a Reader for the GetRouteTable structure.
type GetRouteTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRouteTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRouteTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetRouteTableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetRouteTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetRouteTableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetRouteTableDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRouteTableOK creates a GetRouteTableOK with default headers values
func NewGetRouteTableOK() *GetRouteTableOK {
	return &GetRouteTableOK{}
}

/*GetRouteTableOK handles this case with default header values.

The route table was retrieved.
*/
type GetRouteTableOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.RouteTable
}

func (o *GetRouteTableOK) Error() string {
	return fmt.Sprintf("[GET /routeTables/{rtId}][%d] getRouteTableOK  %+v", 200, o.Payload)
}

func (o *GetRouteTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.RouteTable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteTableUnauthorized creates a GetRouteTableUnauthorized with default headers values
func NewGetRouteTableUnauthorized() *GetRouteTableUnauthorized {
	return &GetRouteTableUnauthorized{}
}

/*GetRouteTableUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRouteTableUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetRouteTableUnauthorized) Error() string {
	return fmt.Sprintf("[GET /routeTables/{rtId}][%d] getRouteTableUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRouteTableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteTableNotFound creates a GetRouteTableNotFound with default headers values
func NewGetRouteTableNotFound() *GetRouteTableNotFound {
	return &GetRouteTableNotFound{}
}

/*GetRouteTableNotFound handles this case with default header values.

Not Found
*/
type GetRouteTableNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetRouteTableNotFound) Error() string {
	return fmt.Sprintf("[GET /routeTables/{rtId}][%d] getRouteTableNotFound  %+v", 404, o.Payload)
}

func (o *GetRouteTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteTableInternalServerError creates a GetRouteTableInternalServerError with default headers values
func NewGetRouteTableInternalServerError() *GetRouteTableInternalServerError {
	return &GetRouteTableInternalServerError{}
}

/*GetRouteTableInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetRouteTableInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetRouteTableInternalServerError) Error() string {
	return fmt.Sprintf("[GET /routeTables/{rtId}][%d] getRouteTableInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRouteTableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteTableDefault creates a GetRouteTableDefault with default headers values
func NewGetRouteTableDefault(code int) *GetRouteTableDefault {
	return &GetRouteTableDefault{
		_statusCode: code,
	}
}

/*GetRouteTableDefault handles this case with default header values.

An error has occurred.
*/
type GetRouteTableDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get route table default response
func (o *GetRouteTableDefault) Code() int {
	return o._statusCode
}

func (o *GetRouteTableDefault) Error() string {
	return fmt.Sprintf("[GET /routeTables/{rtId}][%d] GetRouteTable default  %+v", o._statusCode, o.Payload)
}

func (o *GetRouteTableDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
