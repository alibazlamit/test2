package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdateVcnReader is a Reader for the UpdateVcn structure.
type UpdateVcnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVcnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateVcnOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateVcnBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateVcnUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateVcnNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateVcnConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateVcnPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateVcnInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateVcnDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVcnOK creates a UpdateVcnOK with default headers values
func NewUpdateVcnOK() *UpdateVcnOK {
	return &UpdateVcnOK{}
}

/*UpdateVcnOK handles this case with default header values.

The VCN was updated.
*/
type UpdateVcnOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Vcn
}

func (o *UpdateVcnOK) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] updateVcnOK  %+v", 200, o.Payload)
}

func (o *UpdateVcnOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Vcn)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcnBadRequest creates a UpdateVcnBadRequest with default headers values
func NewUpdateVcnBadRequest() *UpdateVcnBadRequest {
	return &UpdateVcnBadRequest{}
}

/*UpdateVcnBadRequest handles this case with default header values.

Bad Request
*/
type UpdateVcnBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVcnBadRequest) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] updateVcnBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVcnBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcnUnauthorized creates a UpdateVcnUnauthorized with default headers values
func NewUpdateVcnUnauthorized() *UpdateVcnUnauthorized {
	return &UpdateVcnUnauthorized{}
}

/*UpdateVcnUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateVcnUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVcnUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] updateVcnUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateVcnUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcnNotFound creates a UpdateVcnNotFound with default headers values
func NewUpdateVcnNotFound() *UpdateVcnNotFound {
	return &UpdateVcnNotFound{}
}

/*UpdateVcnNotFound handles this case with default header values.

Not Found
*/
type UpdateVcnNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVcnNotFound) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] updateVcnNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVcnNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcnConflict creates a UpdateVcnConflict with default headers values
func NewUpdateVcnConflict() *UpdateVcnConflict {
	return &UpdateVcnConflict{}
}

/*UpdateVcnConflict handles this case with default header values.

Conflict
*/
type UpdateVcnConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVcnConflict) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] updateVcnConflict  %+v", 409, o.Payload)
}

func (o *UpdateVcnConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcnPreconditionFailed creates a UpdateVcnPreconditionFailed with default headers values
func NewUpdateVcnPreconditionFailed() *UpdateVcnPreconditionFailed {
	return &UpdateVcnPreconditionFailed{}
}

/*UpdateVcnPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateVcnPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVcnPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] updateVcnPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateVcnPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcnInternalServerError creates a UpdateVcnInternalServerError with default headers values
func NewUpdateVcnInternalServerError() *UpdateVcnInternalServerError {
	return &UpdateVcnInternalServerError{}
}

/*UpdateVcnInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateVcnInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVcnInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] updateVcnInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVcnInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcnDefault creates a UpdateVcnDefault with default headers values
func NewUpdateVcnDefault(code int) *UpdateVcnDefault {
	return &UpdateVcnDefault{
		_statusCode: code,
	}
}

/*UpdateVcnDefault handles this case with default header values.

An error has occurred.
*/
type UpdateVcnDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update vcn default response
func (o *UpdateVcnDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVcnDefault) Error() string {
	return fmt.Sprintf("[PUT /vcns/{vcnId}][%d] UpdateVcn default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateVcnDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
