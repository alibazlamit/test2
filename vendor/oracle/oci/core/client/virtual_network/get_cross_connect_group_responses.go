package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetCrossConnectGroupReader is a Reader for the GetCrossConnectGroup structure.
type GetCrossConnectGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCrossConnectGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCrossConnectGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCrossConnectGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCrossConnectGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetCrossConnectGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetCrossConnectGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCrossConnectGroupOK creates a GetCrossConnectGroupOK with default headers values
func NewGetCrossConnectGroupOK() *GetCrossConnectGroupOK {
	return &GetCrossConnectGroupOK{}
}

/*GetCrossConnectGroupOK handles this case with default header values.

The cross-connect group was retrieved.
*/
type GetCrossConnectGroupOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.CrossConnectGroup
}

func (o *GetCrossConnectGroupOK) Error() string {
	return fmt.Sprintf("[GET /crossConnectGroups/{crossConnectGroupId}][%d] getCrossConnectGroupOK  %+v", 200, o.Payload)
}

func (o *GetCrossConnectGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.CrossConnectGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectGroupUnauthorized creates a GetCrossConnectGroupUnauthorized with default headers values
func NewGetCrossConnectGroupUnauthorized() *GetCrossConnectGroupUnauthorized {
	return &GetCrossConnectGroupUnauthorized{}
}

/*GetCrossConnectGroupUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCrossConnectGroupUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCrossConnectGroupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /crossConnectGroups/{crossConnectGroupId}][%d] getCrossConnectGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCrossConnectGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectGroupNotFound creates a GetCrossConnectGroupNotFound with default headers values
func NewGetCrossConnectGroupNotFound() *GetCrossConnectGroupNotFound {
	return &GetCrossConnectGroupNotFound{}
}

/*GetCrossConnectGroupNotFound handles this case with default header values.

Not Found
*/
type GetCrossConnectGroupNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCrossConnectGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /crossConnectGroups/{crossConnectGroupId}][%d] getCrossConnectGroupNotFound  %+v", 404, o.Payload)
}

func (o *GetCrossConnectGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectGroupInternalServerError creates a GetCrossConnectGroupInternalServerError with default headers values
func NewGetCrossConnectGroupInternalServerError() *GetCrossConnectGroupInternalServerError {
	return &GetCrossConnectGroupInternalServerError{}
}

/*GetCrossConnectGroupInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetCrossConnectGroupInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetCrossConnectGroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /crossConnectGroups/{crossConnectGroupId}][%d] getCrossConnectGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCrossConnectGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCrossConnectGroupDefault creates a GetCrossConnectGroupDefault with default headers values
func NewGetCrossConnectGroupDefault(code int) *GetCrossConnectGroupDefault {
	return &GetCrossConnectGroupDefault{
		_statusCode: code,
	}
}

/*GetCrossConnectGroupDefault handles this case with default header values.

An error has occurred.
*/
type GetCrossConnectGroupDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get cross connect group default response
func (o *GetCrossConnectGroupDefault) Code() int {
	return o._statusCode
}

func (o *GetCrossConnectGroupDefault) Error() string {
	return fmt.Sprintf("[GET /crossConnectGroups/{crossConnectGroupId}][%d] GetCrossConnectGroup default  %+v", o._statusCode, o.Payload)
}

func (o *GetCrossConnectGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
