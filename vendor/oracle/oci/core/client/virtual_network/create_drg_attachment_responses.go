package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateDrgAttachmentReader is a Reader for the CreateDrgAttachment structure.
type CreateDrgAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDrgAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateDrgAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateDrgAttachmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateDrgAttachmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateDrgAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateDrgAttachmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateDrgAttachmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateDrgAttachmentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDrgAttachmentOK creates a CreateDrgAttachmentOK with default headers values
func NewCreateDrgAttachmentOK() *CreateDrgAttachmentOK {
	return &CreateDrgAttachmentOK{}
}

/*CreateDrgAttachmentOK handles this case with default header values.

The DRG was attached.
*/
type CreateDrgAttachmentOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.DrgAttachment
}

func (o *CreateDrgAttachmentOK) Error() string {
	return fmt.Sprintf("[POST /drgAttachments][%d] createDrgAttachmentOK  %+v", 200, o.Payload)
}

func (o *CreateDrgAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.DrgAttachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgAttachmentBadRequest creates a CreateDrgAttachmentBadRequest with default headers values
func NewCreateDrgAttachmentBadRequest() *CreateDrgAttachmentBadRequest {
	return &CreateDrgAttachmentBadRequest{}
}

/*CreateDrgAttachmentBadRequest handles this case with default header values.

Bad Request
*/
type CreateDrgAttachmentBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgAttachmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /drgAttachments][%d] createDrgAttachmentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDrgAttachmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgAttachmentUnauthorized creates a CreateDrgAttachmentUnauthorized with default headers values
func NewCreateDrgAttachmentUnauthorized() *CreateDrgAttachmentUnauthorized {
	return &CreateDrgAttachmentUnauthorized{}
}

/*CreateDrgAttachmentUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateDrgAttachmentUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgAttachmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /drgAttachments][%d] createDrgAttachmentUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateDrgAttachmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgAttachmentNotFound creates a CreateDrgAttachmentNotFound with default headers values
func NewCreateDrgAttachmentNotFound() *CreateDrgAttachmentNotFound {
	return &CreateDrgAttachmentNotFound{}
}

/*CreateDrgAttachmentNotFound handles this case with default header values.

Not Found
*/
type CreateDrgAttachmentNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgAttachmentNotFound) Error() string {
	return fmt.Sprintf("[POST /drgAttachments][%d] createDrgAttachmentNotFound  %+v", 404, o.Payload)
}

func (o *CreateDrgAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgAttachmentConflict creates a CreateDrgAttachmentConflict with default headers values
func NewCreateDrgAttachmentConflict() *CreateDrgAttachmentConflict {
	return &CreateDrgAttachmentConflict{}
}

/*CreateDrgAttachmentConflict handles this case with default header values.

Conflict
*/
type CreateDrgAttachmentConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgAttachmentConflict) Error() string {
	return fmt.Sprintf("[POST /drgAttachments][%d] createDrgAttachmentConflict  %+v", 409, o.Payload)
}

func (o *CreateDrgAttachmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgAttachmentInternalServerError creates a CreateDrgAttachmentInternalServerError with default headers values
func NewCreateDrgAttachmentInternalServerError() *CreateDrgAttachmentInternalServerError {
	return &CreateDrgAttachmentInternalServerError{}
}

/*CreateDrgAttachmentInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateDrgAttachmentInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateDrgAttachmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /drgAttachments][%d] createDrgAttachmentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDrgAttachmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDrgAttachmentDefault creates a CreateDrgAttachmentDefault with default headers values
func NewCreateDrgAttachmentDefault(code int) *CreateDrgAttachmentDefault {
	return &CreateDrgAttachmentDefault{
		_statusCode: code,
	}
}

/*CreateDrgAttachmentDefault handles this case with default header values.

An error has occurred.
*/
type CreateDrgAttachmentDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create drg attachment default response
func (o *CreateDrgAttachmentDefault) Code() int {
	return o._statusCode
}

func (o *CreateDrgAttachmentDefault) Error() string {
	return fmt.Sprintf("[POST /drgAttachments][%d] CreateDrgAttachment default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDrgAttachmentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
