package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DeleteIPSecConnectionReader is a Reader for the DeleteIPSecConnection structure.
type DeleteIPSecConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIPSecConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteIPSecConnectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteIPSecConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteIPSecConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteIPSecConnectionPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteIPSecConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteIPSecConnectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteIPSecConnectionNoContent creates a DeleteIPSecConnectionNoContent with default headers values
func NewDeleteIPSecConnectionNoContent() *DeleteIPSecConnectionNoContent {
	return &DeleteIPSecConnectionNoContent{}
}

/*DeleteIPSecConnectionNoContent handles this case with default header values.

The request has been accepted
*/
type DeleteIPSecConnectionNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteIPSecConnectionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /ipsecConnections/{ipscId}][%d] deleteIpSecConnectionNoContent ", 204)
}

func (o *DeleteIPSecConnectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteIPSecConnectionUnauthorized creates a DeleteIPSecConnectionUnauthorized with default headers values
func NewDeleteIPSecConnectionUnauthorized() *DeleteIPSecConnectionUnauthorized {
	return &DeleteIPSecConnectionUnauthorized{}
}

/*DeleteIPSecConnectionUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteIPSecConnectionUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIPSecConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /ipsecConnections/{ipscId}][%d] deleteIpSecConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteIPSecConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIPSecConnectionNotFound creates a DeleteIPSecConnectionNotFound with default headers values
func NewDeleteIPSecConnectionNotFound() *DeleteIPSecConnectionNotFound {
	return &DeleteIPSecConnectionNotFound{}
}

/*DeleteIPSecConnectionNotFound handles this case with default header values.

Not Found
*/
type DeleteIPSecConnectionNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIPSecConnectionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /ipsecConnections/{ipscId}][%d] deleteIpSecConnectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteIPSecConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIPSecConnectionPreconditionFailed creates a DeleteIPSecConnectionPreconditionFailed with default headers values
func NewDeleteIPSecConnectionPreconditionFailed() *DeleteIPSecConnectionPreconditionFailed {
	return &DeleteIPSecConnectionPreconditionFailed{}
}

/*DeleteIPSecConnectionPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteIPSecConnectionPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIPSecConnectionPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /ipsecConnections/{ipscId}][%d] deleteIpSecConnectionPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteIPSecConnectionPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIPSecConnectionInternalServerError creates a DeleteIPSecConnectionInternalServerError with default headers values
func NewDeleteIPSecConnectionInternalServerError() *DeleteIPSecConnectionInternalServerError {
	return &DeleteIPSecConnectionInternalServerError{}
}

/*DeleteIPSecConnectionInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteIPSecConnectionInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIPSecConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ipsecConnections/{ipscId}][%d] deleteIpSecConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteIPSecConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIPSecConnectionDefault creates a DeleteIPSecConnectionDefault with default headers values
func NewDeleteIPSecConnectionDefault(code int) *DeleteIPSecConnectionDefault {
	return &DeleteIPSecConnectionDefault{
		_statusCode: code,
	}
}

/*DeleteIPSecConnectionDefault handles this case with default header values.

An error has occurred.
*/
type DeleteIPSecConnectionDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete IP sec connection default response
func (o *DeleteIPSecConnectionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteIPSecConnectionDefault) Error() string {
	return fmt.Sprintf("[DELETE /ipsecConnections/{ipscId}][%d] DeleteIPSecConnection default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteIPSecConnectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
