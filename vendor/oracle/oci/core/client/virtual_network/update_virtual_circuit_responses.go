package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdateVirtualCircuitReader is a Reader for the UpdateVirtualCircuit structure.
type UpdateVirtualCircuitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVirtualCircuitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateVirtualCircuitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateVirtualCircuitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateVirtualCircuitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateVirtualCircuitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateVirtualCircuitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateVirtualCircuitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateVirtualCircuitPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateVirtualCircuitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateVirtualCircuitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVirtualCircuitOK creates a UpdateVirtualCircuitOK with default headers values
func NewUpdateVirtualCircuitOK() *UpdateVirtualCircuitOK {
	return &UpdateVirtualCircuitOK{}
}

/*UpdateVirtualCircuitOK handles this case with default header values.

The virtual circuit was updated.
*/
type UpdateVirtualCircuitOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.VirtualCircuit
}

func (o *UpdateVirtualCircuitOK) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitOK  %+v", 200, o.Payload)
}

func (o *UpdateVirtualCircuitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.VirtualCircuit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitBadRequest creates a UpdateVirtualCircuitBadRequest with default headers values
func NewUpdateVirtualCircuitBadRequest() *UpdateVirtualCircuitBadRequest {
	return &UpdateVirtualCircuitBadRequest{}
}

/*UpdateVirtualCircuitBadRequest handles this case with default header values.

Bad Request
*/
type UpdateVirtualCircuitBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVirtualCircuitBadRequest) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVirtualCircuitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitUnauthorized creates a UpdateVirtualCircuitUnauthorized with default headers values
func NewUpdateVirtualCircuitUnauthorized() *UpdateVirtualCircuitUnauthorized {
	return &UpdateVirtualCircuitUnauthorized{}
}

/*UpdateVirtualCircuitUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateVirtualCircuitUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVirtualCircuitUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateVirtualCircuitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitForbidden creates a UpdateVirtualCircuitForbidden with default headers values
func NewUpdateVirtualCircuitForbidden() *UpdateVirtualCircuitForbidden {
	return &UpdateVirtualCircuitForbidden{}
}

/*UpdateVirtualCircuitForbidden handles this case with default header values.

Forbidden
*/
type UpdateVirtualCircuitForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVirtualCircuitForbidden) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitForbidden  %+v", 403, o.Payload)
}

func (o *UpdateVirtualCircuitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitNotFound creates a UpdateVirtualCircuitNotFound with default headers values
func NewUpdateVirtualCircuitNotFound() *UpdateVirtualCircuitNotFound {
	return &UpdateVirtualCircuitNotFound{}
}

/*UpdateVirtualCircuitNotFound handles this case with default header values.

Not Found
*/
type UpdateVirtualCircuitNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVirtualCircuitNotFound) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVirtualCircuitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitConflict creates a UpdateVirtualCircuitConflict with default headers values
func NewUpdateVirtualCircuitConflict() *UpdateVirtualCircuitConflict {
	return &UpdateVirtualCircuitConflict{}
}

/*UpdateVirtualCircuitConflict handles this case with default header values.

Conflict
*/
type UpdateVirtualCircuitConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVirtualCircuitConflict) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitConflict  %+v", 409, o.Payload)
}

func (o *UpdateVirtualCircuitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitPreconditionFailed creates a UpdateVirtualCircuitPreconditionFailed with default headers values
func NewUpdateVirtualCircuitPreconditionFailed() *UpdateVirtualCircuitPreconditionFailed {
	return &UpdateVirtualCircuitPreconditionFailed{}
}

/*UpdateVirtualCircuitPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateVirtualCircuitPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVirtualCircuitPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateVirtualCircuitPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitInternalServerError creates a UpdateVirtualCircuitInternalServerError with default headers values
func NewUpdateVirtualCircuitInternalServerError() *UpdateVirtualCircuitInternalServerError {
	return &UpdateVirtualCircuitInternalServerError{}
}

/*UpdateVirtualCircuitInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateVirtualCircuitInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateVirtualCircuitInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] updateVirtualCircuitInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVirtualCircuitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualCircuitDefault creates a UpdateVirtualCircuitDefault with default headers values
func NewUpdateVirtualCircuitDefault(code int) *UpdateVirtualCircuitDefault {
	return &UpdateVirtualCircuitDefault{
		_statusCode: code,
	}
}

/*UpdateVirtualCircuitDefault handles this case with default header values.

An error has occurred.
*/
type UpdateVirtualCircuitDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update virtual circuit default response
func (o *UpdateVirtualCircuitDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVirtualCircuitDefault) Error() string {
	return fmt.Sprintf("[PUT /virtualCircuits/{virtualCircuitId}][%d] UpdateVirtualCircuit default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateVirtualCircuitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
