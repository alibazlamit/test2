package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// NewUpdateSubnetParams creates a new UpdateSubnetParams object
// with the default values initialized.
func NewUpdateSubnetParams() *UpdateSubnetParams {
	var ()
	return &UpdateSubnetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSubnetParamsWithTimeout creates a new UpdateSubnetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSubnetParamsWithTimeout(timeout time.Duration) *UpdateSubnetParams {
	var ()
	return &UpdateSubnetParams{

		timeout: timeout,
	}
}

// NewUpdateSubnetParamsWithContext creates a new UpdateSubnetParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSubnetParamsWithContext(ctx context.Context) *UpdateSubnetParams {
	var ()
	return &UpdateSubnetParams{

		Context: ctx,
	}
}

// NewUpdateSubnetParamsWithHTTPClient creates a new UpdateSubnetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSubnetParamsWithHTTPClient(client *http.Client) *UpdateSubnetParams {
	var ()
	return &UpdateSubnetParams{
		HTTPClient: client,
	}
}

/*UpdateSubnetParams contains all the parameters to send to the API endpoint
for the update subnet operation typically these are written to a http.Request
*/
type UpdateSubnetParams struct {

	/*UpdateSubnetDetails
	  Details object for updating a subnet.

	*/
	UpdateSubnetDetails *models.UpdateSubnetDetails
	/*IfMatch
	  For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match`
	parameter to the value of the etag from a previous GET or POST response for that resource.  The resource
	will be updated or deleted only if the etag you provide matches the resource's current etag value.


	*/
	IfMatch *string
	/*SubnetID
	  The OCID of the subnet.

	*/
	SubnetID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update subnet params
func (o *UpdateSubnetParams) WithTimeout(timeout time.Duration) *UpdateSubnetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update subnet params
func (o *UpdateSubnetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update subnet params
func (o *UpdateSubnetParams) WithContext(ctx context.Context) *UpdateSubnetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update subnet params
func (o *UpdateSubnetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update subnet params
func (o *UpdateSubnetParams) WithHTTPClient(client *http.Client) *UpdateSubnetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update subnet params
func (o *UpdateSubnetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUpdateSubnetDetails adds the updateSubnetDetails to the update subnet params
func (o *UpdateSubnetParams) WithUpdateSubnetDetails(updateSubnetDetails *models.UpdateSubnetDetails) *UpdateSubnetParams {
	o.SetUpdateSubnetDetails(updateSubnetDetails)
	return o
}

// SetUpdateSubnetDetails adds the updateSubnetDetails to the update subnet params
func (o *UpdateSubnetParams) SetUpdateSubnetDetails(updateSubnetDetails *models.UpdateSubnetDetails) {
	o.UpdateSubnetDetails = updateSubnetDetails
}

// WithIfMatch adds the ifMatch to the update subnet params
func (o *UpdateSubnetParams) WithIfMatch(ifMatch *string) *UpdateSubnetParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the update subnet params
func (o *UpdateSubnetParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithSubnetID adds the subnetID to the update subnet params
func (o *UpdateSubnetParams) WithSubnetID(subnetID string) *UpdateSubnetParams {
	o.SetSubnetID(subnetID)
	return o
}

// SetSubnetID adds the subnetId to the update subnet params
func (o *UpdateSubnetParams) SetSubnetID(subnetID string) {
	o.SubnetID = subnetID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSubnetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UpdateSubnetDetails == nil {
		o.UpdateSubnetDetails = new(models.UpdateSubnetDetails)
	}

	if err := r.SetBodyParam(o.UpdateSubnetDetails); err != nil {
		return err
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}

	}

	// path param subnetId
	if err := r.SetPathParam("subnetId", o.SubnetID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
