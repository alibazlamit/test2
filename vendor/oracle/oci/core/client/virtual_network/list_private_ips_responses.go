package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// ListPrivateIpsReader is a Reader for the ListPrivateIps structure.
type ListPrivateIpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPrivateIpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListPrivateIpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListPrivateIpsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListPrivateIpsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListPrivateIpsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListPrivateIpsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListPrivateIpsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListPrivateIpsOK creates a ListPrivateIpsOK with default headers values
func NewListPrivateIpsOK() *ListPrivateIpsOK {
	return &ListPrivateIpsOK{}
}

/*ListPrivateIpsOK handles this case with default header values.

The list is being retrieved.
*/
type ListPrivateIpsOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.PrivateIP
}

func (o *ListPrivateIpsOK) Error() string {
	return fmt.Sprintf("[GET /privateIps][%d] listPrivateIpsOK  %+v", 200, o.Payload)
}

func (o *ListPrivateIpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrivateIpsBadRequest creates a ListPrivateIpsBadRequest with default headers values
func NewListPrivateIpsBadRequest() *ListPrivateIpsBadRequest {
	return &ListPrivateIpsBadRequest{}
}

/*ListPrivateIpsBadRequest handles this case with default header values.

Bad Request
*/
type ListPrivateIpsBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPrivateIpsBadRequest) Error() string {
	return fmt.Sprintf("[GET /privateIps][%d] listPrivateIpsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPrivateIpsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrivateIpsUnauthorized creates a ListPrivateIpsUnauthorized with default headers values
func NewListPrivateIpsUnauthorized() *ListPrivateIpsUnauthorized {
	return &ListPrivateIpsUnauthorized{}
}

/*ListPrivateIpsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListPrivateIpsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPrivateIpsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /privateIps][%d] listPrivateIpsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPrivateIpsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrivateIpsNotFound creates a ListPrivateIpsNotFound with default headers values
func NewListPrivateIpsNotFound() *ListPrivateIpsNotFound {
	return &ListPrivateIpsNotFound{}
}

/*ListPrivateIpsNotFound handles this case with default header values.

Not Found
*/
type ListPrivateIpsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPrivateIpsNotFound) Error() string {
	return fmt.Sprintf("[GET /privateIps][%d] listPrivateIpsNotFound  %+v", 404, o.Payload)
}

func (o *ListPrivateIpsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrivateIpsInternalServerError creates a ListPrivateIpsInternalServerError with default headers values
func NewListPrivateIpsInternalServerError() *ListPrivateIpsInternalServerError {
	return &ListPrivateIpsInternalServerError{}
}

/*ListPrivateIpsInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListPrivateIpsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPrivateIpsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /privateIps][%d] listPrivateIpsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPrivateIpsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrivateIpsDefault creates a ListPrivateIpsDefault with default headers values
func NewListPrivateIpsDefault(code int) *ListPrivateIpsDefault {
	return &ListPrivateIpsDefault{
		_statusCode: code,
	}
}

/*ListPrivateIpsDefault handles this case with default header values.

An error has occurred.
*/
type ListPrivateIpsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list private ips default response
func (o *ListPrivateIpsDefault) Code() int {
	return o._statusCode
}

func (o *ListPrivateIpsDefault) Error() string {
	return fmt.Sprintf("[GET /privateIps][%d] ListPrivateIps default  %+v", o._statusCode, o.Payload)
}

func (o *ListPrivateIpsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
