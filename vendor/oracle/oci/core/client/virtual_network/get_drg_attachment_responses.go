package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetDrgAttachmentReader is a Reader for the GetDrgAttachment structure.
type GetDrgAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDrgAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDrgAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetDrgAttachmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDrgAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetDrgAttachmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetDrgAttachmentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDrgAttachmentOK creates a GetDrgAttachmentOK with default headers values
func NewGetDrgAttachmentOK() *GetDrgAttachmentOK {
	return &GetDrgAttachmentOK{}
}

/*GetDrgAttachmentOK handles this case with default header values.

The `DrgAttachment` was retrieved.
*/
type GetDrgAttachmentOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.DrgAttachment
}

func (o *GetDrgAttachmentOK) Error() string {
	return fmt.Sprintf("[GET /drgAttachments/{drgAttachmentId}][%d] getDrgAttachmentOK  %+v", 200, o.Payload)
}

func (o *GetDrgAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.DrgAttachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgAttachmentUnauthorized creates a GetDrgAttachmentUnauthorized with default headers values
func NewGetDrgAttachmentUnauthorized() *GetDrgAttachmentUnauthorized {
	return &GetDrgAttachmentUnauthorized{}
}

/*GetDrgAttachmentUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDrgAttachmentUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetDrgAttachmentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /drgAttachments/{drgAttachmentId}][%d] getDrgAttachmentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDrgAttachmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgAttachmentNotFound creates a GetDrgAttachmentNotFound with default headers values
func NewGetDrgAttachmentNotFound() *GetDrgAttachmentNotFound {
	return &GetDrgAttachmentNotFound{}
}

/*GetDrgAttachmentNotFound handles this case with default header values.

Not Found
*/
type GetDrgAttachmentNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetDrgAttachmentNotFound) Error() string {
	return fmt.Sprintf("[GET /drgAttachments/{drgAttachmentId}][%d] getDrgAttachmentNotFound  %+v", 404, o.Payload)
}

func (o *GetDrgAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgAttachmentInternalServerError creates a GetDrgAttachmentInternalServerError with default headers values
func NewGetDrgAttachmentInternalServerError() *GetDrgAttachmentInternalServerError {
	return &GetDrgAttachmentInternalServerError{}
}

/*GetDrgAttachmentInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetDrgAttachmentInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetDrgAttachmentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /drgAttachments/{drgAttachmentId}][%d] getDrgAttachmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDrgAttachmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDrgAttachmentDefault creates a GetDrgAttachmentDefault with default headers values
func NewGetDrgAttachmentDefault(code int) *GetDrgAttachmentDefault {
	return &GetDrgAttachmentDefault{
		_statusCode: code,
	}
}

/*GetDrgAttachmentDefault handles this case with default header values.

An error has occurred.
*/
type GetDrgAttachmentDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get drg attachment default response
func (o *GetDrgAttachmentDefault) Code() int {
	return o._statusCode
}

func (o *GetDrgAttachmentDefault) Error() string {
	return fmt.Sprintf("[GET /drgAttachments/{drgAttachmentId}][%d] GetDrgAttachment default  %+v", o._statusCode, o.Payload)
}

func (o *GetDrgAttachmentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
