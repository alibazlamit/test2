package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// UpdateInternetGatewayReader is a Reader for the UpdateInternetGateway structure.
type UpdateInternetGatewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInternetGatewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateInternetGatewayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateInternetGatewayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateInternetGatewayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateInternetGatewayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateInternetGatewayConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateInternetGatewayPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateInternetGatewayInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateInternetGatewayDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateInternetGatewayOK creates a UpdateInternetGatewayOK with default headers values
func NewUpdateInternetGatewayOK() *UpdateInternetGatewayOK {
	return &UpdateInternetGatewayOK{}
}

/*UpdateInternetGatewayOK handles this case with default header values.

The Internet Gateway was updated.
*/
type UpdateInternetGatewayOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.InternetGateway
}

func (o *UpdateInternetGatewayOK) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] updateInternetGatewayOK  %+v", 200, o.Payload)
}

func (o *UpdateInternetGatewayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.InternetGateway)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternetGatewayBadRequest creates a UpdateInternetGatewayBadRequest with default headers values
func NewUpdateInternetGatewayBadRequest() *UpdateInternetGatewayBadRequest {
	return &UpdateInternetGatewayBadRequest{}
}

/*UpdateInternetGatewayBadRequest handles this case with default header values.

Bad Request
*/
type UpdateInternetGatewayBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateInternetGatewayBadRequest) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] updateInternetGatewayBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInternetGatewayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternetGatewayUnauthorized creates a UpdateInternetGatewayUnauthorized with default headers values
func NewUpdateInternetGatewayUnauthorized() *UpdateInternetGatewayUnauthorized {
	return &UpdateInternetGatewayUnauthorized{}
}

/*UpdateInternetGatewayUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateInternetGatewayUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateInternetGatewayUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] updateInternetGatewayUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInternetGatewayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternetGatewayNotFound creates a UpdateInternetGatewayNotFound with default headers values
func NewUpdateInternetGatewayNotFound() *UpdateInternetGatewayNotFound {
	return &UpdateInternetGatewayNotFound{}
}

/*UpdateInternetGatewayNotFound handles this case with default header values.

Not Found
*/
type UpdateInternetGatewayNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateInternetGatewayNotFound) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] updateInternetGatewayNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInternetGatewayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternetGatewayConflict creates a UpdateInternetGatewayConflict with default headers values
func NewUpdateInternetGatewayConflict() *UpdateInternetGatewayConflict {
	return &UpdateInternetGatewayConflict{}
}

/*UpdateInternetGatewayConflict handles this case with default header values.

Conflict
*/
type UpdateInternetGatewayConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateInternetGatewayConflict) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] updateInternetGatewayConflict  %+v", 409, o.Payload)
}

func (o *UpdateInternetGatewayConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternetGatewayPreconditionFailed creates a UpdateInternetGatewayPreconditionFailed with default headers values
func NewUpdateInternetGatewayPreconditionFailed() *UpdateInternetGatewayPreconditionFailed {
	return &UpdateInternetGatewayPreconditionFailed{}
}

/*UpdateInternetGatewayPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateInternetGatewayPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateInternetGatewayPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] updateInternetGatewayPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateInternetGatewayPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternetGatewayInternalServerError creates a UpdateInternetGatewayInternalServerError with default headers values
func NewUpdateInternetGatewayInternalServerError() *UpdateInternetGatewayInternalServerError {
	return &UpdateInternetGatewayInternalServerError{}
}

/*UpdateInternetGatewayInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateInternetGatewayInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateInternetGatewayInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] updateInternetGatewayInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInternetGatewayInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternetGatewayDefault creates a UpdateInternetGatewayDefault with default headers values
func NewUpdateInternetGatewayDefault(code int) *UpdateInternetGatewayDefault {
	return &UpdateInternetGatewayDefault{
		_statusCode: code,
	}
}

/*UpdateInternetGatewayDefault handles this case with default header values.

An error has occurred.
*/
type UpdateInternetGatewayDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update internet gateway default response
func (o *UpdateInternetGatewayDefault) Code() int {
	return o._statusCode
}

func (o *UpdateInternetGatewayDefault) Error() string {
	return fmt.Sprintf("[PUT /internetGateways/{igId}][%d] UpdateInternetGateway default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateInternetGatewayDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
