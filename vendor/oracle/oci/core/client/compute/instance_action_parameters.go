package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewInstanceActionParams creates a new InstanceActionParams object
// with the default values initialized.
func NewInstanceActionParams() *InstanceActionParams {
	var ()
	return &InstanceActionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInstanceActionParamsWithTimeout creates a new InstanceActionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInstanceActionParamsWithTimeout(timeout time.Duration) *InstanceActionParams {
	var ()
	return &InstanceActionParams{

		timeout: timeout,
	}
}

// NewInstanceActionParamsWithContext creates a new InstanceActionParams object
// with the default values initialized, and the ability to set a context for a request
func NewInstanceActionParamsWithContext(ctx context.Context) *InstanceActionParams {
	var ()
	return &InstanceActionParams{

		Context: ctx,
	}
}

// NewInstanceActionParamsWithHTTPClient creates a new InstanceActionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInstanceActionParamsWithHTTPClient(client *http.Client) *InstanceActionParams {
	var ()
	return &InstanceActionParams{
		HTTPClient: client,
	}
}

/*InstanceActionParams contains all the parameters to send to the API endpoint
for the instance action operation typically these are written to a http.Request
*/
type InstanceActionParams struct {

	/*Action
	  The action to perform on the instance.

	*/
	Action string
	/*IfMatch
	  For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match`
	parameter to the value of the etag from a previous GET or POST response for that resource.  The resource
	will be updated or deleted only if the etag you provide matches the resource's current etag value.


	*/
	IfMatch *string
	/*InstanceID
	  The OCID of the instance.

	*/
	InstanceID string
	/*OpcRetryToken
	  A token that uniquely identifies a request so it can be retried in case of a timeout or
	server error without risk of executing that same action again. Retry tokens expire after 24
	hours, but can be invalidated before then due to conflicting operations (e.g., if a resource
	has been deleted and purged from the system, then a retry of the original creation request
	may be rejected).


	*/
	OpcRetryToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the instance action params
func (o *InstanceActionParams) WithTimeout(timeout time.Duration) *InstanceActionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the instance action params
func (o *InstanceActionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the instance action params
func (o *InstanceActionParams) WithContext(ctx context.Context) *InstanceActionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the instance action params
func (o *InstanceActionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the instance action params
func (o *InstanceActionParams) WithHTTPClient(client *http.Client) *InstanceActionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the instance action params
func (o *InstanceActionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the instance action params
func (o *InstanceActionParams) WithAction(action string) *InstanceActionParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the instance action params
func (o *InstanceActionParams) SetAction(action string) {
	o.Action = action
}

// WithIfMatch adds the ifMatch to the instance action params
func (o *InstanceActionParams) WithIfMatch(ifMatch *string) *InstanceActionParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the instance action params
func (o *InstanceActionParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithInstanceID adds the instanceID to the instance action params
func (o *InstanceActionParams) WithInstanceID(instanceID string) *InstanceActionParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the instance action params
func (o *InstanceActionParams) SetInstanceID(instanceID string) {
	o.InstanceID = instanceID
}

// WithOpcRetryToken adds the opcRetryToken to the instance action params
func (o *InstanceActionParams) WithOpcRetryToken(opcRetryToken *string) *InstanceActionParams {
	o.SetOpcRetryToken(opcRetryToken)
	return o
}

// SetOpcRetryToken adds the opcRetryToken to the instance action params
func (o *InstanceActionParams) SetOpcRetryToken(opcRetryToken *string) {
	o.OpcRetryToken = opcRetryToken
}

// WriteToRequest writes these params to a swagger request
func (o *InstanceActionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param action
	qrAction := o.Action
	qAction := qrAction
	if qAction != "" {
		if err := r.SetQueryParam("action", qAction); err != nil {
			return err
		}
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}

	}

	// path param instanceId
	if err := r.SetPathParam("instanceId", o.InstanceID); err != nil {
		return err
	}

	if o.OpcRetryToken != nil {

		// header param opc-retry-token
		if err := r.SetHeaderParam("opc-retry-token", *o.OpcRetryToken); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
