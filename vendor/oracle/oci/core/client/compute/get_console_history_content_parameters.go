package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetConsoleHistoryContentParams creates a new GetConsoleHistoryContentParams object
// with the default values initialized.
func NewGetConsoleHistoryContentParams() *GetConsoleHistoryContentParams {
	var ()
	return &GetConsoleHistoryContentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConsoleHistoryContentParamsWithTimeout creates a new GetConsoleHistoryContentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConsoleHistoryContentParamsWithTimeout(timeout time.Duration) *GetConsoleHistoryContentParams {
	var ()
	return &GetConsoleHistoryContentParams{

		timeout: timeout,
	}
}

// NewGetConsoleHistoryContentParamsWithContext creates a new GetConsoleHistoryContentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConsoleHistoryContentParamsWithContext(ctx context.Context) *GetConsoleHistoryContentParams {
	var ()
	return &GetConsoleHistoryContentParams{

		Context: ctx,
	}
}

// NewGetConsoleHistoryContentParamsWithHTTPClient creates a new GetConsoleHistoryContentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConsoleHistoryContentParamsWithHTTPClient(client *http.Client) *GetConsoleHistoryContentParams {
	var ()
	return &GetConsoleHistoryContentParams{
		HTTPClient: client,
	}
}

/*GetConsoleHistoryContentParams contains all the parameters to send to the API endpoint
for the get console history content operation typically these are written to a http.Request
*/
type GetConsoleHistoryContentParams struct {

	/*InstanceConsoleHistoryID
	  The OCID of the console history.

	*/
	InstanceConsoleHistoryID string
	/*Length
	  Length of the snapshot data to retrieve.

	*/
	Length *int32
	/*Offset
	  Offset of the snapshot data to retrieve.

	*/
	Offset *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get console history content params
func (o *GetConsoleHistoryContentParams) WithTimeout(timeout time.Duration) *GetConsoleHistoryContentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get console history content params
func (o *GetConsoleHistoryContentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get console history content params
func (o *GetConsoleHistoryContentParams) WithContext(ctx context.Context) *GetConsoleHistoryContentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get console history content params
func (o *GetConsoleHistoryContentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get console history content params
func (o *GetConsoleHistoryContentParams) WithHTTPClient(client *http.Client) *GetConsoleHistoryContentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get console history content params
func (o *GetConsoleHistoryContentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInstanceConsoleHistoryID adds the instanceConsoleHistoryID to the get console history content params
func (o *GetConsoleHistoryContentParams) WithInstanceConsoleHistoryID(instanceConsoleHistoryID string) *GetConsoleHistoryContentParams {
	o.SetInstanceConsoleHistoryID(instanceConsoleHistoryID)
	return o
}

// SetInstanceConsoleHistoryID adds the instanceConsoleHistoryId to the get console history content params
func (o *GetConsoleHistoryContentParams) SetInstanceConsoleHistoryID(instanceConsoleHistoryID string) {
	o.InstanceConsoleHistoryID = instanceConsoleHistoryID
}

// WithLength adds the length to the get console history content params
func (o *GetConsoleHistoryContentParams) WithLength(length *int32) *GetConsoleHistoryContentParams {
	o.SetLength(length)
	return o
}

// SetLength adds the length to the get console history content params
func (o *GetConsoleHistoryContentParams) SetLength(length *int32) {
	o.Length = length
}

// WithOffset adds the offset to the get console history content params
func (o *GetConsoleHistoryContentParams) WithOffset(offset *int32) *GetConsoleHistoryContentParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get console history content params
func (o *GetConsoleHistoryContentParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *GetConsoleHistoryContentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param instanceConsoleHistoryId
	if err := r.SetPathParam("instanceConsoleHistoryId", o.InstanceConsoleHistoryID); err != nil {
		return err
	}

	if o.Length != nil {

		// query param length
		var qrLength int32
		if o.Length != nil {
			qrLength = *o.Length
		}
		qLength := swag.FormatInt32(qrLength)
		if qLength != "" {
			if err := r.SetQueryParam("length", qLength); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
