package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DeleteConsoleHistoryReader is a Reader for the DeleteConsoleHistory structure.
type DeleteConsoleHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteConsoleHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteConsoleHistoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteConsoleHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteConsoleHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteConsoleHistoryPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteConsoleHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteConsoleHistoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteConsoleHistoryNoContent creates a DeleteConsoleHistoryNoContent with default headers values
func NewDeleteConsoleHistoryNoContent() *DeleteConsoleHistoryNoContent {
	return &DeleteConsoleHistoryNoContent{}
}

/*DeleteConsoleHistoryNoContent handles this case with default header values.

The information is being deleted.
*/
type DeleteConsoleHistoryNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteConsoleHistoryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] deleteConsoleHistoryNoContent ", 204)
}

func (o *DeleteConsoleHistoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteConsoleHistoryUnauthorized creates a DeleteConsoleHistoryUnauthorized with default headers values
func NewDeleteConsoleHistoryUnauthorized() *DeleteConsoleHistoryUnauthorized {
	return &DeleteConsoleHistoryUnauthorized{}
}

/*DeleteConsoleHistoryUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteConsoleHistoryUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteConsoleHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] deleteConsoleHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteConsoleHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConsoleHistoryNotFound creates a DeleteConsoleHistoryNotFound with default headers values
func NewDeleteConsoleHistoryNotFound() *DeleteConsoleHistoryNotFound {
	return &DeleteConsoleHistoryNotFound{}
}

/*DeleteConsoleHistoryNotFound handles this case with default header values.

Not Found
*/
type DeleteConsoleHistoryNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteConsoleHistoryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] deleteConsoleHistoryNotFound  %+v", 404, o.Payload)
}

func (o *DeleteConsoleHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConsoleHistoryPreconditionFailed creates a DeleteConsoleHistoryPreconditionFailed with default headers values
func NewDeleteConsoleHistoryPreconditionFailed() *DeleteConsoleHistoryPreconditionFailed {
	return &DeleteConsoleHistoryPreconditionFailed{}
}

/*DeleteConsoleHistoryPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteConsoleHistoryPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteConsoleHistoryPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] deleteConsoleHistoryPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteConsoleHistoryPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConsoleHistoryInternalServerError creates a DeleteConsoleHistoryInternalServerError with default headers values
func NewDeleteConsoleHistoryInternalServerError() *DeleteConsoleHistoryInternalServerError {
	return &DeleteConsoleHistoryInternalServerError{}
}

/*DeleteConsoleHistoryInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteConsoleHistoryInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteConsoleHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] deleteConsoleHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteConsoleHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConsoleHistoryDefault creates a DeleteConsoleHistoryDefault with default headers values
func NewDeleteConsoleHistoryDefault(code int) *DeleteConsoleHistoryDefault {
	return &DeleteConsoleHistoryDefault{
		_statusCode: code,
	}
}

/*DeleteConsoleHistoryDefault handles this case with default header values.

An error has occurred.
*/
type DeleteConsoleHistoryDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete console history default response
func (o *DeleteConsoleHistoryDefault) Code() int {
	return o._statusCode
}

func (o *DeleteConsoleHistoryDefault) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] DeleteConsoleHistory default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteConsoleHistoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
