package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// NewCaptureConsoleHistoryParams creates a new CaptureConsoleHistoryParams object
// with the default values initialized.
func NewCaptureConsoleHistoryParams() *CaptureConsoleHistoryParams {
	var ()
	return &CaptureConsoleHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCaptureConsoleHistoryParamsWithTimeout creates a new CaptureConsoleHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCaptureConsoleHistoryParamsWithTimeout(timeout time.Duration) *CaptureConsoleHistoryParams {
	var ()
	return &CaptureConsoleHistoryParams{

		timeout: timeout,
	}
}

// NewCaptureConsoleHistoryParamsWithContext creates a new CaptureConsoleHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewCaptureConsoleHistoryParamsWithContext(ctx context.Context) *CaptureConsoleHistoryParams {
	var ()
	return &CaptureConsoleHistoryParams{

		Context: ctx,
	}
}

// NewCaptureConsoleHistoryParamsWithHTTPClient creates a new CaptureConsoleHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCaptureConsoleHistoryParamsWithHTTPClient(client *http.Client) *CaptureConsoleHistoryParams {
	var ()
	return &CaptureConsoleHistoryParams{
		HTTPClient: client,
	}
}

/*CaptureConsoleHistoryParams contains all the parameters to send to the API endpoint
for the capture console history operation typically these are written to a http.Request
*/
type CaptureConsoleHistoryParams struct {

	/*CaptureConsoleHistoryDetails
	  Console history details

	*/
	CaptureConsoleHistoryDetails *models.CaptureConsoleHistoryDetails
	/*OpcRetryToken
	  A token that uniquely identifies a request so it can be retried in case of a timeout or
	server error without risk of executing that same action again. Retry tokens expire after 24
	hours, but can be invalidated before then due to conflicting operations (e.g., if a resource
	has been deleted and purged from the system, then a retry of the original creation request
	may be rejected).


	*/
	OpcRetryToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the capture console history params
func (o *CaptureConsoleHistoryParams) WithTimeout(timeout time.Duration) *CaptureConsoleHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the capture console history params
func (o *CaptureConsoleHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the capture console history params
func (o *CaptureConsoleHistoryParams) WithContext(ctx context.Context) *CaptureConsoleHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the capture console history params
func (o *CaptureConsoleHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the capture console history params
func (o *CaptureConsoleHistoryParams) WithHTTPClient(client *http.Client) *CaptureConsoleHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the capture console history params
func (o *CaptureConsoleHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCaptureConsoleHistoryDetails adds the captureConsoleHistoryDetails to the capture console history params
func (o *CaptureConsoleHistoryParams) WithCaptureConsoleHistoryDetails(captureConsoleHistoryDetails *models.CaptureConsoleHistoryDetails) *CaptureConsoleHistoryParams {
	o.SetCaptureConsoleHistoryDetails(captureConsoleHistoryDetails)
	return o
}

// SetCaptureConsoleHistoryDetails adds the captureConsoleHistoryDetails to the capture console history params
func (o *CaptureConsoleHistoryParams) SetCaptureConsoleHistoryDetails(captureConsoleHistoryDetails *models.CaptureConsoleHistoryDetails) {
	o.CaptureConsoleHistoryDetails = captureConsoleHistoryDetails
}

// WithOpcRetryToken adds the opcRetryToken to the capture console history params
func (o *CaptureConsoleHistoryParams) WithOpcRetryToken(opcRetryToken *string) *CaptureConsoleHistoryParams {
	o.SetOpcRetryToken(opcRetryToken)
	return o
}

// SetOpcRetryToken adds the opcRetryToken to the capture console history params
func (o *CaptureConsoleHistoryParams) SetOpcRetryToken(opcRetryToken *string) {
	o.OpcRetryToken = opcRetryToken
}

// WriteToRequest writes these params to a swagger request
func (o *CaptureConsoleHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CaptureConsoleHistoryDetails == nil {
		o.CaptureConsoleHistoryDetails = new(models.CaptureConsoleHistoryDetails)
	}

	if err := r.SetBodyParam(o.CaptureConsoleHistoryDetails); err != nil {
		return err
	}

	if o.OpcRetryToken != nil {

		// header param opc-retry-token
		if err := r.SetHeaderParam("opc-retry-token", *o.OpcRetryToken); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
