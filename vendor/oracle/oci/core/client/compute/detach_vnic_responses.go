package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DetachVnicReader is a Reader for the DetachVnic structure.
type DetachVnicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetachVnicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDetachVnicNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDetachVnicBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDetachVnicUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDetachVnicNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDetachVnicPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDetachVnicInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDetachVnicDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDetachVnicNoContent creates a DetachVnicNoContent with default headers values
func NewDetachVnicNoContent() *DetachVnicNoContent {
	return &DetachVnicNoContent{}
}

/*DetachVnicNoContent handles this case with default header values.

The VNIC is being detached.
*/
type DetachVnicNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DetachVnicNoContent) Error() string {
	return fmt.Sprintf("[DELETE /vnicAttachments/{vnicAttachmentId}][%d] detachVnicNoContent ", 204)
}

func (o *DetachVnicNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDetachVnicBadRequest creates a DetachVnicBadRequest with default headers values
func NewDetachVnicBadRequest() *DetachVnicBadRequest {
	return &DetachVnicBadRequest{}
}

/*DetachVnicBadRequest handles this case with default header values.

Bad Request
*/
type DetachVnicBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVnicBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /vnicAttachments/{vnicAttachmentId}][%d] detachVnicBadRequest  %+v", 400, o.Payload)
}

func (o *DetachVnicBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVnicUnauthorized creates a DetachVnicUnauthorized with default headers values
func NewDetachVnicUnauthorized() *DetachVnicUnauthorized {
	return &DetachVnicUnauthorized{}
}

/*DetachVnicUnauthorized handles this case with default header values.

Unauthorized
*/
type DetachVnicUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVnicUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /vnicAttachments/{vnicAttachmentId}][%d] detachVnicUnauthorized  %+v", 401, o.Payload)
}

func (o *DetachVnicUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVnicNotFound creates a DetachVnicNotFound with default headers values
func NewDetachVnicNotFound() *DetachVnicNotFound {
	return &DetachVnicNotFound{}
}

/*DetachVnicNotFound handles this case with default header values.

Not Found
*/
type DetachVnicNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVnicNotFound) Error() string {
	return fmt.Sprintf("[DELETE /vnicAttachments/{vnicAttachmentId}][%d] detachVnicNotFound  %+v", 404, o.Payload)
}

func (o *DetachVnicNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVnicPreconditionFailed creates a DetachVnicPreconditionFailed with default headers values
func NewDetachVnicPreconditionFailed() *DetachVnicPreconditionFailed {
	return &DetachVnicPreconditionFailed{}
}

/*DetachVnicPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DetachVnicPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVnicPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /vnicAttachments/{vnicAttachmentId}][%d] detachVnicPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DetachVnicPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVnicInternalServerError creates a DetachVnicInternalServerError with default headers values
func NewDetachVnicInternalServerError() *DetachVnicInternalServerError {
	return &DetachVnicInternalServerError{}
}

/*DetachVnicInternalServerError handles this case with default header values.

Internal Server Error
*/
type DetachVnicInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVnicInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /vnicAttachments/{vnicAttachmentId}][%d] detachVnicInternalServerError  %+v", 500, o.Payload)
}

func (o *DetachVnicInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVnicDefault creates a DetachVnicDefault with default headers values
func NewDetachVnicDefault(code int) *DetachVnicDefault {
	return &DetachVnicDefault{
		_statusCode: code,
	}
}

/*DetachVnicDefault handles this case with default header values.

An error has occurred.
*/
type DetachVnicDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the detach vnic default response
func (o *DetachVnicDefault) Code() int {
	return o._statusCode
}

func (o *DetachVnicDefault) Error() string {
	return fmt.Sprintf("[DELETE /vnicAttachments/{vnicAttachmentId}][%d] DetachVnic default  %+v", o._statusCode, o.Payload)
}

func (o *DetachVnicDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
