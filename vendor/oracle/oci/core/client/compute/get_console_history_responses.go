package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetConsoleHistoryReader is a Reader for the GetConsoleHistory structure.
type GetConsoleHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConsoleHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetConsoleHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetConsoleHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetConsoleHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetConsoleHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetConsoleHistoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetConsoleHistoryOK creates a GetConsoleHistoryOK with default headers values
func NewGetConsoleHistoryOK() *GetConsoleHistoryOK {
	return &GetConsoleHistoryOK{}
}

/*GetConsoleHistoryOK handles this case with default header values.

Console history metadata
*/
type GetConsoleHistoryOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.ConsoleHistory
}

func (o *GetConsoleHistoryOK) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] getConsoleHistoryOK  %+v", 200, o.Payload)
}

func (o *GetConsoleHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.ConsoleHistory)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsoleHistoryUnauthorized creates a GetConsoleHistoryUnauthorized with default headers values
func NewGetConsoleHistoryUnauthorized() *GetConsoleHistoryUnauthorized {
	return &GetConsoleHistoryUnauthorized{}
}

/*GetConsoleHistoryUnauthorized handles this case with default header values.

Unauthorized
*/
type GetConsoleHistoryUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetConsoleHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] getConsoleHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConsoleHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsoleHistoryNotFound creates a GetConsoleHistoryNotFound with default headers values
func NewGetConsoleHistoryNotFound() *GetConsoleHistoryNotFound {
	return &GetConsoleHistoryNotFound{}
}

/*GetConsoleHistoryNotFound handles this case with default header values.

Not Found
*/
type GetConsoleHistoryNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetConsoleHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] getConsoleHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetConsoleHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsoleHistoryInternalServerError creates a GetConsoleHistoryInternalServerError with default headers values
func NewGetConsoleHistoryInternalServerError() *GetConsoleHistoryInternalServerError {
	return &GetConsoleHistoryInternalServerError{}
}

/*GetConsoleHistoryInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetConsoleHistoryInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetConsoleHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] getConsoleHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConsoleHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsoleHistoryDefault creates a GetConsoleHistoryDefault with default headers values
func NewGetConsoleHistoryDefault(code int) *GetConsoleHistoryDefault {
	return &GetConsoleHistoryDefault{
		_statusCode: code,
	}
}

/*GetConsoleHistoryDefault handles this case with default header values.

An error has occurred.
*/
type GetConsoleHistoryDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get console history default response
func (o *GetConsoleHistoryDefault) Code() int {
	return o._statusCode
}

func (o *GetConsoleHistoryDefault) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/{instanceConsoleHistoryId}][%d] GetConsoleHistory default  %+v", o._statusCode, o.Payload)
}

func (o *GetConsoleHistoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
