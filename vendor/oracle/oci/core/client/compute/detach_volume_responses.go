package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DetachVolumeReader is a Reader for the DetachVolume structure.
type DetachVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetachVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDetachVolumeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDetachVolumeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDetachVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDetachVolumeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDetachVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDetachVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDetachVolumeNoContent creates a DetachVolumeNoContent with default headers values
func NewDetachVolumeNoContent() *DetachVolumeNoContent {
	return &DetachVolumeNoContent{}
}

/*DetachVolumeNoContent handles this case with default header values.

The request was accepted by the server
*/
type DetachVolumeNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DetachVolumeNoContent) Error() string {
	return fmt.Sprintf("[DELETE /volumeAttachments/{volumeAttachmentId}][%d] detachVolumeNoContent ", 204)
}

func (o *DetachVolumeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDetachVolumeUnauthorized creates a DetachVolumeUnauthorized with default headers values
func NewDetachVolumeUnauthorized() *DetachVolumeUnauthorized {
	return &DetachVolumeUnauthorized{}
}

/*DetachVolumeUnauthorized handles this case with default header values.

Unauthorized
*/
type DetachVolumeUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVolumeUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /volumeAttachments/{volumeAttachmentId}][%d] detachVolumeUnauthorized  %+v", 401, o.Payload)
}

func (o *DetachVolumeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVolumeNotFound creates a DetachVolumeNotFound with default headers values
func NewDetachVolumeNotFound() *DetachVolumeNotFound {
	return &DetachVolumeNotFound{}
}

/*DetachVolumeNotFound handles this case with default header values.

Not Found
*/
type DetachVolumeNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVolumeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /volumeAttachments/{volumeAttachmentId}][%d] detachVolumeNotFound  %+v", 404, o.Payload)
}

func (o *DetachVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVolumeConflict creates a DetachVolumeConflict with default headers values
func NewDetachVolumeConflict() *DetachVolumeConflict {
	return &DetachVolumeConflict{}
}

/*DetachVolumeConflict handles this case with default header values.

Conflict
*/
type DetachVolumeConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVolumeConflict) Error() string {
	return fmt.Sprintf("[DELETE /volumeAttachments/{volumeAttachmentId}][%d] detachVolumeConflict  %+v", 409, o.Payload)
}

func (o *DetachVolumeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVolumeInternalServerError creates a DetachVolumeInternalServerError with default headers values
func NewDetachVolumeInternalServerError() *DetachVolumeInternalServerError {
	return &DetachVolumeInternalServerError{}
}

/*DetachVolumeInternalServerError handles this case with default header values.

Internal Server Error
*/
type DetachVolumeInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DetachVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /volumeAttachments/{volumeAttachmentId}][%d] detachVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *DetachVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachVolumeDefault creates a DetachVolumeDefault with default headers values
func NewDetachVolumeDefault(code int) *DetachVolumeDefault {
	return &DetachVolumeDefault{
		_statusCode: code,
	}
}

/*DetachVolumeDefault handles this case with default header values.

An error has occurred.
*/
type DetachVolumeDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the detach volume default response
func (o *DetachVolumeDefault) Code() int {
	return o._statusCode
}

func (o *DetachVolumeDefault) Error() string {
	return fmt.Sprintf("[DELETE /volumeAttachments/{volumeAttachmentId}][%d] DetachVolume default  %+v", o._statusCode, o.Payload)
}

func (o *DetachVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
