package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// DeleteImageReader is a Reader for the DeleteImage structure.
type DeleteImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteImageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteImagePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteImageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteImageNoContent creates a DeleteImageNoContent with default headers values
func NewDeleteImageNoContent() *DeleteImageNoContent {
	return &DeleteImageNoContent{}
}

/*DeleteImageNoContent handles this case with default header values.

The image is being deleted.
*/
type DeleteImageNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteImageNoContent) Error() string {
	return fmt.Sprintf("[DELETE /images/{imageId}][%d] deleteImageNoContent ", 204)
}

func (o *DeleteImageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteImageUnauthorized creates a DeleteImageUnauthorized with default headers values
func NewDeleteImageUnauthorized() *DeleteImageUnauthorized {
	return &DeleteImageUnauthorized{}
}

/*DeleteImageUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteImageUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteImageUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /images/{imageId}][%d] deleteImageUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteImageNotFound creates a DeleteImageNotFound with default headers values
func NewDeleteImageNotFound() *DeleteImageNotFound {
	return &DeleteImageNotFound{}
}

/*DeleteImageNotFound handles this case with default header values.

Not Found
*/
type DeleteImageNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteImageNotFound) Error() string {
	return fmt.Sprintf("[DELETE /images/{imageId}][%d] deleteImageNotFound  %+v", 404, o.Payload)
}

func (o *DeleteImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteImagePreconditionFailed creates a DeleteImagePreconditionFailed with default headers values
func NewDeleteImagePreconditionFailed() *DeleteImagePreconditionFailed {
	return &DeleteImagePreconditionFailed{}
}

/*DeleteImagePreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteImagePreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteImagePreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /images/{imageId}][%d] deleteImagePreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteImagePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteImageInternalServerError creates a DeleteImageInternalServerError with default headers values
func NewDeleteImageInternalServerError() *DeleteImageInternalServerError {
	return &DeleteImageInternalServerError{}
}

/*DeleteImageInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteImageInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteImageInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /images/{imageId}][%d] deleteImageInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteImageDefault creates a DeleteImageDefault with default headers values
func NewDeleteImageDefault(code int) *DeleteImageDefault {
	return &DeleteImageDefault{
		_statusCode: code,
	}
}

/*DeleteImageDefault handles this case with default header values.

An error has occurred.
*/
type DeleteImageDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete image default response
func (o *DeleteImageDefault) Code() int {
	return o._statusCode
}

func (o *DeleteImageDefault) Error() string {
	return fmt.Sprintf("[DELETE /images/{imageId}][%d] DeleteImage default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteImageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
