package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// NewExportImageParams creates a new ExportImageParams object
// with the default values initialized.
func NewExportImageParams() *ExportImageParams {
	var ()
	return &ExportImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewExportImageParamsWithTimeout creates a new ExportImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExportImageParamsWithTimeout(timeout time.Duration) *ExportImageParams {
	var ()
	return &ExportImageParams{

		timeout: timeout,
	}
}

// NewExportImageParamsWithContext creates a new ExportImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewExportImageParamsWithContext(ctx context.Context) *ExportImageParams {
	var ()
	return &ExportImageParams{

		Context: ctx,
	}
}

// NewExportImageParamsWithHTTPClient creates a new ExportImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExportImageParamsWithHTTPClient(client *http.Client) *ExportImageParams {
	var ()
	return &ExportImageParams{
		HTTPClient: client,
	}
}

/*ExportImageParams contains all the parameters to send to the API endpoint
for the export image operation typically these are written to a http.Request
*/
type ExportImageParams struct {

	/*ExportImageDetails
	  Details for the image export.

	*/
	ExportImageDetails models.ExportImageDetails
	/*IfMatch
	  For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match`
	parameter to the value of the etag from a previous GET or POST response for that resource.  The resource
	will be updated or deleted only if the etag you provide matches the resource's current etag value.


	*/
	IfMatch *string
	/*ImageID
	  The OCID of the image.

	*/
	ImageID string
	/*OpcRetryToken
	  A token that uniquely identifies a request so it can be retried in case of a timeout or
	server error without risk of executing that same action again. Retry tokens expire after 24
	hours, but can be invalidated before then due to conflicting operations (e.g., if a resource
	has been deleted and purged from the system, then a retry of the original creation request
	may be rejected).


	*/
	OpcRetryToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the export image params
func (o *ExportImageParams) WithTimeout(timeout time.Duration) *ExportImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export image params
func (o *ExportImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export image params
func (o *ExportImageParams) WithContext(ctx context.Context) *ExportImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export image params
func (o *ExportImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export image params
func (o *ExportImageParams) WithHTTPClient(client *http.Client) *ExportImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export image params
func (o *ExportImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExportImageDetails adds the exportImageDetails to the export image params
func (o *ExportImageParams) WithExportImageDetails(exportImageDetails models.ExportImageDetails) *ExportImageParams {
	o.SetExportImageDetails(exportImageDetails)
	return o
}

// SetExportImageDetails adds the exportImageDetails to the export image params
func (o *ExportImageParams) SetExportImageDetails(exportImageDetails models.ExportImageDetails) {
	o.ExportImageDetails = exportImageDetails
}

// WithIfMatch adds the ifMatch to the export image params
func (o *ExportImageParams) WithIfMatch(ifMatch *string) *ExportImageParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the export image params
func (o *ExportImageParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithImageID adds the imageID to the export image params
func (o *ExportImageParams) WithImageID(imageID string) *ExportImageParams {
	o.SetImageID(imageID)
	return o
}

// SetImageID adds the imageId to the export image params
func (o *ExportImageParams) SetImageID(imageID string) {
	o.ImageID = imageID
}

// WithOpcRetryToken adds the opcRetryToken to the export image params
func (o *ExportImageParams) WithOpcRetryToken(opcRetryToken *string) *ExportImageParams {
	o.SetOpcRetryToken(opcRetryToken)
	return o
}

// SetOpcRetryToken adds the opcRetryToken to the export image params
func (o *ExportImageParams) SetOpcRetryToken(opcRetryToken *string) {
	o.OpcRetryToken = opcRetryToken
}

// WriteToRequest writes these params to a swagger request
func (o *ExportImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.ExportImageDetails); err != nil {
		return err
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}

	}

	// path param imageId
	if err := r.SetPathParam("imageId", o.ImageID); err != nil {
		return err
	}

	if o.OpcRetryToken != nil {

		// header param opc-retry-token
		if err := r.SetHeaderParam("opc-retry-token", *o.OpcRetryToken); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
