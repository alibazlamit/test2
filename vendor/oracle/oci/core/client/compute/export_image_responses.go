package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// ExportImageReader is a Reader for the ExportImage structure.
type ExportImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExportImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewExportImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewExportImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewExportImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewExportImageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewExportImagePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewExportImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewExportImageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExportImageOK creates a ExportImageOK with default headers values
func NewExportImageOK() *ExportImageOK {
	return &ExportImageOK{}
}

/*ExportImageOK handles this case with default header values.

The export is being performed.
*/
type ExportImageOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Image
}

func (o *ExportImageOK) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] exportImageOK  %+v", 200, o.Payload)
}

func (o *ExportImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Image)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImageBadRequest creates a ExportImageBadRequest with default headers values
func NewExportImageBadRequest() *ExportImageBadRequest {
	return &ExportImageBadRequest{}
}

/*ExportImageBadRequest handles this case with default header values.

Bad Request
*/
type ExportImageBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ExportImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] exportImageBadRequest  %+v", 400, o.Payload)
}

func (o *ExportImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImageUnauthorized creates a ExportImageUnauthorized with default headers values
func NewExportImageUnauthorized() *ExportImageUnauthorized {
	return &ExportImageUnauthorized{}
}

/*ExportImageUnauthorized handles this case with default header values.

Unauthorized
*/
type ExportImageUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ExportImageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] exportImageUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImageNotFound creates a ExportImageNotFound with default headers values
func NewExportImageNotFound() *ExportImageNotFound {
	return &ExportImageNotFound{}
}

/*ExportImageNotFound handles this case with default header values.

Not Found
*/
type ExportImageNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ExportImageNotFound) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] exportImageNotFound  %+v", 404, o.Payload)
}

func (o *ExportImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImageConflict creates a ExportImageConflict with default headers values
func NewExportImageConflict() *ExportImageConflict {
	return &ExportImageConflict{}
}

/*ExportImageConflict handles this case with default header values.

Conflict
*/
type ExportImageConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ExportImageConflict) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] exportImageConflict  %+v", 409, o.Payload)
}

func (o *ExportImageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImagePreconditionFailed creates a ExportImagePreconditionFailed with default headers values
func NewExportImagePreconditionFailed() *ExportImagePreconditionFailed {
	return &ExportImagePreconditionFailed{}
}

/*ExportImagePreconditionFailed handles this case with default header values.

Precondition Failed
*/
type ExportImagePreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ExportImagePreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] exportImagePreconditionFailed  %+v", 412, o.Payload)
}

func (o *ExportImagePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImageInternalServerError creates a ExportImageInternalServerError with default headers values
func NewExportImageInternalServerError() *ExportImageInternalServerError {
	return &ExportImageInternalServerError{}
}

/*ExportImageInternalServerError handles this case with default header values.

Internal Server Error
*/
type ExportImageInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ExportImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] exportImageInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImageDefault creates a ExportImageDefault with default headers values
func NewExportImageDefault(code int) *ExportImageDefault {
	return &ExportImageDefault{
		_statusCode: code,
	}
}

/*ExportImageDefault handles this case with default header values.

An error has occurred.
*/
type ExportImageDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the export image default response
func (o *ExportImageDefault) Code() int {
	return o._statusCode
}

func (o *ExportImageDefault) Error() string {
	return fmt.Sprintf("[POST /images/{imageId}/actions/export][%d] ExportImage default  %+v", o._statusCode, o.Payload)
}

func (o *ExportImageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
