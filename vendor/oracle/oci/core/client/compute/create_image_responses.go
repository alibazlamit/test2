package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CreateImageReader is a Reader for the CreateImage structure.
type CreateImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateImageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateImageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateImageOK creates a CreateImageOK with default headers values
func NewCreateImageOK() *CreateImageOK {
	return &CreateImageOK{}
}

/*CreateImageOK handles this case with default header values.

The image is being created.
*/
type CreateImageOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Image
}

func (o *CreateImageOK) Error() string {
	return fmt.Sprintf("[POST /images/][%d] createImageOK  %+v", 200, o.Payload)
}

func (o *CreateImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Image)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageBadRequest creates a CreateImageBadRequest with default headers values
func NewCreateImageBadRequest() *CreateImageBadRequest {
	return &CreateImageBadRequest{}
}

/*CreateImageBadRequest handles this case with default header values.

Bad Request
*/
type CreateImageBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /images/][%d] createImageBadRequest  %+v", 400, o.Payload)
}

func (o *CreateImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageUnauthorized creates a CreateImageUnauthorized with default headers values
func NewCreateImageUnauthorized() *CreateImageUnauthorized {
	return &CreateImageUnauthorized{}
}

/*CreateImageUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateImageUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateImageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /images/][%d] createImageUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageNotFound creates a CreateImageNotFound with default headers values
func NewCreateImageNotFound() *CreateImageNotFound {
	return &CreateImageNotFound{}
}

/*CreateImageNotFound handles this case with default header values.

Not Found
*/
type CreateImageNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateImageNotFound) Error() string {
	return fmt.Sprintf("[POST /images/][%d] createImageNotFound  %+v", 404, o.Payload)
}

func (o *CreateImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageConflict creates a CreateImageConflict with default headers values
func NewCreateImageConflict() *CreateImageConflict {
	return &CreateImageConflict{}
}

/*CreateImageConflict handles this case with default header values.

Conflict
*/
type CreateImageConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateImageConflict) Error() string {
	return fmt.Sprintf("[POST /images/][%d] createImageConflict  %+v", 409, o.Payload)
}

func (o *CreateImageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageInternalServerError creates a CreateImageInternalServerError with default headers values
func NewCreateImageInternalServerError() *CreateImageInternalServerError {
	return &CreateImageInternalServerError{}
}

/*CreateImageInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateImageInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /images/][%d] createImageInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageDefault creates a CreateImageDefault with default headers values
func NewCreateImageDefault(code int) *CreateImageDefault {
	return &CreateImageDefault{
		_statusCode: code,
	}
}

/*CreateImageDefault handles this case with default header values.

An error has occurred.
*/
type CreateImageDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create image default response
func (o *CreateImageDefault) Code() int {
	return o._statusCode
}

func (o *CreateImageDefault) Error() string {
	return fmt.Sprintf("[POST /images/][%d] CreateImage default  %+v", o._statusCode, o.Payload)
}

func (o *CreateImageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
