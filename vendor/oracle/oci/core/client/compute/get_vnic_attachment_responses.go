package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// GetVnicAttachmentReader is a Reader for the GetVnicAttachment structure.
type GetVnicAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVnicAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVnicAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetVnicAttachmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetVnicAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetVnicAttachmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVnicAttachmentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVnicAttachmentOK creates a GetVnicAttachmentOK with default headers values
func NewGetVnicAttachmentOK() *GetVnicAttachmentOK {
	return &GetVnicAttachmentOK{}
}

/*GetVnicAttachmentOK handles this case with default header values.

The VNIC attachment was retrieved.
*/
type GetVnicAttachmentOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.VnicAttachment
}

func (o *GetVnicAttachmentOK) Error() string {
	return fmt.Sprintf("[GET /vnicAttachments/{vnicAttachmentId}][%d] getVnicAttachmentOK  %+v", 200, o.Payload)
}

func (o *GetVnicAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.VnicAttachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicAttachmentUnauthorized creates a GetVnicAttachmentUnauthorized with default headers values
func NewGetVnicAttachmentUnauthorized() *GetVnicAttachmentUnauthorized {
	return &GetVnicAttachmentUnauthorized{}
}

/*GetVnicAttachmentUnauthorized handles this case with default header values.

Unauthorized
*/
type GetVnicAttachmentUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVnicAttachmentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vnicAttachments/{vnicAttachmentId}][%d] getVnicAttachmentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVnicAttachmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicAttachmentNotFound creates a GetVnicAttachmentNotFound with default headers values
func NewGetVnicAttachmentNotFound() *GetVnicAttachmentNotFound {
	return &GetVnicAttachmentNotFound{}
}

/*GetVnicAttachmentNotFound handles this case with default header values.

Not Found
*/
type GetVnicAttachmentNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVnicAttachmentNotFound) Error() string {
	return fmt.Sprintf("[GET /vnicAttachments/{vnicAttachmentId}][%d] getVnicAttachmentNotFound  %+v", 404, o.Payload)
}

func (o *GetVnicAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicAttachmentInternalServerError creates a GetVnicAttachmentInternalServerError with default headers values
func NewGetVnicAttachmentInternalServerError() *GetVnicAttachmentInternalServerError {
	return &GetVnicAttachmentInternalServerError{}
}

/*GetVnicAttachmentInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetVnicAttachmentInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetVnicAttachmentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vnicAttachments/{vnicAttachmentId}][%d] getVnicAttachmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVnicAttachmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicAttachmentDefault creates a GetVnicAttachmentDefault with default headers values
func NewGetVnicAttachmentDefault(code int) *GetVnicAttachmentDefault {
	return &GetVnicAttachmentDefault{
		_statusCode: code,
	}
}

/*GetVnicAttachmentDefault handles this case with default header values.

An error has occurred.
*/
type GetVnicAttachmentDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get vnic attachment default response
func (o *GetVnicAttachmentDefault) Code() int {
	return o._statusCode
}

func (o *GetVnicAttachmentDefault) Error() string {
	return fmt.Sprintf("[GET /vnicAttachments/{vnicAttachmentId}][%d] GetVnicAttachment default  %+v", o._statusCode, o.Payload)
}

func (o *GetVnicAttachmentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
