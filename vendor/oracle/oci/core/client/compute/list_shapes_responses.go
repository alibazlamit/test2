package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// ListShapesReader is a Reader for the ListShapes structure.
type ListShapesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListShapesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListShapesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListShapesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListShapesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListShapesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListShapesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListShapesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListShapesOK creates a ListShapesOK with default headers values
func NewListShapesOK() *ListShapesOK {
	return &ListShapesOK{}
}

/*ListShapesOK handles this case with default header values.

The list is being retrieved.
*/
type ListShapesOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.Shape
}

func (o *ListShapesOK) Error() string {
	return fmt.Sprintf("[GET /shapes][%d] listShapesOK  %+v", 200, o.Payload)
}

func (o *ListShapesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShapesBadRequest creates a ListShapesBadRequest with default headers values
func NewListShapesBadRequest() *ListShapesBadRequest {
	return &ListShapesBadRequest{}
}

/*ListShapesBadRequest handles this case with default header values.

Bad Request
*/
type ListShapesBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListShapesBadRequest) Error() string {
	return fmt.Sprintf("[GET /shapes][%d] listShapesBadRequest  %+v", 400, o.Payload)
}

func (o *ListShapesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShapesUnauthorized creates a ListShapesUnauthorized with default headers values
func NewListShapesUnauthorized() *ListShapesUnauthorized {
	return &ListShapesUnauthorized{}
}

/*ListShapesUnauthorized handles this case with default header values.

Unauthorized
*/
type ListShapesUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListShapesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shapes][%d] listShapesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListShapesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShapesNotFound creates a ListShapesNotFound with default headers values
func NewListShapesNotFound() *ListShapesNotFound {
	return &ListShapesNotFound{}
}

/*ListShapesNotFound handles this case with default header values.

Not Found
*/
type ListShapesNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListShapesNotFound) Error() string {
	return fmt.Sprintf("[GET /shapes][%d] listShapesNotFound  %+v", 404, o.Payload)
}

func (o *ListShapesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShapesInternalServerError creates a ListShapesInternalServerError with default headers values
func NewListShapesInternalServerError() *ListShapesInternalServerError {
	return &ListShapesInternalServerError{}
}

/*ListShapesInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListShapesInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListShapesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shapes][%d] listShapesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListShapesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShapesDefault creates a ListShapesDefault with default headers values
func NewListShapesDefault(code int) *ListShapesDefault {
	return &ListShapesDefault{
		_statusCode: code,
	}
}

/*ListShapesDefault handles this case with default header values.

An error has occurred.
*/
type ListShapesDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list shapes default response
func (o *ListShapesDefault) Code() int {
	return o._statusCode
}

func (o *ListShapesDefault) Error() string {
	return fmt.Sprintf("[GET /shapes][%d] ListShapes default  %+v", o._statusCode, o.Payload)
}

func (o *ListShapesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
