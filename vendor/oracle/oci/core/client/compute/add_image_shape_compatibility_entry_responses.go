package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// AddImageShapeCompatibilityEntryReader is a Reader for the AddImageShapeCompatibilityEntry structure.
type AddImageShapeCompatibilityEntryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddImageShapeCompatibilityEntryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddImageShapeCompatibilityEntryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddImageShapeCompatibilityEntryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddImageShapeCompatibilityEntryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddImageShapeCompatibilityEntryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddImageShapeCompatibilityEntryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAddImageShapeCompatibilityEntryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddImageShapeCompatibilityEntryOK creates a AddImageShapeCompatibilityEntryOK with default headers values
func NewAddImageShapeCompatibilityEntryOK() *AddImageShapeCompatibilityEntryOK {
	return &AddImageShapeCompatibilityEntryOK{}
}

/*AddImageShapeCompatibilityEntryOK handles this case with default header values.

The shape has been added to the compatible shapes list.
*/
type AddImageShapeCompatibilityEntryOK struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.ImageShapeCompatibilityEntry
}

func (o *AddImageShapeCompatibilityEntryOK) Error() string {
	return fmt.Sprintf("[PUT /images/{imageId}/shapes/{shapeName}][%d] addImageShapeCompatibilityEntryOK  %+v", 200, o.Payload)
}

func (o *AddImageShapeCompatibilityEntryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.ImageShapeCompatibilityEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddImageShapeCompatibilityEntryBadRequest creates a AddImageShapeCompatibilityEntryBadRequest with default headers values
func NewAddImageShapeCompatibilityEntryBadRequest() *AddImageShapeCompatibilityEntryBadRequest {
	return &AddImageShapeCompatibilityEntryBadRequest{}
}

/*AddImageShapeCompatibilityEntryBadRequest handles this case with default header values.

Bad Request
*/
type AddImageShapeCompatibilityEntryBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AddImageShapeCompatibilityEntryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /images/{imageId}/shapes/{shapeName}][%d] addImageShapeCompatibilityEntryBadRequest  %+v", 400, o.Payload)
}

func (o *AddImageShapeCompatibilityEntryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddImageShapeCompatibilityEntryUnauthorized creates a AddImageShapeCompatibilityEntryUnauthorized with default headers values
func NewAddImageShapeCompatibilityEntryUnauthorized() *AddImageShapeCompatibilityEntryUnauthorized {
	return &AddImageShapeCompatibilityEntryUnauthorized{}
}

/*AddImageShapeCompatibilityEntryUnauthorized handles this case with default header values.

Unauthorized
*/
type AddImageShapeCompatibilityEntryUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AddImageShapeCompatibilityEntryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /images/{imageId}/shapes/{shapeName}][%d] addImageShapeCompatibilityEntryUnauthorized  %+v", 401, o.Payload)
}

func (o *AddImageShapeCompatibilityEntryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddImageShapeCompatibilityEntryNotFound creates a AddImageShapeCompatibilityEntryNotFound with default headers values
func NewAddImageShapeCompatibilityEntryNotFound() *AddImageShapeCompatibilityEntryNotFound {
	return &AddImageShapeCompatibilityEntryNotFound{}
}

/*AddImageShapeCompatibilityEntryNotFound handles this case with default header values.

Not Found
*/
type AddImageShapeCompatibilityEntryNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AddImageShapeCompatibilityEntryNotFound) Error() string {
	return fmt.Sprintf("[PUT /images/{imageId}/shapes/{shapeName}][%d] addImageShapeCompatibilityEntryNotFound  %+v", 404, o.Payload)
}

func (o *AddImageShapeCompatibilityEntryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddImageShapeCompatibilityEntryInternalServerError creates a AddImageShapeCompatibilityEntryInternalServerError with default headers values
func NewAddImageShapeCompatibilityEntryInternalServerError() *AddImageShapeCompatibilityEntryInternalServerError {
	return &AddImageShapeCompatibilityEntryInternalServerError{}
}

/*AddImageShapeCompatibilityEntryInternalServerError handles this case with default header values.

Internal Server Error
*/
type AddImageShapeCompatibilityEntryInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AddImageShapeCompatibilityEntryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /images/{imageId}/shapes/{shapeName}][%d] addImageShapeCompatibilityEntryInternalServerError  %+v", 500, o.Payload)
}

func (o *AddImageShapeCompatibilityEntryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddImageShapeCompatibilityEntryDefault creates a AddImageShapeCompatibilityEntryDefault with default headers values
func NewAddImageShapeCompatibilityEntryDefault(code int) *AddImageShapeCompatibilityEntryDefault {
	return &AddImageShapeCompatibilityEntryDefault{
		_statusCode: code,
	}
}

/*AddImageShapeCompatibilityEntryDefault handles this case with default header values.

An error has occurred.
*/
type AddImageShapeCompatibilityEntryDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the add image shape compatibility entry default response
func (o *AddImageShapeCompatibilityEntryDefault) Code() int {
	return o._statusCode
}

func (o *AddImageShapeCompatibilityEntryDefault) Error() string {
	return fmt.Sprintf("[PUT /images/{imageId}/shapes/{shapeName}][%d] AddImageShapeCompatibilityEntry default  %+v", o._statusCode, o.Payload)
}

func (o *AddImageShapeCompatibilityEntryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
