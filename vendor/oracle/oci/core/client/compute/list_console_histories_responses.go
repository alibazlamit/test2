package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// ListConsoleHistoriesReader is a Reader for the ListConsoleHistories structure.
type ListConsoleHistoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListConsoleHistoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListConsoleHistoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListConsoleHistoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListConsoleHistoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListConsoleHistoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListConsoleHistoriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListConsoleHistoriesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListConsoleHistoriesOK creates a ListConsoleHistoriesOK with default headers values
func NewListConsoleHistoriesOK() *ListConsoleHistoriesOK {
	return &ListConsoleHistoriesOK{}
}

/*ListConsoleHistoriesOK handles this case with default header values.

The metadata is being retrieved.
*/
type ListConsoleHistoriesOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.ConsoleHistory
}

func (o *ListConsoleHistoriesOK) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/][%d] listConsoleHistoriesOK  %+v", 200, o.Payload)
}

func (o *ListConsoleHistoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsoleHistoriesBadRequest creates a ListConsoleHistoriesBadRequest with default headers values
func NewListConsoleHistoriesBadRequest() *ListConsoleHistoriesBadRequest {
	return &ListConsoleHistoriesBadRequest{}
}

/*ListConsoleHistoriesBadRequest handles this case with default header values.

Bad Request
*/
type ListConsoleHistoriesBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListConsoleHistoriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/][%d] listConsoleHistoriesBadRequest  %+v", 400, o.Payload)
}

func (o *ListConsoleHistoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsoleHistoriesUnauthorized creates a ListConsoleHistoriesUnauthorized with default headers values
func NewListConsoleHistoriesUnauthorized() *ListConsoleHistoriesUnauthorized {
	return &ListConsoleHistoriesUnauthorized{}
}

/*ListConsoleHistoriesUnauthorized handles this case with default header values.

Unauthorized
*/
type ListConsoleHistoriesUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListConsoleHistoriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/][%d] listConsoleHistoriesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListConsoleHistoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsoleHistoriesNotFound creates a ListConsoleHistoriesNotFound with default headers values
func NewListConsoleHistoriesNotFound() *ListConsoleHistoriesNotFound {
	return &ListConsoleHistoriesNotFound{}
}

/*ListConsoleHistoriesNotFound handles this case with default header values.

Not Found
*/
type ListConsoleHistoriesNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListConsoleHistoriesNotFound) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/][%d] listConsoleHistoriesNotFound  %+v", 404, o.Payload)
}

func (o *ListConsoleHistoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsoleHistoriesInternalServerError creates a ListConsoleHistoriesInternalServerError with default headers values
func NewListConsoleHistoriesInternalServerError() *ListConsoleHistoriesInternalServerError {
	return &ListConsoleHistoriesInternalServerError{}
}

/*ListConsoleHistoriesInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListConsoleHistoriesInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListConsoleHistoriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/][%d] listConsoleHistoriesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListConsoleHistoriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsoleHistoriesDefault creates a ListConsoleHistoriesDefault with default headers values
func NewListConsoleHistoriesDefault(code int) *ListConsoleHistoriesDefault {
	return &ListConsoleHistoriesDefault{
		_statusCode: code,
	}
}

/*ListConsoleHistoriesDefault handles this case with default header values.

An error has occurred.
*/
type ListConsoleHistoriesDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list console histories default response
func (o *ListConsoleHistoriesDefault) Code() int {
	return o._statusCode
}

func (o *ListConsoleHistoriesDefault) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleHistories/][%d] ListConsoleHistories default  %+v", o._statusCode, o.Payload)
}

func (o *ListConsoleHistoriesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
