package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/core/models"
)

// CaptureConsoleHistoryReader is a Reader for the CaptureConsoleHistory structure.
type CaptureConsoleHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CaptureConsoleHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCaptureConsoleHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCaptureConsoleHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCaptureConsoleHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCaptureConsoleHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCaptureConsoleHistoryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCaptureConsoleHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCaptureConsoleHistoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCaptureConsoleHistoryOK creates a CaptureConsoleHistoryOK with default headers values
func NewCaptureConsoleHistoryOK() *CaptureConsoleHistoryOK {
	return &CaptureConsoleHistoryOK{}
}

/*CaptureConsoleHistoryOK handles this case with default header values.

The console history is being captured.
*/
type CaptureConsoleHistoryOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.ConsoleHistory
}

func (o *CaptureConsoleHistoryOK) Error() string {
	return fmt.Sprintf("[POST /instanceConsoleHistories/][%d] captureConsoleHistoryOK  %+v", 200, o.Payload)
}

func (o *CaptureConsoleHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.ConsoleHistory)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureConsoleHistoryBadRequest creates a CaptureConsoleHistoryBadRequest with default headers values
func NewCaptureConsoleHistoryBadRequest() *CaptureConsoleHistoryBadRequest {
	return &CaptureConsoleHistoryBadRequest{}
}

/*CaptureConsoleHistoryBadRequest handles this case with default header values.

Bad Request
*/
type CaptureConsoleHistoryBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CaptureConsoleHistoryBadRequest) Error() string {
	return fmt.Sprintf("[POST /instanceConsoleHistories/][%d] captureConsoleHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *CaptureConsoleHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureConsoleHistoryUnauthorized creates a CaptureConsoleHistoryUnauthorized with default headers values
func NewCaptureConsoleHistoryUnauthorized() *CaptureConsoleHistoryUnauthorized {
	return &CaptureConsoleHistoryUnauthorized{}
}

/*CaptureConsoleHistoryUnauthorized handles this case with default header values.

Unauthorized
*/
type CaptureConsoleHistoryUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CaptureConsoleHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /instanceConsoleHistories/][%d] captureConsoleHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *CaptureConsoleHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureConsoleHistoryNotFound creates a CaptureConsoleHistoryNotFound with default headers values
func NewCaptureConsoleHistoryNotFound() *CaptureConsoleHistoryNotFound {
	return &CaptureConsoleHistoryNotFound{}
}

/*CaptureConsoleHistoryNotFound handles this case with default header values.

Not Found
*/
type CaptureConsoleHistoryNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CaptureConsoleHistoryNotFound) Error() string {
	return fmt.Sprintf("[POST /instanceConsoleHistories/][%d] captureConsoleHistoryNotFound  %+v", 404, o.Payload)
}

func (o *CaptureConsoleHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureConsoleHistoryConflict creates a CaptureConsoleHistoryConflict with default headers values
func NewCaptureConsoleHistoryConflict() *CaptureConsoleHistoryConflict {
	return &CaptureConsoleHistoryConflict{}
}

/*CaptureConsoleHistoryConflict handles this case with default header values.

Conflict
*/
type CaptureConsoleHistoryConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CaptureConsoleHistoryConflict) Error() string {
	return fmt.Sprintf("[POST /instanceConsoleHistories/][%d] captureConsoleHistoryConflict  %+v", 409, o.Payload)
}

func (o *CaptureConsoleHistoryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureConsoleHistoryInternalServerError creates a CaptureConsoleHistoryInternalServerError with default headers values
func NewCaptureConsoleHistoryInternalServerError() *CaptureConsoleHistoryInternalServerError {
	return &CaptureConsoleHistoryInternalServerError{}
}

/*CaptureConsoleHistoryInternalServerError handles this case with default header values.

Internal Server Error
*/
type CaptureConsoleHistoryInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CaptureConsoleHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /instanceConsoleHistories/][%d] captureConsoleHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *CaptureConsoleHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureConsoleHistoryDefault creates a CaptureConsoleHistoryDefault with default headers values
func NewCaptureConsoleHistoryDefault(code int) *CaptureConsoleHistoryDefault {
	return &CaptureConsoleHistoryDefault{
		_statusCode: code,
	}
}

/*CaptureConsoleHistoryDefault handles this case with default header values.

An error has occurred.
*/
type CaptureConsoleHistoryDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the capture console history default response
func (o *CaptureConsoleHistoryDefault) Code() int {
	return o._statusCode
}

func (o *CaptureConsoleHistoryDefault) Error() string {
	return fmt.Sprintf("[POST /instanceConsoleHistories/][%d] CaptureConsoleHistory default  %+v", o._statusCode, o.Payload)
}

func (o *CaptureConsoleHistoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
