package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateImageDetails Either instanceId or imageSourceDetails must be provided in addition to other required parameters.
// swagger:model CreateImageDetails
type CreateImageDetails struct {

	// The OCID of the compartment containing the instance you want to use as the basis for the image.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name for the image. It does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// You cannot use an Oracle-provided image name as a custom image name.
	//
	// Example: `My Oracle Linux image`
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	ImageSourceDetails ImageSourceDetails `json:"-"`

	// The OCID of the instance you want to use as the basis for the image.
	// Max Length: 255
	// Min Length: 1
	InstanceID string `json:"instanceId,omitempty"`
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CreateImageDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		CompartmentID *string `json:"compartmentId"`

		DisplayName string `json:"displayName,omitempty"`

		ImageSourceDetails json.RawMessage `json:"imageSourceDetails,omitempty"`

		InstanceID string `json:"instanceId,omitempty"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	imageSourceDetails, err := UnmarshalImageSourceDetails(bytes.NewBuffer(data.ImageSourceDetails), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result CreateImageDetails
	result.CompartmentID = data.CompartmentID
	result.DisplayName = data.DisplayName
	result.ImageSourceDetails = imageSourceDetails
	result.InstanceID = data.InstanceID
	*m = result
	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CreateImageDetails) MarshalJSON() ([]byte, error) {
	var b1, b2 []byte
	var err error
	b1, err = json.Marshal(struct {
		CompartmentID *string `json:"compartmentId"`

		DisplayName string `json:"displayName,omitempty"`

		InstanceID string `json:"instanceId,omitempty"`
	}{
		CompartmentID: m.CompartmentID,
		DisplayName:   m.DisplayName,
		InstanceID:    m.InstanceID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ImageSourceDetails ImageSourceDetails `json:"imageSourceDetails,omitempty"`
	}{
		ImageSourceDetails: m.ImageSourceDetails,
	})
	if err != nil {
		return nil, err
	}
	return swag.ConcatJSON(b1, b2), nil
}

// Validate validates this create image details
func (m *CreateImageDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateImageDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateImageDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateImageDetails) validateInstanceID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceID) { // not required
		return nil
	}

	if err := validate.MinLength("instanceId", "body", string(m.InstanceID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(m.InstanceID), 255); err != nil {
		return err
	}

	return nil
}
