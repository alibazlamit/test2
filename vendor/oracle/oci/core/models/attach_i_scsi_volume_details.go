package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachIScsiVolumeDetails attach i scsi volume details
// swagger:model AttachIScsiVolumeDetails
type AttachIScsiVolumeDetails struct {
	displayNameField string

	instanceIdField *string

	volumeIdField *string

	// Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap bool `json:"useChap,omitempty"`
}

func (m *AttachIScsiVolumeDetails) DisplayName() string {
	return m.displayNameField
}
func (m *AttachIScsiVolumeDetails) SetDisplayName(val string) {
	m.displayNameField = val
}

func (m *AttachIScsiVolumeDetails) InstanceID() *string {
	return m.instanceIdField
}
func (m *AttachIScsiVolumeDetails) SetInstanceID(val *string) {
	m.instanceIdField = val
}

func (m *AttachIScsiVolumeDetails) Type() string {
	//return "AttachIScsiVolumeDetails"
	return DiscriminatorTypeValues["AttachIScsiVolumeDetails"]
}
func (m *AttachIScsiVolumeDetails) SetType(val string) {

}

func (m *AttachIScsiVolumeDetails) VolumeID() *string {
	return m.volumeIdField
}
func (m *AttachIScsiVolumeDetails) SetVolumeID(val *string) {
	m.volumeIdField = val
}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *AttachIScsiVolumeDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		DisplayName string `json:"displayName,omitempty"`

		InstanceID *string `json:"instanceId"`

		Type string `json:"type"`

		VolumeID *string `json:"volumeId"`

		// Whether to use CHAP authentication for the volume attachment. Defaults to false.
		UseChap bool `json:"useChap,omitempty"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.displayNameField = data.DisplayName
	m.instanceIdField = data.InstanceID
	m.volumeIdField = data.VolumeID
	m.UseChap = data.UseChap

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m AttachIScsiVolumeDetails) MarshalJSON() ([]byte, error) {
	var data struct {
		DisplayName string `json:"displayName,omitempty"`

		InstanceID *string `json:"instanceId"`

		Type string `json:"type"`

		VolumeID *string `json:"volumeId"`

		// Whether to use CHAP authentication for the volume attachment. Defaults to false.
		UseChap bool `json:"useChap,omitempty"`
	}

	data.DisplayName = m.displayNameField
	data.InstanceID = m.instanceIdField
	data.VolumeID = m.volumeIdField
	data.UseChap = m.UseChap
	//data.Type = "AttachIScsiVolumeDetails"
	data.Type = DiscriminatorTypeValues["AttachIScsiVolumeDetails"]
	return json.Marshal(data)
}

// Validate validates this attach i scsi volume details
func (m *AttachIScsiVolumeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachIScsiVolumeDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName()) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName()), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachIScsiVolumeDetails) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID()); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID()), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachIScsiVolumeDetails) validateVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("volumeId", "body", m.VolumeID()); err != nil {
		return err
	}

	if err := validate.MinLength("volumeId", "body", string(*m.VolumeID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("volumeId", "body", string(*m.VolumeID()), 255); err != nil {
		return err
	}

	return nil
}
