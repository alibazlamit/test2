package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVcnDetails create vcn details
// swagger:model CreateVcnDetails
type CreateVcnDetails struct {

	// The CIDR IP address block of the VCN.
	//
	// Example: `172.16.0.0/16`
	//
	// Required: true
	// Max Length: 32
	// Min Length: 1
	CidrBlock *string `json:"cidrBlock"`

	// The OCID of the compartment to contain the VCN.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// A DNS label for the VCN, used in conjunction with the VNIC's hostname and
	// subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC
	// within this subnet (e.g., `bminstance-1.subnet123.vcn1.oraclevcn.com`).
	// Not required to be unique, but it's a best practice to set unique DNS labels
	// for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter.
	// The value cannot be changed.
	//
	// You must set this value if you want instances to be able to use hostnames to
	// resolve other instances in the VCN. Otherwise the Internet and VCN Resolver
	// will not work.
	//
	// For more information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// Example: `vcn1`
	//
	// Max Length: 15
	// Min Length: 1
	DNSLabel string `json:"dnsLabel,omitempty"`
}

// Validate validates this create vcn details
func (m *CreateVcnDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidrBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDNSLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVcnDetails) validateCidrBlock(formats strfmt.Registry) error {

	if err := validate.Required("cidrBlock", "body", m.CidrBlock); err != nil {
		return err
	}

	if err := validate.MinLength("cidrBlock", "body", string(*m.CidrBlock), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("cidrBlock", "body", string(*m.CidrBlock), 32); err != nil {
		return err
	}

	return nil
}

func (m *CreateVcnDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVcnDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVcnDetails) validateDNSLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSLabel) { // not required
		return nil
	}

	if err := validate.MinLength("dnsLabel", "body", string(m.DNSLabel), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("dnsLabel", "body", string(m.DNSLabel), 15); err != nil {
		return err
	}

	return nil
}
