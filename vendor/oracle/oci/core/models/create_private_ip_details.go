package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePrivateIPDetails create private Ip details
// swagger:model CreatePrivateIpDetails
type CreatePrivateIPDetails struct {

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid
	// entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The hostname for the private IP. Used for DNS. The value
	// is the hostname portion of the private IP's fully qualified domain name (FQDN)
	// (for example, `bminstance-1` in FQDN `bminstance-1.subnet123.vcn1.oraclevcn.com`).
	// Must be unique across all VNICs in the subnet and comply with
	// [RFC 952](https://tools.ietf.org/html/rfc952) and
	// [RFC 1123](https://tools.ietf.org/html/rfc1123).
	//
	// For more information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// Example: `bminstance-1`
	//
	// Max Length: 63
	// Min Length: 1
	HostnameLabel string `json:"hostnameLabel,omitempty"`

	// A private IP address of your choice. Must be an available IP address within
	// the subnet's CIDR. If you don't specify a value, Oracle automatically
	// assigns a private IP address from the subnet.
	//
	// Example: `10.0.3.3`
	//
	// Max Length: 32
	// Min Length: 1
	IPAddress string `json:"ipAddress,omitempty"`

	// The OCID of the VNIC to assign the private IP to. The VNIC and private IP
	// must be in the same subnet.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	VnicID *string `json:"vnicId"`
}

// Validate validates this create private Ip details
func (m *CreatePrivateIPDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostnameLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVnicID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePrivateIPDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreatePrivateIPDetails) validateHostnameLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.HostnameLabel) { // not required
		return nil
	}

	if err := validate.MinLength("hostnameLabel", "body", string(m.HostnameLabel), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hostnameLabel", "body", string(m.HostnameLabel), 63); err != nil {
		return err
	}

	return nil
}

func (m *CreatePrivateIPDetails) validateIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddress) { // not required
		return nil
	}

	if err := validate.MinLength("ipAddress", "body", string(m.IPAddress), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ipAddress", "body", string(m.IPAddress), 32); err != nil {
		return err
	}

	return nil
}

func (m *CreatePrivateIPDetails) validateVnicID(formats strfmt.Registry) error {

	if err := validate.Required("vnicId", "body", m.VnicID); err != nil {
		return err
	}

	if err := validate.MinLength("vnicId", "body", string(*m.VnicID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("vnicId", "body", string(*m.VnicID), 255); err != nil {
		return err
	}

	return nil
}
