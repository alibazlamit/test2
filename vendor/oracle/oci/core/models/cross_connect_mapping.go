package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CrossConnectMapping For use with Oracle Bare Metal Cloud Services FastConnect. Each
// [VirtualCircuit](#/en/iaas/20160918/VirtualCircuit/) runs on one or
// more cross-connects or cross-connect groups. A `CrossConnectMapping`
// contains the properties for an individual cross-connect or cross-connect group
// associated with a given virtual circuit.
//
// The mapping includes information about the cross-connect or
// cross-connect group, the VLAN, and the BGP peering session.
//
// If you're a customer who is colocated with Oracle, that means you own both
// the virtual circuit and the physical connection it runs on (cross-connect or
// cross-connect group), so you specify all the information in the mapping.
//
// If you're a provider, then you own the physical connection that the customer's
// virtual circuit runs on, so you contribute information about the cross-connect
// or cross-connect group and VLAN.
//
// Who specifies the BGP peering information in the case of customer connection via
// provider? If the BGP session goes from Oracle to the provider's edge router, then
// the provider also specifies the BGP peering information. If the BGP session instead
// goes from Oracle to the customer's edge router, then the customer specifies the BGP
// peering information.
//
// swagger:model CrossConnectMapping
type CrossConnectMapping struct {

	// The key for BGP MD5 authentication. Only applicable if your system
	// requires MD5 authentication. If empty or not set (null), that
	// means you don't use BGP MD5 authentication.
	//
	// Max Length: 255
	// Min Length: 1
	BgpMd5AuthKey string `json:"bgpMd5AuthKey,omitempty"`

	// The OCID of the cross-connect or cross-connect group for this mapping.
	// Specified by the owner of the cross-connect or cross-connect group (the
	// customer if the customer is colocated with Oracle; the provider if the
	// customer is connecting via provider).
	//
	// Max Length: 255
	// Min Length: 1
	CrossConnectOrCrossConnectGroupID string `json:"crossConnectOrCrossConnectGroupId,omitempty"`

	// The BGP IP address for the router on the other end of the BGP session from
	// Oracle. Specified by the owner of that router. If the session goes from Oracle
	// to a customer, this is the BGP IP address of the customer's edge router. If the
	// session goes from Oracle to a provider, this is the BGP IP address of the
	// provider's edge router. Must use a /30 or /31 subnet mask.
	//
	// Example: `10.0.0.18/31`
	//
	// Max Length: 46
	// Min Length: 7
	CustomerBgpPeeringIP string `json:"customerBgpPeeringIp,omitempty"`

	// The IP address for Oracle's end of the BPG session. Must use a /30 or /31
	// subnet mask. If the session goes from Oracle to a customer's edge router,
	// the customer specifies this information. If the session goes from Oracle to
	// a provider's edge router, the provider specifies this.
	//
	// Example: `10.0.0.19/31`
	//
	// Max Length: 46
	// Min Length: 7
	OracleBgpPeeringIP string `json:"oracleBgpPeeringIp,omitempty"`

	// The number of the specific VLAN (on the cross-connect or cross-connect group)
	// that is assigned to this virtual circuit. Specified by the owner of the cross-connect
	// or cross-connect group (the customer if the customer is colocated with Oracle, or
	// the provider if the customer is connecting via provider).
	//
	// Example: `200`
	//
	// Maximum: 1.6777216e+07
	// Minimum: 100
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this cross connect mapping
func (m *CrossConnectMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpMd5AuthKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCrossConnectOrCrossConnectGroupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomerBgpPeeringIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOracleBgpPeeringIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrossConnectMapping) validateBgpMd5AuthKey(formats strfmt.Registry) error {

	if swag.IsZero(m.BgpMd5AuthKey) { // not required
		return nil
	}

	if err := validate.MinLength("bgpMd5AuthKey", "body", string(m.BgpMd5AuthKey), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("bgpMd5AuthKey", "body", string(m.BgpMd5AuthKey), 255); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnectMapping) validateCrossConnectOrCrossConnectGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.CrossConnectOrCrossConnectGroupID) { // not required
		return nil
	}

	if err := validate.MinLength("crossConnectOrCrossConnectGroupId", "body", string(m.CrossConnectOrCrossConnectGroupID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("crossConnectOrCrossConnectGroupId", "body", string(m.CrossConnectOrCrossConnectGroupID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnectMapping) validateCustomerBgpPeeringIP(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerBgpPeeringIP) { // not required
		return nil
	}

	if err := validate.MinLength("customerBgpPeeringIp", "body", string(m.CustomerBgpPeeringIP), 7); err != nil {
		return err
	}

	if err := validate.MaxLength("customerBgpPeeringIp", "body", string(m.CustomerBgpPeeringIP), 46); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnectMapping) validateOracleBgpPeeringIP(formats strfmt.Registry) error {

	if swag.IsZero(m.OracleBgpPeeringIP) { // not required
		return nil
	}

	if err := validate.MinLength("oracleBgpPeeringIp", "body", string(m.OracleBgpPeeringIP), 7); err != nil {
		return err
	}

	if err := validate.MaxLength("oracleBgpPeeringIp", "body", string(m.OracleBgpPeeringIP), 46); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnectMapping) validateVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Vlan) { // not required
		return nil
	}

	if err := validate.MinimumInt("vlan", "body", int64(m.Vlan), 100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vlan", "body", int64(m.Vlan), 1.6777216e+07, false); err != nil {
		return err
	}

	return nil
}
