package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Volume A detachable block volume device that allows you to dynamically expand
// the storage capacity of an instance. For more information, see
// [Overview of Cloud Volume Storage](/Content/Block/Concepts/overview.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model Volume
type Volume struct {

	// The Availability Domain of the volume.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain *string `json:"availabilityDomain"`

	// The OCID of the compartment that contains the volume.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DisplayName *string `json:"displayName"`

	// The volume's Oracle ID (OCID).
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// The current state of a volume.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The size of the volume in MBs.
	// Required: true
	SizeInMBs *int64 `json:"sizeInMBs"`

	// The date and time the volume was created. Format defined by RFC3339.
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this volume
func (m *Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSizeInMBs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Volume) validateAvailabilityDomain(formats strfmt.Registry) error {

	if err := validate.Required("availabilityDomain", "body", m.AvailabilityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("displayName", "body", string(*m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(*m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var volumeTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","RESTORING","AVAILABLE","TERMINATING","TERMINATED","FAULTY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeTypeLifecycleStatePropEnum = append(volumeTypeLifecycleStatePropEnum, v)
	}
}

const (
	// VolumeLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	VolumeLifecycleStatePROVISIONING string = "PROVISIONING"
	// VolumeLifecycleStateRESTORING captures enum value "RESTORING"
	VolumeLifecycleStateRESTORING string = "RESTORING"
	// VolumeLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	VolumeLifecycleStateAVAILABLE string = "AVAILABLE"
	// VolumeLifecycleStateTERMINATING captures enum value "TERMINATING"
	VolumeLifecycleStateTERMINATING string = "TERMINATING"
	// VolumeLifecycleStateTERMINATED captures enum value "TERMINATED"
	VolumeLifecycleStateTERMINATED string = "TERMINATED"
	// VolumeLifecycleStateFAULTY captures enum value "FAULTY"
	VolumeLifecycleStateFAULTY string = "FAULTY"
)

// prop value enum
func (m *Volume) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Volume) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateSizeInMBs(formats strfmt.Registry) error {

	if err := validate.Required("sizeInMBs", "body", m.SizeInMBs); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}
