package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// DhcpOption A single DHCP option according to [RFC 1533](https://tools.ietf.org/html/rfc1533).
// The two options available to use are [DhcpDnsOption](#/en/iaas/20160918/DhcpDnsOption/)
// and [DhcpSearchDomainOption](#/en/iaas/20160918/DhcpSearchDomainOption/). For more
// information, see [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm)
// and [Managing DHCP Options](/Content/Network/Tasks/managingDHCP.htm).
//
// swagger:discriminator DhcpOption type
type DhcpOption interface {
	runtime.Validatable

	// The specific DHCP option. Either `DomainNameServer`
	// (for [DhcpDnsOption](#/en/iaas/20160918/DhcpDnsOption/)) or
	// `SearchDomain` (for [DhcpSearchDomainOption](#/en/iaas/20160918/DhcpSearchDomainOption/)).
	//
	// Required: true
	Type() string
	SetType(string)
}

// UnmarshalDhcpOptionSlice unmarshals polymorphic slices of DhcpOption
func UnmarshalDhcpOptionSlice(reader io.Reader, consumer runtime.Consumer) ([]DhcpOption, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []DhcpOption
	for _, element := range elements {
		obj, err := unmarshalDhcpOption(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDhcpOption unmarshals polymorphic DhcpOption
func UnmarshalDhcpOption(reader io.Reader, consumer runtime.Consumer) (DhcpOption, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDhcpOption(data, consumer)
}

func unmarshalDhcpOption(data []byte, consumer runtime.Consumer) (DhcpOption, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case DiscriminatorTypeValues["DhcpDnsOption"]:
		var result DhcpDNSOption
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case DiscriminatorTypeValues["DhcpSearchDomainOption"]:
		var result DhcpSearchDomainOption
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}
