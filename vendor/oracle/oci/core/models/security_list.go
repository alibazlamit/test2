package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityList A set of virtual firewall rules for your VCN. Security lists are configured at the subnet
// level, but the rules are applied to the ingress and egress traffic for the individual instances
// in the subnet. The rules can be stateful or stateless. For more information, see
// [Security Lists](/Content/Network/Concepts/securitylists.htm).
//
// **Important:** Oracle Bare Metal Cloud Services images automatically include firewall rules (e.g.,
// Linux iptables, Windows firewall). If there are issues with some type of access to an instance,
// make sure both the security lists associated with the instance's subnet and the instance's
// firewall rules are set correctly.
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model SecurityList
type SecurityList struct {

	// The OCID of the compartment containing the security list.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DisplayName *string `json:"displayName"`

	// Rules for allowing egress IP packets.
	// Required: true
	EgressSecurityRules []*EgressSecurityRule `json:"egressSecurityRules"`

	// The security list's Oracle Cloud ID (OCID).
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// Rules for allowing ingress IP packets.
	// Required: true
	IngressSecurityRules []*IngressSecurityRule `json:"ingressSecurityRules"`

	// The security list's current state.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The date and time the security list was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`

	// The OCID of the VCN the security list belongs to.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	VcnID *string `json:"vcnId"`
}

// Validate validates this security list
func (m *SecurityList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEgressSecurityRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIngressSecurityRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVcnID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityList) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *SecurityList) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("displayName", "body", string(*m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(*m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *SecurityList) validateEgressSecurityRules(formats strfmt.Registry) error {

	if err := validate.Required("egressSecurityRules", "body", m.EgressSecurityRules); err != nil {
		return err
	}

	for i := 0; i < len(m.EgressSecurityRules); i++ {

		if swag.IsZero(m.EgressSecurityRules[i]) { // not required
			continue
		}

		if m.EgressSecurityRules[i] != nil {

			if err := m.EgressSecurityRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressSecurityRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityList) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

func (m *SecurityList) validateIngressSecurityRules(formats strfmt.Registry) error {

	if err := validate.Required("ingressSecurityRules", "body", m.IngressSecurityRules); err != nil {
		return err
	}

	for i := 0; i < len(m.IngressSecurityRules); i++ {

		if swag.IsZero(m.IngressSecurityRules[i]) { // not required
			continue
		}

		if m.IngressSecurityRules[i] != nil {

			if err := m.IngressSecurityRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressSecurityRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var securityListTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","AVAILABLE","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityListTypeLifecycleStatePropEnum = append(securityListTypeLifecycleStatePropEnum, v)
	}
}

const (
	// SecurityListLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	SecurityListLifecycleStatePROVISIONING string = "PROVISIONING"
	// SecurityListLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	SecurityListLifecycleStateAVAILABLE string = "AVAILABLE"
	// SecurityListLifecycleStateTERMINATING captures enum value "TERMINATING"
	SecurityListLifecycleStateTERMINATING string = "TERMINATING"
	// SecurityListLifecycleStateTERMINATED captures enum value "TERMINATED"
	SecurityListLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *SecurityList) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityListTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityList) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *SecurityList) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}

func (m *SecurityList) validateVcnID(formats strfmt.Registry) error {

	if err := validate.Required("vcnId", "body", m.VcnID); err != nil {
		return err
	}

	if err := validate.MinLength("vcnId", "body", string(*m.VcnID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("vcnId", "body", string(*m.VcnID), 255); err != nil {
		return err
	}

	return nil
}
