package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVirtualCircuitDetails create virtual circuit details
// swagger:model CreateVirtualCircuitDetails
type CreateVirtualCircuitDetails struct {

	// The provisioned data rate of the connection.  To get a list of the
	// available bandwidth levels (i.e., shapes), see
	// [ListVirtualCircuitBandwidthShapes](#/en/iaas/20160918/VirtualCircuitBandwidthShape/ListVirtualCircuitBandwidthShapes).
	//
	// Example: `10 Gbps`
	//
	BandwidthShapeName string `json:"bandwidthShapeName,omitempty"`

	// The OCID of the compartment to contain the virtual circuit.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// Create a `CrossConnectMapping` for each cross-connect or cross-connect
	// group this virtual circuit will run on.
	//
	// Maximum: 2
	// Minimum: 0
	CrossConnectMappings []*CrossConnectMapping `json:"crossConnectMappings"`

	// Your BGP ASN (either public or private). Provide this value only if
	// there's a BGP session that goes from your edge router to Oracle.
	// Otherwise, leave this empty or null.
	//
	CustomerBgpAsn int64 `json:"customerBgpAsn,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the [Dynamic Routing Gateway (DRG)](#/en/iaas/20160918/Drg)
	// that this virtual circuit uses.
	//
	// Max Length: 255
	// Min Length: 1
	GatewayID string `json:"gatewayId,omitempty"`

	// The name of the provider (if you're connecting via a provider).
	// To get a list of the provider names, see
	// [ListFastConnectProviderServices](#/en/iaas/20160918/FastConnectProviderService/ListFastConnectProviderServices).
	//
	// Max Length: 255
	// Min Length: 1
	ProviderName string `json:"providerName,omitempty"`

	// The name of the service offered by the provider (if you're connecting
	// via a provider). To get a list of the available service offerings, see
	// [ListFastConnectProviderServices](#/en/iaas/20160918/FastConnectProviderService/ListFastConnectProviderServices).
	//
	// Max Length: 255
	// Min Length: 1
	ProviderServiceName string `json:"providerServiceName,omitempty"`

	// The Oracle Bare Metal Cloud Services region where this virtual
	// circuit is located.
	//
	// Example: `phx`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Region *string `json:"region"`

	// The type of IP addresses used in this virtual circuit. PRIVATE
	// means [RFC 1918](https://tools.ietf.org/html/rfc1918) addresses
	// (10.0.0.0/8, 172.16/12, and 192.168/16). Only PRIVATE is supported.
	//
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this create virtual circuit details
func (m *CreateVirtualCircuitDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCrossConnectMappings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderServiceName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVirtualCircuitDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualCircuitDetails) validateCrossConnectMappings(formats strfmt.Registry) error {

	if swag.IsZero(m.CrossConnectMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.CrossConnectMappings); i++ {

		if swag.IsZero(m.CrossConnectMappings[i]) { // not required
			continue
		}

		if m.CrossConnectMappings[i] != nil {

			if err := m.CrossConnectMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("crossConnectMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateVirtualCircuitDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualCircuitDetails) validateGatewayID(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayID) { // not required
		return nil
	}

	if err := validate.MinLength("gatewayId", "body", string(m.GatewayID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("gatewayId", "body", string(m.GatewayID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualCircuitDetails) validateProviderName(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderName) { // not required
		return nil
	}

	if err := validate.MinLength("providerName", "body", string(m.ProviderName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("providerName", "body", string(m.ProviderName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualCircuitDetails) validateProviderServiceName(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderServiceName) { // not required
		return nil
	}

	if err := validate.MinLength("providerServiceName", "body", string(m.ProviderServiceName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("providerServiceName", "body", string(m.ProviderServiceName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualCircuitDetails) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	if err := validate.MinLength("region", "body", string(*m.Region), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("region", "body", string(*m.Region), 255); err != nil {
		return err
	}

	return nil
}

var createVirtualCircuitDetailsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createVirtualCircuitDetailsTypeTypePropEnum = append(createVirtualCircuitDetailsTypeTypePropEnum, v)
	}
}

const (
	// CreateVirtualCircuitDetailsTypePUBLIC captures enum value "PUBLIC"
	CreateVirtualCircuitDetailsTypePUBLIC string = "PUBLIC"
	// CreateVirtualCircuitDetailsTypePRIVATE captures enum value "PRIVATE"
	CreateVirtualCircuitDetailsTypePRIVATE string = "PRIVATE"
)

// prop value enum
func (m *CreateVirtualCircuitDetails) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createVirtualCircuitDetailsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateVirtualCircuitDetails) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
