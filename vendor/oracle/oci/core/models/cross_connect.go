package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CrossConnect For use with Oracle Bare Metal Cloud Services FastConnect. A cross-connect represents a
// physical connection between an existing network and Oracle. Customers who are colocated
// with Oracle in a FastConnect location create and use cross-connects. For more
// information, see [FastConnect Overview](/Content/Network/Concepts/fastconnect.htm).
//
// Oracle recommends you create each cross-connect in a
// [CrossConnectGroup](#/en/iaas/20160918/CrossConnectGroup) so you can use link aggregation
// with the connection.
//
// **Note:** If you're a provider who is setting up a physical connection to Oracle so customers
// can use FastConnect over the connection, be aware that your connection is modeled the
// same way as a colocated customer's (with `CrossConnect` and `CrossConnectGroup` objects, etc.).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model CrossConnect
type CrossConnect struct {

	// The OCID of the compartment containing the cross-connect group.
	// Max Length: 255
	// Min Length: 1
	CompartmentID string `json:"compartmentId,omitempty"`

	// The OCID of the cross-connect group this cross-connect belongs to (if any).
	// Max Length: 255
	// Min Length: 1
	CrossConnectGroupID string `json:"crossConnectGroupId,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The cross-connect's Oracle ID (OCID).
	// Max Length: 255
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// The cross-connect's current state.
	LifecycleState string `json:"lifecycleState,omitempty"`

	// The name of the FastConnect location where this cross-connect is installed.
	// Max Length: 255
	// Min Length: 1
	LocationName string `json:"locationName,omitempty"`

	// A string identifying the meet-me room port for this cross-connect.
	// Max Length: 255
	// Min Length: 1
	PortName string `json:"portName,omitempty"`

	// The port speed for this cross-connect.
	//
	// Example: `10 Gbps`
	//
	PortSpeedShapeName string `json:"portSpeedShapeName,omitempty"`

	// The date and time the cross-connect was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`
}

// Validate validates this cross connect
func (m *CrossConnect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCrossConnectGroupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocationName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePortName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrossConnect) validateCompartmentID(formats strfmt.Registry) error {

	if swag.IsZero(m.CompartmentID) { // not required
		return nil
	}

	if err := validate.MinLength("compartmentId", "body", string(m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnect) validateCrossConnectGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.CrossConnectGroupID) { // not required
		return nil
	}

	if err := validate.MinLength("crossConnectGroupId", "body", string(m.CrossConnectGroupID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("crossConnectGroupId", "body", string(m.CrossConnectGroupID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnect) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnect) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 255); err != nil {
		return err
	}

	return nil
}

var crossConnectTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING_CUSTOMER","PROVISIONING","PROVISIONED","INACTIVE","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		crossConnectTypeLifecycleStatePropEnum = append(crossConnectTypeLifecycleStatePropEnum, v)
	}
}

const (
	// CrossConnectLifecycleStatePENDINGCUSTOMER captures enum value "PENDING_CUSTOMER"
	CrossConnectLifecycleStatePENDINGCUSTOMER string = "PENDING_CUSTOMER"
	// CrossConnectLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	CrossConnectLifecycleStatePROVISIONING string = "PROVISIONING"
	// CrossConnectLifecycleStatePROVISIONED captures enum value "PROVISIONED"
	CrossConnectLifecycleStatePROVISIONED string = "PROVISIONED"
	// CrossConnectLifecycleStateINACTIVE captures enum value "INACTIVE"
	CrossConnectLifecycleStateINACTIVE string = "INACTIVE"
	// CrossConnectLifecycleStateTERMINATING captures enum value "TERMINATING"
	CrossConnectLifecycleStateTERMINATING string = "TERMINATING"
	// CrossConnectLifecycleStateTERMINATED captures enum value "TERMINATED"
	CrossConnectLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *CrossConnect) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, crossConnectTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CrossConnect) validateLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnect) validateLocationName(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationName) { // not required
		return nil
	}

	if err := validate.MinLength("locationName", "body", string(m.LocationName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("locationName", "body", string(m.LocationName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CrossConnect) validatePortName(formats strfmt.Registry) error {

	if swag.IsZero(m.PortName) { // not required
		return nil
	}

	if err := validate.MinLength("portName", "body", string(m.PortName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("portName", "body", string(m.PortName), 255); err != nil {
		return err
	}

	return nil
}
