package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCrossConnectDetails create cross connect details
// swagger:model CreateCrossConnectDetails
type CreateCrossConnectDetails struct {

	// The OCID of the compartment to contain the cross-connect.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// The OCID of the cross-connect group to put this cross-connect in.
	// Max Length: 255
	// Min Length: 1
	CrossConnectGroupID string `json:"crossConnectGroupId,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect
	// location, and you want this new cross-connect to be on a different router (for the
	// purposes of redundancy), provide the OCID of that existing cross-connect or
	// cross-connect group.
	//
	// Max Length: 255
	// Min Length: 1
	FarCrossConnectOrCrossConnectGroupID string `json:"farCrossConnectOrCrossConnectGroupId,omitempty"`

	// The name of the FastConnect location where this cross-connect will be installed.
	// To get a list of the available locations, see
	// [ListCrossConnectLocations](#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).
	//
	// Example: `CyrusOne, Chandler, AZ`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	LocationName *string `json:"locationName"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect
	// location, and you want this new cross-connect to be on the same router, provide the
	// OCID of that existing cross-connect or cross-connect group.
	//
	// Max Length: 255
	// Min Length: 1
	NearCrossConnectOrCrossConnectGroupID string `json:"nearCrossConnectOrCrossConnectGroupId,omitempty"`

	// The port speed for this cross-connect. To get a list of the available port speeds, see
	// [ListCrossConnectPortSpeedShapes](#/en/iaas/20160918/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).
	//
	// Example: `10 Gbps`
	//
	// Required: true
	PortSpeedShapeName *string `json:"portSpeedShapeName"`
}

// Validate validates this create cross connect details
func (m *CreateCrossConnectDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCrossConnectGroupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFarCrossConnectOrCrossConnectGroupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocationName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNearCrossConnectOrCrossConnectGroupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePortSpeedShapeName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCrossConnectDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateCrossConnectDetails) validateCrossConnectGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.CrossConnectGroupID) { // not required
		return nil
	}

	if err := validate.MinLength("crossConnectGroupId", "body", string(m.CrossConnectGroupID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("crossConnectGroupId", "body", string(m.CrossConnectGroupID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateCrossConnectDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateCrossConnectDetails) validateFarCrossConnectOrCrossConnectGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.FarCrossConnectOrCrossConnectGroupID) { // not required
		return nil
	}

	if err := validate.MinLength("farCrossConnectOrCrossConnectGroupId", "body", string(m.FarCrossConnectOrCrossConnectGroupID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("farCrossConnectOrCrossConnectGroupId", "body", string(m.FarCrossConnectOrCrossConnectGroupID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateCrossConnectDetails) validateLocationName(formats strfmt.Registry) error {

	if err := validate.Required("locationName", "body", m.LocationName); err != nil {
		return err
	}

	if err := validate.MinLength("locationName", "body", string(*m.LocationName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("locationName", "body", string(*m.LocationName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateCrossConnectDetails) validateNearCrossConnectOrCrossConnectGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.NearCrossConnectOrCrossConnectGroupID) { // not required
		return nil
	}

	if err := validate.MinLength("nearCrossConnectOrCrossConnectGroupId", "body", string(m.NearCrossConnectOrCrossConnectGroupID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("nearCrossConnectOrCrossConnectGroupId", "body", string(m.NearCrossConnectOrCrossConnectGroupID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateCrossConnectDetails) validatePortSpeedShapeName(formats strfmt.Registry) error {

	if err := validate.Required("portSpeedShapeName", "body", m.PortSpeedShapeName); err != nil {
		return err
	}

	return nil
}
