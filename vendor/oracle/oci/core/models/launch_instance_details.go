package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LaunchInstanceDetails launch instance details
// swagger:model LaunchInstanceDetails
type LaunchInstanceDetails struct {

	// The Availability Domain of the instance.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain *string `json:"availabilityDomain"`

	// The OCID of the compartment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// Details for the primary VNIC, which is automatically created and attached when
	// the instance is launched.
	//
	CreateVnicDetails *CreateVnicDetails `json:"createVnicDetails,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Example: `My bare metal instance`
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// Additional metadata key/value pairs that you provide.  They serve a similar purpose and functionality from fields in the 'metadata' object.
	//
	// They are distinguished from 'metadata' fields in that these can be nested JSON objects (whereas 'metadata' fields are string/string maps only).
	//
	// If you don't need nested metadata values, it is strongly advised to avoid using this object and use the Metadata object instead.
	//
	ExtendedMetadata map[string]interface{} `json:"extendedMetadata,omitempty"`

	// Deprecated. Instead use `hostnameLabel` in
	// [CreateVnicDetails](#/en/iaas/20160918/CreateVnicDetails/).
	// If you provide both, the values must match.
	//
	// Max Length: 63
	// Min Length: 1
	HostnameLabel string `json:"hostnameLabel,omitempty"`

	// The OCID of the image used to boot the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ImageID *string `json:"imageId"`

	// This is an advanced option.
	//
	// When an Oracle Bare Metal Cloud Services or virtual machine
	// instance boots, the iPXE firmware that runs on the instance is
	// configured to run an iPXE script to continue the boot process.
	//
	// If you want more control over the boot process, you can provide
	// your own custom iPXE script that will run when the instance boots;
	// however, you should be aware that the same iPXE script will run
	// every time an instance boots; not only after the initial
	// LaunchInstance call.
	//
	// The default iPXE script connects to the instance's local boot
	// volume over iSCSI and performs a network boot. If you use a custom iPXE
	// script and want to network-boot from the instance's local boot volume
	// over iSCSI the same way as the default iPXE script, you should use the
	// following iSCSI IP address: 169.254.0.2, and boot volume IQN:
	// iqn.2015-02.oracle.boot.
	//
	// For more information about the Bring Your Own Image feature of
	// Oracle Bare Metal Cloud Services, see
	// [Bring Your Own Image](/Content/Compute/References/bringyourownimage.htm).
	//
	// For more information about iPXE, see http://ipxe.org.
	//
	// Max Length: 10240
	// Min Length: 1
	IPXEScript string `json:"ipxeScript,omitempty"`

	// Custom metadata key/value pairs that you provide, such as the SSH public key
	// required to connect to the instance.
	//
	// A metadata service runs on every launched instance. The service is an HTTP
	// endpoint listening on 169.254.169.254. You can use the service to:
	//
	// * Provide information to [Cloud-Init](https://cloudinit.readthedocs.org/en/latest/)
	//   to be used for various system initialization tasks.
	//
	// * Get information about the instance, including the custom metadata that you
	//   provide when you launch the instance.
	//
	//  **Providing Cloud-Init Metadata**
	//
	//  You can use the following metadata key names to provide information to
	//  Cloud-Init:
	//
	//  **"ssh_authorized_keys"** - Provide one or more public SSH keys to be
	//  included in the `~/.ssh/authorized_keys` file for the default user on the
	//  instance. Use a newline character to separate multiple keys. The SSH
	//  keys must be in the format necessary for the `authorized_keys` file, as shown
	//  in the example below.
	//
	//  **"user_data"** - Provide your own base64-encoded data to be used by
	//  Cloud-Init to run custom scripts or provide custom Cloud-Init configuration. For
	//  information about how to take advantage of user data, see the
	//  [Cloud-Init Documentation](http://cloudinit.readthedocs.org/en/latest/topics/format.html).
	//
	//  **Note:** Cloud-Init does not pull this data from the `http://169.254.169.254/opc/v1/instance/metadata/`
	//  path. When the instance launches and either of these keys are provided, the key values are formatted as
	//  OpenStack metadata and copied to the following locations, which are recognized by Cloud-Init:
	//
	//  `http://169.254.169.254/openstack/latest/meta_data.json` - This JSON blob
	//  contains, among other things, the SSH keys that you provided for
	//   **"ssh_authorized_keys"**.
	//
	//  `http://169.254.169.254/openstack/latest/user_data` - Contains the
	//  base64-decoded data that you provided for **"user_data"**.
	//
	//  **Metadata Example**
	//
	//       "metadata" : {
	//          "quake_bot_level" : "Severe",
	//          "ssh_authorized_keys" : "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCZ06fccNTQfq+xubFlJ5ZR3kt+uzspdH9tXL+lAejSM1NXM+CFZev7MIxfEjas06y80ZBZ7DUTQO0GxJPeD8NCOb1VorF8M4xuLwrmzRtkoZzU16umt4y1W0Q4ifdp3IiiU0U8/WxczSXcUVZOLqkz5dc6oMHdMVpkimietWzGZ4LBBsH/LjEVY7E0V+a0sNchlVDIZcm7ErReBLcdTGDq0uLBiuChyl6RUkX1PNhusquTGwK7zc8OBXkRuubn5UKXhI3Ul9Nyk4XESkVWIGNKmw8mSpoJSjR8P9ZjRmcZVo8S+x4KVPMZKQEor== ryan.smith@company.com
	//          ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAzJSAtwEPoB3Jmr58IXrDGzLuDYkWAYg8AsLYlo6JZvKpjY1xednIcfEVQJm4T2DhVmdWhRrwQ8DmayVZvBkLt+zs2LdoAJEVimKwXcJFD/7wtH8Lnk17HiglbbbNXsemjDY0hea4JUE5CfvkIdZBITuMrfqSmA4n3VNoorXYdvtTMoGG8fxMub46RPtuxtqi9bG9Zqenordkg5FJt2mVNfQRqf83CWojcOkklUWq4CjyxaeLf5i9gv1fRoBo4QhiA8I6NCSppO8GnoV/6Ox6TNoh9BiifqGKC9VGYuC89RvUajRBTZSK2TK4DPfaT+2R+slPsFrwiT/oPEhhEK1S5Q== rsa-key-20160227",
	//          "user_data" : "SWYgeW91IGNhbiBzZWUgdGhpcywgdGhlbiBpdCB3b3JrZWQgbWF5YmUuCg=="
	//       }
	//  **Getting Metadata on the Instance**
	//
	//  To get information about your instance, connect to the instance using SSH and issue any of the
	//  following GET requests:
	//
	//      curl http://169.254.169.254/opc/v1/instance/
	//      curl http://169.254.169.254/opc/v1/instance/metadata/
	//      curl http://169.254.169.254/opc/v1/instance/metadata/<any-key-name>
	//
	//  You'll get back a response that includes all the instance information; only the metadata information; or
	//  the metadata information for the specified key name, respectively.
	//
	Metadata map[string]string `json:"metadata,omitempty"`

	// The shape of an instance. The shape determines the number of CPUs, amount of memory,
	// and other resources allocated to the instance.
	//
	// You can enumerate all available shapes by calling [ListShapes](#/en/iaas/20160918/Shape/ListShapes).
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Shape *string `json:"shape"`

	// Deprecated. Instead use `subnetId` in
	// [CreateVnicDetails](#/en/iaas/20160918/CreateVnicDetails/).
	// At least one of them is required; if you provide both, the values must match.
	//
	// Max Length: 255
	// Min Length: 1
	SubnetID string `json:"subnetId,omitempty"`
}

// Validate validates this launch instance details
func (m *LaunchInstanceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreateVnicDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostnameLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPXEScript(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShape(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnetID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LaunchInstanceDetails) validateAvailabilityDomain(formats strfmt.Registry) error {

	if err := validate.Required("availabilityDomain", "body", m.AvailabilityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *LaunchInstanceDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *LaunchInstanceDetails) validateCreateVnicDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateVnicDetails) { // not required
		return nil
	}

	if m.CreateVnicDetails != nil {

		if err := m.CreateVnicDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createVnicDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LaunchInstanceDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *LaunchInstanceDetails) validateHostnameLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.HostnameLabel) { // not required
		return nil
	}

	if err := validate.MinLength("hostnameLabel", "body", string(m.HostnameLabel), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hostnameLabel", "body", string(m.HostnameLabel), 63); err != nil {
		return err
	}

	return nil
}

func (m *LaunchInstanceDetails) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("imageId", "body", m.ImageID); err != nil {
		return err
	}

	if err := validate.MinLength("imageId", "body", string(*m.ImageID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("imageId", "body", string(*m.ImageID), 255); err != nil {
		return err
	}

	return nil
}

func (m *LaunchInstanceDetails) validateIPXEScript(formats strfmt.Registry) error {

	if swag.IsZero(m.IPXEScript) { // not required
		return nil
	}

	if err := validate.MinLength("ipxeScript", "body", string(m.IPXEScript), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ipxeScript", "body", string(m.IPXEScript), 10240); err != nil {
		return err
	}

	return nil
}

func (m *LaunchInstanceDetails) validateShape(formats strfmt.Registry) error {

	if err := validate.Required("shape", "body", m.Shape); err != nil {
		return err
	}

	if err := validate.MinLength("shape", "body", string(*m.Shape), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("shape", "body", string(*m.Shape), 255); err != nil {
		return err
	}

	return nil
}

func (m *LaunchInstanceDetails) validateSubnetID(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetID) { // not required
		return nil
	}

	if err := validate.MinLength("subnetId", "body", string(m.SubnetID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("subnetId", "body", string(m.SubnetID), 255); err != nil {
		return err
	}

	return nil
}
