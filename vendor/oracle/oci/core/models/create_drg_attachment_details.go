package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDrgAttachmentDetails create drg attachment details
// swagger:model CreateDrgAttachmentDetails
type CreateDrgAttachmentDetails struct {

	// A user-friendly name. Does not have to be unique. Avoid entering confidential information.
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the DRG.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DrgID *string `json:"drgId"`

	// The OCID of the VCN.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	VcnID *string `json:"vcnId"`
}

// Validate validates this create drg attachment details
func (m *CreateDrgAttachmentDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDrgID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVcnID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDrgAttachmentDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateDrgAttachmentDetails) validateDrgID(formats strfmt.Registry) error {

	if err := validate.Required("drgId", "body", m.DrgID); err != nil {
		return err
	}

	if err := validate.MinLength("drgId", "body", string(*m.DrgID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("drgId", "body", string(*m.DrgID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateDrgAttachmentDetails) validateVcnID(formats strfmt.Registry) error {

	if err := validate.Required("vcnId", "body", m.VcnID); err != nil {
		return err
	}

	if err := validate.MinLength("vcnId", "body", string(*m.VcnID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("vcnId", "body", string(*m.VcnID), 255); err != nil {
		return err
	}

	return nil
}
