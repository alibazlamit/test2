package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image A boot disk image for launching an instance. For more information, see
// [Overview of the Compute Service](/Content/Compute/Concepts/computeoverview.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model Image
type Image struct {

	// The OCID of the image originally used to launch the instance.
	// Max Length: 255
	// Min Length: 1
	BaseImageID string `json:"baseImageId,omitempty"`

	// The OCID of the compartment containing the instance you want to use as the basis for the image.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// Whether instances launched with this image can be used to create new images.
	// For example, you cannot create an image of an Oracle Database instance.
	//
	// Example: `true`
	//
	// Required: true
	CreateImageAllowed *bool `json:"createImageAllowed"`

	// A user-friendly name for the image. It does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	// You cannot use an Oracle-provided image name as a custom image name.
	//
	// Example: `My custom Oracle Linux image`
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the image.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// lifecycle state
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The image's operating system.
	//
	// Example: `Oracle Linux`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	OperatingSystem *string `json:"operatingSystem"`

	// The image's operating system version.
	//
	// Example: `7.2`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	OperatingSystemVersion *string `json:"operatingSystemVersion"`

	// The date and time the image was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseImageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreateImageAllowed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperatingSystemVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) validateBaseImageID(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseImageID) { // not required
		return nil
	}

	if err := validate.MinLength("baseImageId", "body", string(m.BaseImageID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("baseImageId", "body", string(m.BaseImageID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateCreateImageAllowed(formats strfmt.Registry) error {

	if err := validate.Required("createImageAllowed", "body", m.CreateImageAllowed); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var imageTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","IMPORTING","AVAILABLE","EXPORTING","DISABLED","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeLifecycleStatePropEnum = append(imageTypeLifecycleStatePropEnum, v)
	}
}

const (
	// ImageLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	ImageLifecycleStatePROVISIONING string = "PROVISIONING"
	// ImageLifecycleStateIMPORTING captures enum value "IMPORTING"
	ImageLifecycleStateIMPORTING string = "IMPORTING"
	// ImageLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	ImageLifecycleStateAVAILABLE string = "AVAILABLE"
	// ImageLifecycleStateEXPORTING captures enum value "EXPORTING"
	ImageLifecycleStateEXPORTING string = "EXPORTING"
	// ImageLifecycleStateDISABLED captures enum value "DISABLED"
	ImageLifecycleStateDISABLED string = "DISABLED"
	// ImageLifecycleStateDELETED captures enum value "DELETED"
	ImageLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *Image) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateOperatingSystem(formats strfmt.Registry) error {

	if err := validate.Required("operatingSystem", "body", m.OperatingSystem); err != nil {
		return err
	}

	if err := validate.MinLength("operatingSystem", "body", string(*m.OperatingSystem), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("operatingSystem", "body", string(*m.OperatingSystem), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateOperatingSystemVersion(formats strfmt.Registry) error {

	if err := validate.Required("operatingSystemVersion", "body", m.OperatingSystemVersion); err != nil {
		return err
	}

	if err := validate.MinLength("operatingSystemVersion", "body", string(*m.OperatingSystemVersion), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("operatingSystemVersion", "body", string(*m.OperatingSystemVersion), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}
