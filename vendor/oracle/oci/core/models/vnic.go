package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vnic A virtual network interface card. Each VNIC resides in a subnet in a VCN.
// An instance attaches to a VNIC to obtain a network connection into the VCN
// through that subnet. Each instance has a *primary VNIC* that is automatically
// created and attached during launch. You can add *secondary VNICs* to an
// instance after it's launched. For more information, see
// [Managing Virtual Network Interface Cards (VNICs)](/Content/Network/Tasks/managingVNICs.htm).
//
// Each VNIC has a *primary private IP* that is automatically assigned during launch.
// You can add *secondary private IPs* to a VNIC after it's created. For more
// information, see [CreatePrivateIp](#/en/iaas/20160918/PrivateIp/CreatePrivateIp) and
// [Managing IP Addresses](/Content/Network/Tasks/managingIPaddresses.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model Vnic
type Vnic struct {

	// The VNIC's Availability Domain.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain *string `json:"availabilityDomain"`

	// The OCID of the compartment containing the VNIC.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The hostname for the VNIC's primary private IP. Used for DNS. The value is the hostname
	// portion of the primary private IP's fully qualified domain name (FQDN)
	// (e.g., `bminstance-1` in FQDN `bminstance-1.subnet123.vcn1.oraclevcn.com`).
	// Must be unique across all VNICs in the subnet and comply with
	// [RFC 952](https://tools.ietf.org/html/rfc952) and
	// [RFC 1123](https://tools.ietf.org/html/rfc1123).
	//
	// For more information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// Example: `bminstance-1`
	//
	// Max Length: 63
	// Min Length: 1
	HostnameLabel string `json:"hostnameLabel,omitempty"`

	// The OCID of the VNIC.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// Whether the VNIC is the primary VNIC (the VNIC that is automatically created
	// and attached during instance launch).
	//
	IsPrimary bool `json:"isPrimary,omitempty"`

	// The current state of the VNIC.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The MAC address of the VNIC.
	//
	// Example: `00:00:17:B6:4D:DD`
	//
	// Max Length: 32
	// Min Length: 1
	MacAddress string `json:"macAddress,omitempty"`

	// The private IP address of the primary `privateIp` object on the VNIC.
	// The address is within the CIDR of the VNIC's subnet.
	//
	// Example: `10.0.3.3`
	//
	// Required: true
	PrivateIP *string `json:"privateIp"`

	// The public IP address of the VNIC, if one is assigned.
	//
	PublicIP string `json:"publicIp,omitempty"`

	// The OCID of the subnet the VNIC is in.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	SubnetID *string `json:"subnetId"`

	// The date and time the VNIC was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this vnic
func (m *Vnic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostnameLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMacAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnetID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vnic) validateAvailabilityDomain(formats strfmt.Registry) error {

	if err := validate.Required("availabilityDomain", "body", m.AvailabilityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateHostnameLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.HostnameLabel) { // not required
		return nil
	}

	if err := validate.MinLength("hostnameLabel", "body", string(m.HostnameLabel), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hostnameLabel", "body", string(m.HostnameLabel), 63); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var vnicTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","AVAILABLE","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vnicTypeLifecycleStatePropEnum = append(vnicTypeLifecycleStatePropEnum, v)
	}
}

const (
	// VnicLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	VnicLifecycleStatePROVISIONING string = "PROVISIONING"
	// VnicLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	VnicLifecycleStateAVAILABLE string = "AVAILABLE"
	// VnicLifecycleStateTERMINATING captures enum value "TERMINATING"
	VnicLifecycleStateTERMINATING string = "TERMINATING"
	// VnicLifecycleStateTERMINATED captures enum value "TERMINATED"
	VnicLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *Vnic) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vnicTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Vnic) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateMacAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.MacAddress) { // not required
		return nil
	}

	if err := validate.MinLength("macAddress", "body", string(m.MacAddress), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("macAddress", "body", string(m.MacAddress), 32); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validatePrivateIP(formats strfmt.Registry) error {

	if err := validate.Required("privateIp", "body", m.PrivateIP); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateSubnetID(formats strfmt.Registry) error {

	if err := validate.Required("subnetId", "body", m.SubnetID); err != nil {
		return err
	}

	if err := validate.MinLength("subnetId", "body", string(*m.SubnetID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("subnetId", "body", string(*m.SubnetID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}
