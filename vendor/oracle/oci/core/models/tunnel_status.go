package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TunnelStatus Specific connection details for an IPSec tunnel.
//
// swagger:model TunnelStatus
type TunnelStatus struct {

	// The IP address of Oracle's VPN headend.
	//
	// Example: `129.146.17.50`
	//
	// Required: true
	// Max Length: 46
	// Min Length: 1
	IPAddress *string `json:"ipAddress"`

	// The tunnel's current state.
	LifecycleState string `json:"lifecycleState,omitempty"`

	// The date and time the IPSec connection was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`

	// When the state of the tunnel last changed, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeStateModified strfmt.DateTime `json:"timeStateModified,omitempty"`
}

// Validate validates this tunnel status
func (m *TunnelStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TunnelStatus) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	if err := validate.MinLength("ipAddress", "body", string(*m.IPAddress), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ipAddress", "body", string(*m.IPAddress), 46); err != nil {
		return err
	}

	return nil
}

var tunnelStatusTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN","DOWN_FOR_MAINTENANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelStatusTypeLifecycleStatePropEnum = append(tunnelStatusTypeLifecycleStatePropEnum, v)
	}
}

const (
	// TunnelStatusLifecycleStateUP captures enum value "UP"
	TunnelStatusLifecycleStateUP string = "UP"
	// TunnelStatusLifecycleStateDOWN captures enum value "DOWN"
	TunnelStatusLifecycleStateDOWN string = "DOWN"
	// TunnelStatusLifecycleStateDOWNFORMAINTENANCE captures enum value "DOWN_FOR_MAINTENANCE"
	TunnelStatusLifecycleStateDOWNFORMAINTENANCE string = "DOWN_FOR_MAINTENANCE"
)

// prop value enum
func (m *TunnelStatus) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tunnelStatusTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TunnelStatus) validateLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	return nil
}
