package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// VolumeAttachment A base object for all types of attachments between a storage volume and an instance.
// For specific details about iSCSI attachments, see
// [IScsiVolumeAttachment Reference](#/en/iaas/20160918/IScsiVolumeAttachment/).
//
// For general information about volume attachments, see
// [Overview of Block Volume Storage](/Content/Block/Concepts/overview.htm).
//
// swagger:discriminator VolumeAttachment attachmentType
type VolumeAttachment interface {
	runtime.Validatable

	// The type of volume attachment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AttachmentType() string
	SetAttachmentType(string)

	// The Availability Domain of an instance.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain() *string
	SetAvailabilityDomain(*string)

	// The OCID of the compartment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID() *string
	SetCompartmentID(*string)

	// A user-friendly name. Does not have to be unique, and it cannot be changed.
	// Avoid entering confidential information.
	//
	// Example: `My volume attachment`
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName() string
	SetDisplayName(string)

	// The OCID of the volume attachment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID() *string
	SetID(*string)

	// The OCID of the instance the volume is attached to.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	InstanceID() *string
	SetInstanceID(*string)

	// The current state of the volume attachment.
	// Required: true
	LifecycleState() *string
	SetLifecycleState(*string)

	// The date and time the volume was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated() *strfmt.DateTime
	SetTimeCreated(*strfmt.DateTime)

	// The OCID of the volume.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	VolumeID() *string
	SetVolumeID(*string)
}

// UnmarshalVolumeAttachmentSlice unmarshals polymorphic slices of VolumeAttachment
func UnmarshalVolumeAttachmentSlice(reader io.Reader, consumer runtime.Consumer) ([]VolumeAttachment, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []VolumeAttachment
	for _, element := range elements {
		obj, err := unmarshalVolumeAttachment(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalVolumeAttachment unmarshals polymorphic VolumeAttachment
func UnmarshalVolumeAttachment(reader io.Reader, consumer runtime.Consumer) (VolumeAttachment, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalVolumeAttachment(data, consumer)
}

func unmarshalVolumeAttachment(data []byte, consumer runtime.Consumer) (VolumeAttachment, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the attachmentType property.
	var getType struct {
		AttachmentType string `json:"attachmentType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("attachmentType", "body", getType.AttachmentType); err != nil {
		return nil, err
	}

	// The value of attachmentType is used to determine which type to create and unmarshal the data into
	switch getType.AttachmentType {
	case DiscriminatorTypeValues["IScsiVolumeAttachment"]:
		var result IScsiVolumeAttachment
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid attachmentType value: %q", getType.AttachmentType)

}
