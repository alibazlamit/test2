package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ImageSourceViaObjectStorageTupleDetails image source via object storage tuple details
// swagger:model ImageSourceViaObjectStorageTupleDetails
type ImageSourceViaObjectStorageTupleDetails struct {

	// The Object Storage Service bucket for the image.
	// Required: true
	BucketName *string `json:"bucketName"`

	// The Object Storage Service namespace for the image.
	// Required: true
	NamespaceName *string `json:"namespaceName"`

	// The Object Storage Service name for the image.
	// Required: true
	ObjectName *string `json:"objectName"`
}

func (m *ImageSourceViaObjectStorageTupleDetails) SourceType() string {
	return DiscriminatorTypeValues["ImageSourceViaObjectStorageTupleDetails"]
}
func (m *ImageSourceViaObjectStorageTupleDetails) SetSourceType(val string) {

}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *ImageSourceViaObjectStorageTupleDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		SourceType string `json:"sourceType"`

		// The Object Storage Service bucket for the image.
		// Required: true
		BucketName *string `json:"bucketName"`

		// The Object Storage Service namespace for the image.
		// Required: true
		NamespaceName *string `json:"namespaceName"`

		// The Object Storage Service name for the image.
		// Required: true
		ObjectName *string `json:"objectName"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.BucketName = data.BucketName
	m.NamespaceName = data.NamespaceName
	m.ObjectName = data.ObjectName

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m ImageSourceViaObjectStorageTupleDetails) MarshalJSON() ([]byte, error) {
	var data struct {
		SourceType string `json:"sourceType"`

		// The Object Storage Service bucket for the image.
		// Required: true
		BucketName *string `json:"bucketName"`

		// The Object Storage Service namespace for the image.
		// Required: true
		NamespaceName *string `json:"namespaceName"`

		// The Object Storage Service name for the image.
		// Required: true
		ObjectName *string `json:"objectName"`
	}

	data.BucketName = m.BucketName
	data.NamespaceName = m.NamespaceName
	data.ObjectName = m.ObjectName
	data.SourceType = DiscriminatorTypeValues["ImageSourceViaObjectStorageTupleDetails"]
	return json.Marshal(data)
}

// Validate validates this image source via object storage tuple details
func (m *ImageSourceViaObjectStorageTupleDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateBucketName(formats strfmt.Registry) error {

	if err := validate.Required("bucketName", "body", m.BucketName); err != nil {
		return err
	}

	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateNamespaceName(formats strfmt.Registry) error {

	if err := validate.Required("namespaceName", "body", m.NamespaceName); err != nil {
		return err
	}

	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateObjectName(formats strfmt.Registry) error {

	if err := validate.Required("objectName", "body", m.ObjectName); err != nil {
		return err
	}

	return nil
}
