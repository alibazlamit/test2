package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDhcpDetails update dhcp details
// swagger:model UpdateDhcpDetails
type UpdateDhcpDetails struct {

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	Options []DhcpOption `json:"options"`
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *UpdateDhcpDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		DisplayName string `json:"displayName,omitempty"`

		Options json.RawMessage `json:"options,omitempty"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var options []DhcpOption

	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	untypedObj := make(map[string]interface{})
	if err := dec.Decode(&untypedObj); err != nil {
		return err
	}
	if untypedOptions, ok := untypedObj["options"]; ok {
		if slcOptions, ok := untypedOptions.([]interface{}); ok {
			for _, slcEl := range slcOptions {
				slcJSON, _ := json.Marshal(slcEl)
				slcObj, err := UnmarshalDhcpOption(bytes.NewBuffer(slcJSON), runtime.JSONConsumer())
				if err != nil && err != io.EOF {
					return err
				}
				options = append(options, slcObj)
			}
		}
	}

	var result UpdateDhcpDetails
	result.DisplayName = data.DisplayName
	result.Options = options
	*m = result
	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m UpdateDhcpDetails) MarshalJSON() ([]byte, error) {
	var b1, b2 []byte
	var err error
	b1, err = json.Marshal(struct {
		DisplayName string `json:"displayName,omitempty"`
	}{
		DisplayName: m.DisplayName,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Options []DhcpOption `json:"options,omitempty"`
	}{
		Options: m.Options,
	})
	if err != nil {
		return nil, err
	}
	return swag.ConcatJSON(b1, b2), nil
}

// Validate validates this update dhcp details
func (m *UpdateDhcpDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDhcpDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *UpdateDhcpDetails) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if err := validate.UniqueItems("options", "body", m.Options); err != nil {
		return err
	}

	for i := 0; i < len(m.Options); i++ {

		if err := m.Options[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
