package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngressSecurityRule A rule for allowing inbound IP packets.
// swagger:model IngressSecurityRule
type IngressSecurityRule struct {

	// Optional and valid only for ICMP. Use to specify a particular ICMP type and code
	// as defined in
	// [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml).
	// If you specify ICMP as the protocol but omit this object, then all ICMP types and
	// codes are allowed. If you do provide this object, the type is required and the code is optional.
	// To enable MTU negotiation for ingress internet traffic, make sure to allow type 3 ("Destination
	// Unreachable") code 4 ("Fragmentation Needed and Don't Fragment was Set"). If you need to specify
	// multiple codes for a single type, create a separate security list rule for each.
	//
	IcmpOptions *IcmpOptions `json:"icmpOptions,omitempty"`

	// A stateless rule allows traffic in one direction. Remember to add a corresponding
	// stateless rule in the other direction if you need to support bidirectional traffic. For
	// example, if ingress traffic allows TCP destination port 80, there should be an egress
	// rule to allow TCP source port 80. Defaults to false, which means the rule is stateful
	// and a corresponding rule is not necessary for bidirectional traffic.
	//
	IsStateless bool `json:"isStateless,omitempty"`

	// The transport protocol. Specify either `all` or an IPv4 protocol number as
	// defined in
	// [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
	// Options are supported only for ICMP ("1"), TCP ("6"), and UDP ("17").
	//
	// Required: true
	Protocol *string `json:"protocol"`

	// The source CIDR block for the ingress rule. This is the range of IP addresses that a
	// packet coming into the instance can come from.
	//
	// Required: true
	Source *string `json:"source"`

	// Optional and valid only for TCP. Use to specify particular destination ports for TCP rules.
	// If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
	//
	TCPOptions *TCPOptions `json:"tcpOptions,omitempty"`

	// Optional and valid only for UDP. Use to specify particular destination ports for UDP rules.
	// If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
	//
	UDPOptions *UDPOptions `json:"udpOptions,omitempty"`
}

// Validate validates this ingress security rule
func (m *IngressSecurityRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIcmpOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTCPOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUDPOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngressSecurityRule) validateIcmpOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.IcmpOptions) { // not required
		return nil
	}

	if m.IcmpOptions != nil {

		if err := m.IcmpOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icmpOptions")
			}
			return err
		}
	}

	return nil
}

func (m *IngressSecurityRule) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *IngressSecurityRule) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *IngressSecurityRule) validateTCPOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.TCPOptions) { // not required
		return nil
	}

	if m.TCPOptions != nil {

		if err := m.TCPOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcpOptions")
			}
			return err
		}
	}

	return nil
}

func (m *IngressSecurityRule) validateUDPOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.UDPOptions) { // not required
		return nil
	}

	if m.UDPOptions != nil {

		if err := m.UDPOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udpOptions")
			}
			return err
		}
	}

	return nil
}
