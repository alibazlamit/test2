package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPSecConnection A connection between a DRG and CPE. This connection consists of multiple IPSec
// tunnels. Creating this connection is one of the steps required when setting up
// an IPSec VPN. For more information, see
// [Overview of the Networking Service](/Content/Network/Concepts/overview.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model IPSecConnection
type IPSecConnection struct {

	// The OCID of the compartment containing the IPSec connection.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// The OCID of the CPE.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CpeID *string `json:"cpeId"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the DRG.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DrgID *string `json:"drgId"`

	// The IPSec connection's Oracle ID (OCID).
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// The IPSec connection's current state.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// Static routes to the CPE. At least one route must be included. The CIDR must not be a
	// multicast address or class E address.
	//
	// Example: `10.0.1.0/24`
	//
	// Required: true
	// Unique: true
	StaticRoutes []string `json:"staticRoutes"`

	// The date and time the IPSec connection was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`
}

// Validate validates this IP sec connection
func (m *IPSecConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCpeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDrgID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStaticRoutes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPSecConnection) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *IPSecConnection) validateCpeID(formats strfmt.Registry) error {

	if err := validate.Required("cpeId", "body", m.CpeID); err != nil {
		return err
	}

	if err := validate.MinLength("cpeId", "body", string(*m.CpeID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("cpeId", "body", string(*m.CpeID), 255); err != nil {
		return err
	}

	return nil
}

func (m *IPSecConnection) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *IPSecConnection) validateDrgID(formats strfmt.Registry) error {

	if err := validate.Required("drgId", "body", m.DrgID); err != nil {
		return err
	}

	if err := validate.MinLength("drgId", "body", string(*m.DrgID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("drgId", "body", string(*m.DrgID), 255); err != nil {
		return err
	}

	return nil
}

func (m *IPSecConnection) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var ipSecConnectionTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","AVAILABLE","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipSecConnectionTypeLifecycleStatePropEnum = append(ipSecConnectionTypeLifecycleStatePropEnum, v)
	}
}

const (
	// IPSecConnectionLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	IPSecConnectionLifecycleStatePROVISIONING string = "PROVISIONING"
	// IPSecConnectionLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	IPSecConnectionLifecycleStateAVAILABLE string = "AVAILABLE"
	// IPSecConnectionLifecycleStateTERMINATING captures enum value "TERMINATING"
	IPSecConnectionLifecycleStateTERMINATING string = "TERMINATING"
	// IPSecConnectionLifecycleStateTERMINATED captures enum value "TERMINATED"
	IPSecConnectionLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *IPSecConnection) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipSecConnectionTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPSecConnection) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *IPSecConnection) validateStaticRoutes(formats strfmt.Registry) error {

	if err := validate.Required("staticRoutes", "body", m.StaticRoutes); err != nil {
		return err
	}

	if err := validate.UniqueItems("staticRoutes", "body", m.StaticRoutes); err != nil {
		return err
	}

	for i := 0; i < len(m.StaticRoutes); i++ {

		if err := validate.MaxLength("staticRoutes"+"."+strconv.Itoa(i), "body", string(m.StaticRoutes[i]), 10); err != nil {
			return err
		}

	}

	return nil
}
