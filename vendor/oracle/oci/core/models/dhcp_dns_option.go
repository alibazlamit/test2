package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DhcpDNSOption DHCP option for specifying how DNS (hostname resolution) is handled in the subnets in the VCN.
// For more information, see
// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
//
// swagger:model DhcpDnsOption
type DhcpDNSOption struct {

	// If you set `serverType` to `CustomDnsServer`, specify the IP address
	// of at least one DNS server of your choice (three maximum).
	//
	// Max Items: 3
	CustomDNSServers []string `json:"customDnsServers"`

	// - **VcnLocal:** Reserved for future use.
	//
	// - **VcnLocalPlusInternet:** Also referred to as "Internet and VCN Resolver".
	// Instances can resolve internet hostnames (no Internet Gateway is required),
	// and can resolve hostnames of instances in the VCN. This is the default
	// value in the default set of DHCP options in the VCN. For the Internet and
	// VCN Resolver to work across the VCN, there must also be a DNS label set for
	// the VCN, a DNS label set for each subnet, and a hostname for each instance.
	// The Internet and VCN Resolver also enables reverse DNS lookup, which lets
	// you determine the hostname corresponding to the private IP address. For more
	// information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// - **CustomDnsServer:** Instances use a DNS server of your choice (three maximum).
	//
	// Required: true
	ServerType *string `json:"serverType"`
}

func (m *DhcpDNSOption) Type() string {
	//return "DhcpDnsOption"
	return DiscriminatorTypeValues["DhcpDnsOption"]
}
func (m *DhcpDNSOption) SetType(val string) {

}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *DhcpDNSOption) UnmarshalJSON(raw []byte) error {
	var data struct {
		Type string `json:"type"`

		// If you set `serverType` to `CustomDnsServer`, specify the IP address
		// of at least one DNS server of your choice (three maximum).
		//
		// Max Items: 3
		CustomDNSServers []string `json:"customDnsServers"`

		// - **VcnLocal:** Reserved for future use.
		//
		// - **VcnLocalPlusInternet:** Also referred to as "Internet and VCN Resolver".
		// Instances can resolve internet hostnames (no Internet Gateway is required),
		// and can resolve hostnames of instances in the VCN. This is the default
		// value in the default set of DHCP options in the VCN. For the Internet and
		// VCN Resolver to work across the VCN, there must also be a DNS label set for
		// the VCN, a DNS label set for each subnet, and a hostname for each instance.
		// The Internet and VCN Resolver also enables reverse DNS lookup, which lets
		// you determine the hostname corresponding to the private IP address. For more
		// information, see
		// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
		//
		// - **CustomDnsServer:** Instances use a DNS server of your choice (three maximum).
		//
		// Required: true
		ServerType *string `json:"serverType"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.CustomDNSServers = data.CustomDNSServers
	m.ServerType = data.ServerType

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m DhcpDNSOption) MarshalJSON() ([]byte, error) {
	var data struct {
		Type string `json:"type"`

		// If you set `serverType` to `CustomDnsServer`, specify the IP address
		// of at least one DNS server of your choice (three maximum).
		//
		// Max Items: 3
		CustomDNSServers []string `json:"customDnsServers"`

		// - **VcnLocal:** Reserved for future use.
		//
		// - **VcnLocalPlusInternet:** Also referred to as "Internet and VCN Resolver".
		// Instances can resolve internet hostnames (no Internet Gateway is required),
		// and can resolve hostnames of instances in the VCN. This is the default
		// value in the default set of DHCP options in the VCN. For the Internet and
		// VCN Resolver to work across the VCN, there must also be a DNS label set for
		// the VCN, a DNS label set for each subnet, and a hostname for each instance.
		// The Internet and VCN Resolver also enables reverse DNS lookup, which lets
		// you determine the hostname corresponding to the private IP address. For more
		// information, see
		// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
		//
		// - **CustomDnsServer:** Instances use a DNS server of your choice (three maximum).
		//
		// Required: true
		ServerType *string `json:"serverType"`
	}

	data.CustomDNSServers = m.CustomDNSServers
	data.ServerType = m.ServerType
	//data.Type = "DhcpDnsOption"
	data.Type = DiscriminatorTypeValues["DhcpDnsOption"]
	return json.Marshal(data)
}

// Validate validates this dhcp Dns option
func (m *DhcpDNSOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DhcpDNSOption) validateCustomDNSServers(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomDNSServers) { // not required
		return nil
	}

	iCustomDNSServersSize := int64(len(m.CustomDNSServers))

	if err := validate.MaxItems("customDnsServers", "body", iCustomDNSServersSize, 3); err != nil {
		return err
	}

	return nil
}

var dhcpDnsOptionTypeServerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VcnLocal","VcnLocalPlusInternet","CustomDnsServer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dhcpDnsOptionTypeServerTypePropEnum = append(dhcpDnsOptionTypeServerTypePropEnum, v)
	}
}

// property enum
func (m *DhcpDNSOption) validateServerTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dhcpDnsOptionTypeServerTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DhcpDNSOption) validateServerType(formats strfmt.Registry) error {

	if err := validate.Required("serverType", "body", m.ServerType); err != nil {
		return err
	}

	// value enum
	if err := m.validateServerTypeEnum("serverType", "body", *m.ServerType); err != nil {
		return err
	}

	return nil
}
