package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// RouteRule A mapping between a destination IP address range and a virtual device to route matching
// packets to (a target).
//
// swagger:model RouteRule
type RouteRule struct {

	// A destination IP address range in CIDR notation. Matching packets will
	// be routed to the indicated network entity (the target).
	//
	// Example: `0.0.0.0/0`
	//
	// Required: true
	// Max Length: 18
	// Min Length: 9
	CidrBlock *string `json:"cidrBlock"`

	// The OCID for the route rule's target.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	NetworkEntityID *string `json:"networkEntityId"`
}

// Validate validates this route rule
func (m *RouteRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidrBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkEntityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteRule) validateCidrBlock(formats strfmt.Registry) error {

	if err := validate.Required("cidrBlock", "body", m.CidrBlock); err != nil {
		return err
	}

	if err := validate.MinLength("cidrBlock", "body", string(*m.CidrBlock), 9); err != nil {
		return err
	}

	if err := validate.MaxLength("cidrBlock", "body", string(*m.CidrBlock), 18); err != nil {
		return err
	}

	return nil
}

func (m *RouteRule) validateNetworkEntityID(formats strfmt.Registry) error {

	if err := validate.Required("networkEntityId", "body", m.NetworkEntityID); err != nil {
		return err
	}

	if err := validate.MinLength("networkEntityId", "body", string(*m.NetworkEntityID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("networkEntityId", "body", string(*m.NetworkEntityID), 255); err != nil {
		return err
	}

	return nil
}
