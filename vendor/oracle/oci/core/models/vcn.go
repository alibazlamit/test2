package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vcn A Virtual Cloud Network (VCN). For more information, see
// [Overview of the Networking Service](/Content/Network/Concepts/overview.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model Vcn
type Vcn struct {

	// The CIDR IP address block of the VCN.
	//
	// Example: `172.16.0.0/16`
	//
	// Required: true
	// Max Length: 32
	// Min Length: 1
	CidrBlock *string `json:"cidrBlock"`

	// The OCID of the compartment containing the VCN.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// The OCID for the VCN's default set of DHCP options.
	//
	// Max Length: 255
	// Min Length: 1
	DefaultDhcpOptionsID string `json:"defaultDhcpOptionsId,omitempty"`

	// The OCID for the VCN's default route table.
	// Max Length: 255
	// Min Length: 1
	DefaultRouteTableID string `json:"defaultRouteTableId,omitempty"`

	// The OCID for the VCN's default security list.
	// Max Length: 255
	// Min Length: 1
	DefaultSecurityListID string `json:"defaultSecurityListId,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// A DNS label for the VCN, used in conjunction with the VNIC's hostname and
	// subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC
	// within this subnet (e.g., `bminstance-1.subnet123.vcn1.oraclevcn.com`).
	// Must be an alphanumeric string that begins with a letter.
	// The value cannot be changed.
	//
	// The absence of this parameter means the Internet and VCN Resolver will
	// not work for this VCN.
	//
	// For more information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// Example: `vcn1`
	//
	// Max Length: 15
	// Min Length: 1
	DNSLabel string `json:"dnsLabel,omitempty"`

	// The VCN's Oracle ID (OCID).
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// The VCN's current state.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The date and time the VCN was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`

	// The VCN's domain name, which consists of the VCN's DNS label, and the
	// `oraclevcn.com` domain.
	//
	// For more information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// Example: `vcn1.oraclevcn.com`
	//
	// Max Length: 253
	// Min Length: 1
	VcnDomainName string `json:"vcnDomainName,omitempty"`
}

// Validate validates this vcn
func (m *Vcn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidrBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultDhcpOptionsID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultRouteTableID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultSecurityListID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDNSLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVcnDomainName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vcn) validateCidrBlock(formats strfmt.Registry) error {

	if err := validate.Required("cidrBlock", "body", m.CidrBlock); err != nil {
		return err
	}

	if err := validate.MinLength("cidrBlock", "body", string(*m.CidrBlock), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("cidrBlock", "body", string(*m.CidrBlock), 32); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateDefaultDhcpOptionsID(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultDhcpOptionsID) { // not required
		return nil
	}

	if err := validate.MinLength("defaultDhcpOptionsId", "body", string(m.DefaultDhcpOptionsID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("defaultDhcpOptionsId", "body", string(m.DefaultDhcpOptionsID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateDefaultRouteTableID(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultRouteTableID) { // not required
		return nil
	}

	if err := validate.MinLength("defaultRouteTableId", "body", string(m.DefaultRouteTableID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("defaultRouteTableId", "body", string(m.DefaultRouteTableID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateDefaultSecurityListID(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultSecurityListID) { // not required
		return nil
	}

	if err := validate.MinLength("defaultSecurityListId", "body", string(m.DefaultSecurityListID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("defaultSecurityListId", "body", string(m.DefaultSecurityListID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateDNSLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSLabel) { // not required
		return nil
	}

	if err := validate.MinLength("dnsLabel", "body", string(m.DNSLabel), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("dnsLabel", "body", string(m.DNSLabel), 15); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var vcnTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","AVAILABLE","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vcnTypeLifecycleStatePropEnum = append(vcnTypeLifecycleStatePropEnum, v)
	}
}

const (
	// VcnLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	VcnLifecycleStatePROVISIONING string = "PROVISIONING"
	// VcnLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	VcnLifecycleStateAVAILABLE string = "AVAILABLE"
	// VcnLifecycleStateTERMINATING captures enum value "TERMINATING"
	VcnLifecycleStateTERMINATING string = "TERMINATING"
	// VcnLifecycleStateTERMINATED captures enum value "TERMINATED"
	VcnLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *Vcn) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vcnTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Vcn) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Vcn) validateVcnDomainName(formats strfmt.Registry) error {

	if swag.IsZero(m.VcnDomainName) { // not required
		return nil
	}

	if err := validate.MinLength("vcnDomainName", "body", string(m.VcnDomainName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("vcnDomainName", "body", string(m.VcnDomainName), 253); err != nil {
		return err
	}

	return nil
}
