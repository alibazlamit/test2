package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachVnicDetails attach vnic details
// swagger:model AttachVnicDetails
type AttachVnicDetails struct {

	// Details for creating a new VNIC.
	//
	// Required: true
	CreateVnicDetails *CreateVnicDetails `json:"createVnicDetails"`

	// A user-friendly name for the attachment. Does not have to be unique, and it cannot be changed.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	InstanceID *string `json:"instanceId"`
}

// Validate validates this attach vnic details
func (m *AttachVnicDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateVnicDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachVnicDetails) validateCreateVnicDetails(formats strfmt.Registry) error {

	if err := validate.Required("createVnicDetails", "body", m.CreateVnicDetails); err != nil {
		return err
	}

	if m.CreateVnicDetails != nil {

		if err := m.CreateVnicDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createVnicDetails")
			}
			return err
		}
	}

	return nil
}

func (m *AttachVnicDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachVnicDetails) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID), 255); err != nil {
		return err
	}

	return nil
}
