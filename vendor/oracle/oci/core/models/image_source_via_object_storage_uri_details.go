package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ImageSourceViaObjectStorageURIDetails image source via object storage Uri details
// swagger:model ImageSourceViaObjectStorageUriDetails
type ImageSourceViaObjectStorageURIDetails struct {

	// The Object Storage Service URL for the image.
	// Required: true
	SourceURI *string `json:"sourceUri"`
}

func (m *ImageSourceViaObjectStorageURIDetails) SourceType() string {
	return DiscriminatorTypeValues["ImageSourceViaObjectStorageUriDetails"]
}
func (m *ImageSourceViaObjectStorageURIDetails) SetSourceType(val string) {

}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *ImageSourceViaObjectStorageURIDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		SourceType string `json:"sourceType"`

		// The Object Storage Service URL for the image.
		// Required: true
		SourceURI *string `json:"sourceUri"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.SourceURI = data.SourceURI

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m ImageSourceViaObjectStorageURIDetails) MarshalJSON() ([]byte, error) {
	var data struct {
		SourceType string `json:"sourceType"`

		// The Object Storage Service URL for the image.
		// Required: true
		SourceURI *string `json:"sourceUri"`
	}

	data.SourceURI = m.SourceURI
	data.SourceType = DiscriminatorTypeValues["ImageSourceViaObjectStorageUriDetails"]
	return json.Marshal(data)
}

// Validate validates this image source via object storage Uri details
func (m *ImageSourceViaObjectStorageURIDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageSourceViaObjectStorageURIDetails) validateSourceURI(formats strfmt.Registry) error {

	if err := validate.Required("sourceUri", "body", m.SourceURI); err != nil {
		return err
	}

	return nil
}
