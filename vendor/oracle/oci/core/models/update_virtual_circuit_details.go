package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateVirtualCircuitDetails update virtual circuit details
// swagger:model UpdateVirtualCircuitDetails
type UpdateVirtualCircuitDetails struct {

	// The provisioned data rate of the connection. To get a list of the
	// available bandwidth levels (i.e., shapes), see
	// [ListVirtualCircuitBandwidthShapes](#/en/iaas/20160918/VirtualCircuitBandwidthShape/ListVirtualCircuitBandwidthShapes).
	//
	// To be updated only by the customer who owns the virtual circuit.
	//
	BandwidthShapeName string `json:"bandwidthShapeName,omitempty"`

	// An array of mappings, each containing properties for a cross-connect or
	// cross-connect group associated with this virtual circuit.
	//
	// The customer and provider can update different properties in the mapping
	// depending on the situation. See the description of the
	// [CrossConnectMapping](#/en/iaas/20160918/CrossConnectMapping/).
	//
	// Maximum: 2
	// Minimum: 0
	CrossConnectMappings []*CrossConnectMapping `json:"crossConnectMappings"`

	// The BGP ASN of the network at the other end of the BGP
	// session from Oracle.
	//
	// If the BGP session is from the customer's edge router to Oracle, the
	// required value is the customer's ASN, and it can be updated only
	// by the customer.
	//
	// If the BGP session is from the provider's edge router to Oracle, the
	// required value is the provider's ASN, and it can be updated only
	// by the provider.
	//
	CustomerBgpAsn int64 `json:"customerBgpAsn,omitempty"`

	// A user-friendly name. Does not have to be unique.
	// Avoid entering confidential information.
	//
	// To be updated only by the customer who owns the virtual circuit.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the [Dynamic Routing Gateway (DRG)](#/en/iaas/20160918/Drg)
	// that this virtual circuit uses.
	//
	// To be updated only by the customer who owns the virtual circuit.
	//
	// Max Length: 255
	// Min Length: 1
	GatewayID string `json:"gatewayId,omitempty"`

	// The provider's state in relation to this virtual circuit. Relevant only
	// if the customer is using FastConnect via a provider.  ACTIVE
	// means the provider has provisioned the virtual circuit from their
	// end. INACTIVE means the provider has not yet provisioned the virtual
	// circuit, or has de-provisioned it.
	//
	// To be updated only by the provider.
	//
	ProviderState string `json:"providerState,omitempty"`

	// Provider-supplied reference information about this virtual circuit.
	// Relevant only if the customer is using FastConnect via a provider.
	//
	// To be updated only by the provider.
	//
	ReferenceComment string `json:"referenceComment,omitempty"`
}

// Validate validates this update virtual circuit details
func (m *UpdateVirtualCircuitDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCrossConnectMappings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualCircuitDetails) validateCrossConnectMappings(formats strfmt.Registry) error {

	if swag.IsZero(m.CrossConnectMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.CrossConnectMappings); i++ {

		if swag.IsZero(m.CrossConnectMappings[i]) { // not required
			continue
		}

		if m.CrossConnectMappings[i] != nil {

			if err := m.CrossConnectMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("crossConnectMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateVirtualCircuitDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *UpdateVirtualCircuitDetails) validateGatewayID(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayID) { // not required
		return nil
	}

	if err := validate.MinLength("gatewayId", "body", string(m.GatewayID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("gatewayId", "body", string(m.GatewayID), 255); err != nil {
		return err
	}

	return nil
}

var updateVirtualCircuitDetailsTypeProviderStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","INACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateVirtualCircuitDetailsTypeProviderStatePropEnum = append(updateVirtualCircuitDetailsTypeProviderStatePropEnum, v)
	}
}

const (
	// UpdateVirtualCircuitDetailsProviderStateACTIVE captures enum value "ACTIVE"
	UpdateVirtualCircuitDetailsProviderStateACTIVE string = "ACTIVE"
	// UpdateVirtualCircuitDetailsProviderStateINACTIVE captures enum value "INACTIVE"
	UpdateVirtualCircuitDetailsProviderStateINACTIVE string = "INACTIVE"
)

// prop value enum
func (m *UpdateVirtualCircuitDetails) validateProviderStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateVirtualCircuitDetailsTypeProviderStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateVirtualCircuitDetails) validateProviderState(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderState) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderStateEnum("providerState", "body", m.ProviderState); err != nil {
		return err
	}

	return nil
}
