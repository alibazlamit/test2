package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// CreateIdentityProviderDetails create identity provider details
// swagger:discriminator CreateIdentityProviderDetails protocol
type CreateIdentityProviderDetails interface {
	runtime.Validatable

	// The OCID of your tenancy.
	// Required: true
	CompartmentID() *string
	SetCompartmentID(*string)

	// The description you assign to the `IdentityProvider` during creation.
	// Does not have to be unique, and it's changeable.
	//
	// Required: true
	// Max Length: 400
	// Min Length: 1
	Description() *string
	SetDescription(*string)

	// The name you assign to the `IdentityProvider` during creation.
	// The name must be unique across all `IdentityProvider` objects in the
	// tenancy and cannot be changed.
	//
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name() *string
	SetName(*string)

	// The identity provider service or product (e.g., Oracle Identity Cloud Service).
	//
	// Example: `IDCS`
	//
	// Required: true
	ProductType() *string
	SetProductType(*string)

	// The protocol used for federation.
	//
	// Example: `SAML2`
	//
	// Required: true
	Protocol() string
	SetProtocol(string)
}

// UnmarshalCreateIdentityProviderDetailsSlice unmarshals polymorphic slices of CreateIdentityProviderDetails
func UnmarshalCreateIdentityProviderDetailsSlice(reader io.Reader, consumer runtime.Consumer) ([]CreateIdentityProviderDetails, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CreateIdentityProviderDetails
	for _, element := range elements {
		obj, err := unmarshalCreateIdentityProviderDetails(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCreateIdentityProviderDetails unmarshals polymorphic CreateIdentityProviderDetails
func UnmarshalCreateIdentityProviderDetails(reader io.Reader, consumer runtime.Consumer) (CreateIdentityProviderDetails, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCreateIdentityProviderDetails(data, consumer)
}

func unmarshalCreateIdentityProviderDetails(data []byte, consumer runtime.Consumer) (CreateIdentityProviderDetails, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the protocol property.
	var getType struct {
		Protocol string `json:"protocol"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("protocol", "body", getType.Protocol); err != nil {
		return nil, err
	}

	// The value of protocol is used to determine which type to create and unmarshal the data into
	switch getType.Protocol {
	case "CreateSaml2IdentityProviderDetails":
		var result CreateSaml2IdentityProviderDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid protocol value: %q", getType.Protocol)

}
