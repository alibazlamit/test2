package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// UserGroupMembership An object that represents the membership of a user in a group. When you add a user to a group, the result is a
// `UserGroupMembership` with its own OCID. To remove a user from a group, you delete the `UserGroupMembership` object.
//
// swagger:model UserGroupMembership
type UserGroupMembership struct {

	// The OCID of the tenancy containing the user, group, and membership object.
	// Required: true
	CompartmentID *string `json:"compartmentId"`

	// The OCID of the group.
	// Required: true
	GroupID *string `json:"groupId"`

	// The OCID of the membership.
	// Required: true
	ID *string `json:"id"`

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus int64 `json:"inactiveStatus,omitempty"`

	// The membership's current state.  After creating a membership object, make sure its `lifecycleState` changes
	// from CREATING to ACTIVE before using it.
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	LifecycleState *string `json:"lifecycleState"`

	// Date and time the membership was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`

	// The OCID of the user.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this user group membership
func (m *UserGroupMembership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupMembership) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupMembership) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("groupId", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupMembership) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var userGroupMembershipTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","INACTIVE","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userGroupMembershipTypeLifecycleStatePropEnum = append(userGroupMembershipTypeLifecycleStatePropEnum, v)
	}
}

const (
	// UserGroupMembershipLifecycleStateCREATING captures enum value "CREATING"
	UserGroupMembershipLifecycleStateCREATING string = "CREATING"
	// UserGroupMembershipLifecycleStateACTIVE captures enum value "ACTIVE"
	UserGroupMembershipLifecycleStateACTIVE string = "ACTIVE"
	// UserGroupMembershipLifecycleStateINACTIVE captures enum value "INACTIVE"
	UserGroupMembershipLifecycleStateINACTIVE string = "INACTIVE"
	// UserGroupMembershipLifecycleStateDELETING captures enum value "DELETING"
	UserGroupMembershipLifecycleStateDELETING string = "DELETING"
	// UserGroupMembershipLifecycleStateDELETED captures enum value "DELETED"
	UserGroupMembershipLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *UserGroupMembership) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userGroupMembershipTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserGroupMembership) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	if err := validate.MinLength("lifecycleState", "body", string(*m.LifecycleState), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("lifecycleState", "body", string(*m.LifecycleState), 64); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupMembership) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupMembership) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}
