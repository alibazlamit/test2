package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePolicyDetails update policy details
// swagger:model UpdatePolicyDetails
type UpdatePolicyDetails struct {

	// The description you assign to the policy. Does not have to be unique, and it's changeable.
	// Max Length: 400
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// An array of policy statements written in the policy language. See
	// [How Policies Work](/Content/Identity/Concepts/policies.htm) and
	// [Common Policies](/Content/Identity/Concepts/commonpolicies.htm).
	//
	Statements []string `json:"statements"`

	// The version of the policy. If null or set to an empty string, when a request comes in for authorization, the
	// policy will be evaluated according to the current behavior of the services at that moment. If set to a particular
	// date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
	//
	VersionDate strfmt.DateTime `json:"versionDate,omitempty"`
}

// Validate validates this update policy details
func (m *UpdatePolicyDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatements(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePolicyDetails) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 400); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePolicyDetails) validateStatements(formats strfmt.Registry) error {

	if swag.IsZero(m.Statements) { // not required
		return nil
	}

	return nil
}
