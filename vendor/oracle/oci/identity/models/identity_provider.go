package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// IdentityProvider The resulting base object when you add an identity provider to your tenancy. A
// [Saml2IdentityProvider](#/en/identity/20160918/Saml2IdentityProvider/)
// is a specific type of `IdentityProvider` that supports the SAML 2.0 protocol. Each
// `IdentityProvider` object has its own OCID. For more information, see
// [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access,
// see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:discriminator IdentityProvider protocol
type IdentityProvider interface {
	runtime.Validatable

	// The OCID of the tenancy containing the `IdentityProvider`.
	// Required: true
	CompartmentID() *string
	SetCompartmentID(*string)

	// The description you assign to the `IdentityProvider` during creation. Does
	// not have to be unique, and it's changeable.
	//
	// Required: true
	// Max Length: 400
	// Min Length: 1
	Description() *string
	SetDescription(*string)

	// The OCID of the `IdentityProvider`.
	// Required: true
	ID() *string
	SetID(*string)

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus() int64
	SetInactiveStatus(int64)

	// The current state. After creating an `IdentityProvider`, make sure its
	// `lifecycleState` changes from CREATING to ACTIVE before using it.
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	LifecycleState() *string
	SetLifecycleState(*string)

	// The name you assign to the `IdentityProvider` during creation. The name
	// must be unique across all `IdentityProvider` objects in the tenancy and
	// cannot be changed. This is the name federated users see when choosing
	// which identity provider to use when signing in to the Oracle Bare Metal Cloud
	// Services Console.
	//
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name() *string
	SetName(*string)

	// The identity provider service or product (e.g., Oracle Identity Cloud Service).
	// Allowed value: `IDCS`.
	//
	// Example: `IDCS`
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	ProductType() *string
	SetProductType(*string)

	// The protocol used for federation. Allowed value: `SAML2`.
	//
	// Example: `SAML2`
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	Protocol() string
	SetProtocol(string)

	// Date and time the `IdentityProvider` was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated() *strfmt.DateTime
	SetTimeCreated(*strfmt.DateTime)
}

// UnmarshalIdentityProviderSlice unmarshals polymorphic slices of IdentityProvider
func UnmarshalIdentityProviderSlice(reader io.Reader, consumer runtime.Consumer) ([]IdentityProvider, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []IdentityProvider
	for _, element := range elements {
		obj, err := unmarshalIdentityProvider(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalIdentityProvider unmarshals polymorphic IdentityProvider
func UnmarshalIdentityProvider(reader io.Reader, consumer runtime.Consumer) (IdentityProvider, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalIdentityProvider(data, consumer)
}

func unmarshalIdentityProvider(data []byte, consumer runtime.Consumer) (IdentityProvider, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the protocol property.
	var getType struct {
		Protocol string `json:"protocol"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("protocol", "body", getType.Protocol); err != nil {
		return nil, err
	}

	// The value of protocol is used to determine which type to create and unmarshal the data into
	switch getType.Protocol {
	case "Saml2IdentityProvider":
		var result Saml2IdentityProvider
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid protocol value: %q", getType.Protocol)

}
