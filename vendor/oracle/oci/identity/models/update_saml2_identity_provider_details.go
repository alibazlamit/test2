package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSaml2IdentityProviderDetails update saml2 identity provider details
// swagger:model UpdateSaml2IdentityProviderDetails
type UpdateSaml2IdentityProviderDetails struct {
	descriptionField string

	// The XML that contains the information required for federating.
	//
	// Max Length: 100000
	// Min Length: 1
	Metadata string `json:"metadata,omitempty"`

	// The URL for retrieving the identity provider's metadata,
	// which contains information required for federating.
	//
	// Max Length: 512
	// Min Length: 1
	MetadataURL string `json:"metadataUrl,omitempty"`
}

func (m *UpdateSaml2IdentityProviderDetails) Description() string {
	return m.descriptionField
}
func (m *UpdateSaml2IdentityProviderDetails) SetDescription(val string) {
	m.descriptionField = val
}

func (m *UpdateSaml2IdentityProviderDetails) Protocol() string {
	return "UpdateSaml2IdentityProviderDetails"
}
func (m *UpdateSaml2IdentityProviderDetails) SetProtocol(val string) {

}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *UpdateSaml2IdentityProviderDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		Description string `json:"description,omitempty"`

		Protocol string `json:"protocol"`

		// The XML that contains the information required for federating.
		//
		// Max Length: 100000
		// Min Length: 1
		Metadata string `json:"metadata,omitempty"`

		// The URL for retrieving the identity provider's metadata,
		// which contains information required for federating.
		//
		// Max Length: 512
		// Min Length: 1
		MetadataURL string `json:"metadataUrl,omitempty"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.descriptionField = data.Description
	m.Metadata = data.Metadata
	m.MetadataURL = data.MetadataURL

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m UpdateSaml2IdentityProviderDetails) MarshalJSON() ([]byte, error) {
	var data struct {
		Description string `json:"description,omitempty"`

		Protocol string `json:"protocol"`

		// The XML that contains the information required for federating.
		//
		// Max Length: 100000
		// Min Length: 1
		Metadata string `json:"metadata,omitempty"`

		// The URL for retrieving the identity provider's metadata,
		// which contains information required for federating.
		//
		// Max Length: 512
		// Min Length: 1
		MetadataURL string `json:"metadataUrl,omitempty"`
	}

	data.Description = m.descriptionField
	data.Metadata = m.Metadata
	data.MetadataURL = m.MetadataURL
	data.Protocol = "UpdateSaml2IdentityProviderDetails"
	return json.Marshal(data)
}

// Validate validates this update saml2 identity provider details
func (m *UpdateSaml2IdentityProviderDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSaml2IdentityProviderDetails) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description()) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(m.Description()), 400); err != nil {
		return err
	}

	return nil
}

func (m *UpdateSaml2IdentityProviderDetails) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if err := validate.MinLength("metadata", "body", string(m.Metadata), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("metadata", "body", string(m.Metadata), 100000); err != nil {
		return err
	}

	return nil
}

func (m *UpdateSaml2IdentityProviderDetails) validateMetadataURL(formats strfmt.Registry) error {

	if swag.IsZero(m.MetadataURL) { // not required
		return nil
	}

	if err := validate.MinLength("metadataUrl", "body", string(m.MetadataURL), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("metadataUrl", "body", string(m.MetadataURL), 512); err != nil {
		return err
	}

	return nil
}
