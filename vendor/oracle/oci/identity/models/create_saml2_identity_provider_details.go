package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CreateSaml2IdentityProviderDetails create saml2 identity provider details
// swagger:model CreateSaml2IdentityProviderDetails
type CreateSaml2IdentityProviderDetails struct {
	compartmentIdField *string

	descriptionField *string

	nameField *string

	productTypeField *string

	// The XML that contains the information required for federating.
	//
	// Required: true
	// Max Length: 100000
	// Min Length: 1
	Metadata *string `json:"metadata"`

	// The URL for retrieving the identity provider's metadata,
	// which contains information required for federating.
	//
	// Required: true
	// Max Length: 512
	// Min Length: 1
	MetadataURL *string `json:"metadataUrl"`
}

func (m *CreateSaml2IdentityProviderDetails) CompartmentID() *string {
	return m.compartmentIdField
}
func (m *CreateSaml2IdentityProviderDetails) SetCompartmentID(val *string) {
	m.compartmentIdField = val
}

func (m *CreateSaml2IdentityProviderDetails) Description() *string {
	return m.descriptionField
}
func (m *CreateSaml2IdentityProviderDetails) SetDescription(val *string) {
	m.descriptionField = val
}

func (m *CreateSaml2IdentityProviderDetails) Name() *string {
	return m.nameField
}
func (m *CreateSaml2IdentityProviderDetails) SetName(val *string) {
	m.nameField = val
}

func (m *CreateSaml2IdentityProviderDetails) ProductType() *string {
	return m.productTypeField
}
func (m *CreateSaml2IdentityProviderDetails) SetProductType(val *string) {
	m.productTypeField = val
}

func (m *CreateSaml2IdentityProviderDetails) Protocol() string {
	return "CreateSaml2IdentityProviderDetails"
}
func (m *CreateSaml2IdentityProviderDetails) SetProtocol(val string) {

}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *CreateSaml2IdentityProviderDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		CompartmentID *string `json:"compartmentId"`

		Description *string `json:"description"`

		Name *string `json:"name"`

		ProductType *string `json:"productType"`

		Protocol string `json:"protocol"`

		// The XML that contains the information required for federating.
		//
		// Required: true
		// Max Length: 100000
		// Min Length: 1
		Metadata *string `json:"metadata"`

		// The URL for retrieving the identity provider's metadata,
		// which contains information required for federating.
		//
		// Required: true
		// Max Length: 512
		// Min Length: 1
		MetadataURL *string `json:"metadataUrl"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.compartmentIdField = data.CompartmentID
	m.descriptionField = data.Description
	m.nameField = data.Name
	m.productTypeField = data.ProductType
	m.Metadata = data.Metadata
	m.MetadataURL = data.MetadataURL

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m CreateSaml2IdentityProviderDetails) MarshalJSON() ([]byte, error) {
	var data struct {
		CompartmentID *string `json:"compartmentId"`

		Description *string `json:"description"`

		Name *string `json:"name"`

		ProductType *string `json:"productType"`

		Protocol string `json:"protocol"`

		// The XML that contains the information required for federating.
		//
		// Required: true
		// Max Length: 100000
		// Min Length: 1
		Metadata *string `json:"metadata"`

		// The URL for retrieving the identity provider's metadata,
		// which contains information required for federating.
		//
		// Required: true
		// Max Length: 512
		// Min Length: 1
		MetadataURL *string `json:"metadataUrl"`
	}

	data.CompartmentID = m.compartmentIdField
	data.Description = m.descriptionField
	data.Name = m.nameField
	data.ProductType = m.productTypeField
	data.Metadata = m.Metadata
	data.MetadataURL = m.MetadataURL
	data.Protocol = "CreateSaml2IdentityProviderDetails"
	return json.Marshal(data)
}

// Validate validates this create saml2 identity provider details
func (m *CreateSaml2IdentityProviderDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSaml2IdentityProviderDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID()); err != nil {
		return err
	}

	return nil
}

func (m *CreateSaml2IdentityProviderDetails) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description()), 400); err != nil {
		return err
	}

	return nil
}

func (m *CreateSaml2IdentityProviderDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name()), 100); err != nil {
		return err
	}

	return nil
}

var createSaml2IdentityProviderDetailsTypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IDCS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSaml2IdentityProviderDetailsTypeProductTypePropEnum = append(createSaml2IdentityProviderDetailsTypeProductTypePropEnum, v)
	}
}

// property enum
func (m *CreateSaml2IdentityProviderDetails) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createSaml2IdentityProviderDetailsTypeProductTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateSaml2IdentityProviderDetails) validateProductType(formats strfmt.Registry) error {

	if err := validate.Required("productType", "body", m.ProductType()); err != nil {
		return err
	}

	// value enum
	if err := m.validateProductTypeEnum("productType", "body", *m.ProductType()); err != nil {
		return err
	}

	return nil
}

func (m *CreateSaml2IdentityProviderDetails) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if err := validate.MinLength("metadata", "body", string(*m.Metadata), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("metadata", "body", string(*m.Metadata), 100000); err != nil {
		return err
	}

	return nil
}

func (m *CreateSaml2IdentityProviderDetails) validateMetadataURL(formats strfmt.Registry) error {

	if err := validate.Required("metadataUrl", "body", m.MetadataURL); err != nil {
		return err
	}

	if err := validate.MinLength("metadataUrl", "body", string(*m.MetadataURL), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("metadataUrl", "body", string(*m.MetadataURL), 512); err != nil {
		return err
	}

	return nil
}
