package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// User An individual employee or system that needs to manage or use your company's Oracle Bare Metal Cloud Services
// resources. Users might need to launch instances, manage remote disks, work with your cloud network, etc. Users
// have one or more IAM Service credentials ([ApiKey](#/en/identity/20160918/ApiKey/),
// [UIPassword](#/en/identity/20160918/UIPassword/), and [SwiftPassword](#/en/identity/20160918/SwiftPassword/)).
// For more information, see [User Credentials](/Content/API/Concepts/usercredentials.htm)). End users of your
// application are not typically IAM Service users. For conceptual information about users and other IAM Service
// components, see [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm).
//
// These users are created directly within the Oracle Bare Metal Cloud Services system, via the IAM service.
// They are different from *federated users*, who authenticate themselves to the Oracle Bare Metal
// Cloud Services Console via an identity provider. For more information, see
// [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access,
// see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model User
type User struct {

	// The OCID of the tenancy containing the user.
	// Required: true
	CompartmentID *string `json:"compartmentId"`

	// The description you assign to the user. Does not have to be unique, and it's changeable.
	// Required: true
	// Max Length: 400
	// Min Length: 1
	Description *string `json:"description"`

	// The OCID of the user.
	// Required: true
	ID *string `json:"id"`

	// Returned only if the user's `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user
	// is inactive:
	//
	// - bit 0: SUSPENDED (reserved for future use)
	// - bit 1: DISABLED (reserved for future use)
	// - bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
	//
	InactiveStatus int64 `json:"inactiveStatus,omitempty"`

	// The user's current state. After creating a user, make sure its `lifecycleState` changes from CREATING to
	// ACTIVE before using it.
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	LifecycleState *string `json:"lifecycleState"`

	// The name you assign to the user during creation. This is the user's login for the Console.
	// The name must be unique across all users in the tenancy and cannot be changed.
	//
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`

	// Date and time the user was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	return nil
}

func (m *User) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 400); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var userTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","INACTIVE","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeLifecycleStatePropEnum = append(userTypeLifecycleStatePropEnum, v)
	}
}

const (
	// UserLifecycleStateCREATING captures enum value "CREATING"
	UserLifecycleStateCREATING string = "CREATING"
	// UserLifecycleStateACTIVE captures enum value "ACTIVE"
	UserLifecycleStateACTIVE string = "ACTIVE"
	// UserLifecycleStateINACTIVE captures enum value "INACTIVE"
	UserLifecycleStateINACTIVE string = "INACTIVE"
	// UserLifecycleStateDELETING captures enum value "DELETING"
	UserLifecycleStateDELETING string = "DELETING"
	// UserLifecycleStateDELETED captures enum value "DELETED"
	UserLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *User) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	if err := validate.MinLength("lifecycleState", "body", string(*m.LifecycleState), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("lifecycleState", "body", string(*m.LifecycleState), 64); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *User) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}
