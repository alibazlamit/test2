package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SwiftPassword Swift is the OpenStack object storage service. A `SwiftPassword` is an Oracle-provided password for using a
// Swift client with the Oracle Bare Metal Cloud Services Object Storage Service. This password is associated with
// the user's Console login. Swift passwords never expire. A user can have up to two Swift passwords at a time.
//
// **Note:** The password is always an Oracle-generated string; you can't change it to a string of your choice.
//
// For more information, see [Managing User Credentials](/Content/Identity/Tasks/managingcredentials.htm).
//
// swagger:model SwiftPassword
type SwiftPassword struct {

	// The description you assign to the Swift password. Does not have to be unique, and it's changeable.
	Description string `json:"description,omitempty"`

	// Date and time when this password will expire, in the format defined by RFC3339.
	// Null if it never expires.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	ExpiresOn strfmt.DateTime `json:"expiresOn,omitempty"`

	// The OCID of the Swift password.
	ID string `json:"id,omitempty"`

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus int64 `json:"inactiveStatus,omitempty"`

	// The password's current state. After creating a password, make sure its `lifecycleState` changes from
	// CREATING to ACTIVE before using it.
	//
	// Max Length: 64
	// Min Length: 1
	LifecycleState string `json:"lifecycleState,omitempty"`

	// The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not
	// for `ListSwiftPasswords` or `UpdateSwiftPassword`.
	//
	Password string `json:"password,omitempty"`

	// Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`

	// The OCID of the user the password belongs to.
	UserID string `json:"userId,omitempty"`
}

// Validate validates this swift password
func (m *SwiftPassword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var swiftPasswordTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","INACTIVE","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		swiftPasswordTypeLifecycleStatePropEnum = append(swiftPasswordTypeLifecycleStatePropEnum, v)
	}
}

const (
	// SwiftPasswordLifecycleStateCREATING captures enum value "CREATING"
	SwiftPasswordLifecycleStateCREATING string = "CREATING"
	// SwiftPasswordLifecycleStateACTIVE captures enum value "ACTIVE"
	SwiftPasswordLifecycleStateACTIVE string = "ACTIVE"
	// SwiftPasswordLifecycleStateINACTIVE captures enum value "INACTIVE"
	SwiftPasswordLifecycleStateINACTIVE string = "INACTIVE"
	// SwiftPasswordLifecycleStateDELETING captures enum value "DELETING"
	SwiftPasswordLifecycleStateDELETING string = "DELETING"
	// SwiftPasswordLifecycleStateDELETED captures enum value "DELETED"
	SwiftPasswordLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *SwiftPassword) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, swiftPasswordTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SwiftPassword) validateLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	if err := validate.MinLength("lifecycleState", "body", string(m.LifecycleState), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("lifecycleState", "body", string(m.LifecycleState), 64); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	return nil
}
