package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Compartment A collection of related resources. Compartments are a fundamental component of Oracle Bare Metal Cloud Services
// for organizing and isolating your cloud resources. You use them to clearly separate resources for the purposes
// of measuring usage and billing, access (through the use of IAM Service policies), and isolation (separating the
// resources for one project or business unit from another). A common approach is to create a compartment for each
// major part of your organization. For more information, see
// [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm) and also
// [Setting Up Your Tenancy](/Content/GSG/Concepts/settinguptenancy.htm).
//
// To place a resource in a compartment, simply specify the compartment ID in the "Create" request object when
// initially creating the resource. For example, to launch an instance into a particular compartment, specify
// that compartment's OCID in the `LaunchInstance` request. You can't move an existing resource from one
// compartment to another.
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access,
// see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model Compartment
type Compartment struct {

	// The OCID of the tenancy containing the compartment.
	// Required: true
	CompartmentID *string `json:"compartmentId"`

	// The description you assign to the compartment. Does not have to be unique, and it's changeable.
	// Required: true
	// Max Length: 400
	// Min Length: 1
	Description *string `json:"description"`

	// The OCID of the compartment.
	// Required: true
	ID *string `json:"id"`

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus int64 `json:"inactiveStatus,omitempty"`

	// The compartment's current state. After creating a compartment, make sure its `lifecycleState` changes from
	// CREATING to ACTIVE before using it.
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	LifecycleState *string `json:"lifecycleState"`

	// The name you assign to the compartment during creation. The name must be unique across all
	// compartments in the tenancy and cannot be changed.
	//
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`

	// Date and time the compartment was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this compartment
func (m *Compartment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Compartment) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	return nil
}

func (m *Compartment) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 400); err != nil {
		return err
	}

	return nil
}

func (m *Compartment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var compartmentTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","INACTIVE","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		compartmentTypeLifecycleStatePropEnum = append(compartmentTypeLifecycleStatePropEnum, v)
	}
}

const (
	// CompartmentLifecycleStateCREATING captures enum value "CREATING"
	CompartmentLifecycleStateCREATING string = "CREATING"
	// CompartmentLifecycleStateACTIVE captures enum value "ACTIVE"
	CompartmentLifecycleStateACTIVE string = "ACTIVE"
	// CompartmentLifecycleStateINACTIVE captures enum value "INACTIVE"
	CompartmentLifecycleStateINACTIVE string = "INACTIVE"
	// CompartmentLifecycleStateDELETING captures enum value "DELETING"
	CompartmentLifecycleStateDELETING string = "DELETING"
	// CompartmentLifecycleStateDELETED captures enum value "DELETED"
	CompartmentLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *Compartment) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, compartmentTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Compartment) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	if err := validate.MinLength("lifecycleState", "body", string(*m.LifecycleState), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("lifecycleState", "body", string(*m.LifecycleState), 64); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Compartment) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *Compartment) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}
