package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Policy A document that specifies the type of access a group has to the resources in a compartment. For information about
// policies and other IAM Service components, see
// [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm). If you're new to policies, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// The word "policy" is used by people in different ways:
//
//   * An individual statement written in the policy language
//   * A collection of statements in a single, named "policy" document (which has an Oracle Cloud ID (OCID) assigned to it)
//   * The overall body of policies your organization uses to control access to resources
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator.
//
// swagger:model Policy
type Policy struct {

	// The OCID of the compartment containing the policy (either the tenancy or another compartment).
	//
	// Required: true
	CompartmentID *string `json:"compartmentId"`

	// The description you assign to the policy. Does not have to be unique, and it's changeable.
	// Required: true
	// Max Length: 400
	// Min Length: 1
	Description *string `json:"description"`

	// The OCID of the policy.
	// Required: true
	ID *string `json:"id"`

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus int64 `json:"inactiveStatus,omitempty"`

	// The policy's current state. After creating a policy, make sure its `lifecycleState` changes from CREATING to
	// ACTIVE before using it.
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	LifecycleState *string `json:"lifecycleState"`

	// The name you assign to the policy during creation. The name must be unique across all policies
	// in the tenancy and cannot be changed.
	//
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`

	// An array of one or more policy statements written in the policy language.
	// Required: true
	Statements []string `json:"statements"`

	// Date and time the policy was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`

	// The version of the policy. If null or set to an empty string, when a request comes in for authorization, the
	// policy will be evaluated according to the current behavior of the services at that moment. If set to a particular
	// date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
	//
	VersionDate strfmt.DateTime `json:"versionDate,omitempty"`
}

// Validate validates this policy
func (m *Policy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatements(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Policy) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 400); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var policyTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","INACTIVE","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeLifecycleStatePropEnum = append(policyTypeLifecycleStatePropEnum, v)
	}
}

const (
	// PolicyLifecycleStateCREATING captures enum value "CREATING"
	PolicyLifecycleStateCREATING string = "CREATING"
	// PolicyLifecycleStateACTIVE captures enum value "ACTIVE"
	PolicyLifecycleStateACTIVE string = "ACTIVE"
	// PolicyLifecycleStateINACTIVE captures enum value "INACTIVE"
	PolicyLifecycleStateINACTIVE string = "INACTIVE"
	// PolicyLifecycleStateDELETING captures enum value "DELETING"
	PolicyLifecycleStateDELETING string = "DELETING"
	// PolicyLifecycleStateDELETED captures enum value "DELETED"
	PolicyLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *Policy) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, policyTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	if err := validate.MinLength("lifecycleState", "body", string(*m.LifecycleState), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("lifecycleState", "body", string(*m.LifecycleState), 64); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateStatements(formats strfmt.Registry) error {

	if err := validate.Required("statements", "body", m.Statements); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}
