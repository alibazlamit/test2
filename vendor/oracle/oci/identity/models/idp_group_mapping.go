package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// IdpGroupMapping A mapping between a single group defined by the identity provider (IdP) you're federating with
// and a single IAM Service [group](#/en/identity/20160918/Group/) in Oracle Bare Metal Cloud
// Services. For more information about group mappings and what they're for, see
// [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).
//
// A given IdP group can be mapped to zero, one, or multiple IAM Service groups, and vice versa.
// But each `IdPGroupMapping` object is between only a single IdP group and IAM Service group.
// Each `IdPGroupMapping` object has its own OCID.
//
// **Note:** Any users who are in more than 50 IdP groups cannot be authenticated to use the Oracle
// Bare Metal Cloud Services Console.
//
// swagger:model IdpGroupMapping
type IdpGroupMapping struct {

	// The OCID of the tenancy containing the `IdentityProvider`.
	// Required: true
	CompartmentID *string `json:"compartmentId"`

	// The OCID of the IAM Service group that is mapped to the IdP group.
	// Required: true
	GroupID *string `json:"groupId"`

	// The OCID of the `IdpGroupMapping`.
	// Required: true
	ID *string `json:"id"`

	// The name of the IdP group that is mapped to the IAM Service group.
	// Required: true
	IdpGroupName *string `json:"idpGroupName"`

	// The OCID of the `IdentityProvider` this mapping belongs to.
	// Required: true
	IdpID *string `json:"idpId"`

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus int64 `json:"inactiveStatus,omitempty"`

	// The mapping's current state.  After creating a mapping object, make sure its `lifecycleState` changes
	// from CREATING to ACTIVE before using it.
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	LifecycleState *string `json:"lifecycleState"`

	// Date and time the mapping was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this idp group mapping
func (m *IdpGroupMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIdpGroupName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIdpID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdpGroupMapping) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	return nil
}

func (m *IdpGroupMapping) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("groupId", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *IdpGroupMapping) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IdpGroupMapping) validateIdpGroupName(formats strfmt.Registry) error {

	if err := validate.Required("idpGroupName", "body", m.IdpGroupName); err != nil {
		return err
	}

	return nil
}

func (m *IdpGroupMapping) validateIdpID(formats strfmt.Registry) error {

	if err := validate.Required("idpId", "body", m.IdpID); err != nil {
		return err
	}

	return nil
}

var idpGroupMappingTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","INACTIVE","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		idpGroupMappingTypeLifecycleStatePropEnum = append(idpGroupMappingTypeLifecycleStatePropEnum, v)
	}
}

const (
	// IdpGroupMappingLifecycleStateCREATING captures enum value "CREATING"
	IdpGroupMappingLifecycleStateCREATING string = "CREATING"
	// IdpGroupMappingLifecycleStateACTIVE captures enum value "ACTIVE"
	IdpGroupMappingLifecycleStateACTIVE string = "ACTIVE"
	// IdpGroupMappingLifecycleStateINACTIVE captures enum value "INACTIVE"
	IdpGroupMappingLifecycleStateINACTIVE string = "INACTIVE"
	// IdpGroupMappingLifecycleStateDELETING captures enum value "DELETING"
	IdpGroupMappingLifecycleStateDELETING string = "DELETING"
	// IdpGroupMappingLifecycleStateDELETED captures enum value "DELETED"
	IdpGroupMappingLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *IdpGroupMapping) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, idpGroupMappingTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IdpGroupMapping) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	if err := validate.MinLength("lifecycleState", "body", string(*m.LifecycleState), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("lifecycleState", "body", string(*m.LifecycleState), 64); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *IdpGroupMapping) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}
