package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// NewUpdateCompartmentParams creates a new UpdateCompartmentParams object
// with the default values initialized.
func NewUpdateCompartmentParams() *UpdateCompartmentParams {
	var ()
	return &UpdateCompartmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCompartmentParamsWithTimeout creates a new UpdateCompartmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateCompartmentParamsWithTimeout(timeout time.Duration) *UpdateCompartmentParams {
	var ()
	return &UpdateCompartmentParams{

		timeout: timeout,
	}
}

// NewUpdateCompartmentParamsWithContext creates a new UpdateCompartmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateCompartmentParamsWithContext(ctx context.Context) *UpdateCompartmentParams {
	var ()
	return &UpdateCompartmentParams{

		Context: ctx,
	}
}

// NewUpdateCompartmentParamsWithHTTPClient creates a new UpdateCompartmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateCompartmentParamsWithHTTPClient(client *http.Client) *UpdateCompartmentParams {
	var ()
	return &UpdateCompartmentParams{
		HTTPClient: client,
	}
}

/*UpdateCompartmentParams contains all the parameters to send to the API endpoint
for the update compartment operation typically these are written to a http.Request
*/
type UpdateCompartmentParams struct {

	/*CompartmentID
	  The OCID of the compartment.

	*/
	CompartmentID string
	/*IfMatch
	  For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match`
	parameter to the value of the etag from a previous GET or POST response for that resource.  The resource
	will be updated or deleted only if the etag you provide matches the resource's current etag value.


	*/
	IfMatch *string
	/*UpdateCompartmentDetails
	  Request object for updating a compartment.

	*/
	UpdateCompartmentDetails *models.UpdateCompartmentDetails

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update compartment params
func (o *UpdateCompartmentParams) WithTimeout(timeout time.Duration) *UpdateCompartmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update compartment params
func (o *UpdateCompartmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update compartment params
func (o *UpdateCompartmentParams) WithContext(ctx context.Context) *UpdateCompartmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update compartment params
func (o *UpdateCompartmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update compartment params
func (o *UpdateCompartmentParams) WithHTTPClient(client *http.Client) *UpdateCompartmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update compartment params
func (o *UpdateCompartmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompartmentID adds the compartmentID to the update compartment params
func (o *UpdateCompartmentParams) WithCompartmentID(compartmentID string) *UpdateCompartmentParams {
	o.SetCompartmentID(compartmentID)
	return o
}

// SetCompartmentID adds the compartmentId to the update compartment params
func (o *UpdateCompartmentParams) SetCompartmentID(compartmentID string) {
	o.CompartmentID = compartmentID
}

// WithIfMatch adds the ifMatch to the update compartment params
func (o *UpdateCompartmentParams) WithIfMatch(ifMatch *string) *UpdateCompartmentParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the update compartment params
func (o *UpdateCompartmentParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithUpdateCompartmentDetails adds the updateCompartmentDetails to the update compartment params
func (o *UpdateCompartmentParams) WithUpdateCompartmentDetails(updateCompartmentDetails *models.UpdateCompartmentDetails) *UpdateCompartmentParams {
	o.SetUpdateCompartmentDetails(updateCompartmentDetails)
	return o
}

// SetUpdateCompartmentDetails adds the updateCompartmentDetails to the update compartment params
func (o *UpdateCompartmentParams) SetUpdateCompartmentDetails(updateCompartmentDetails *models.UpdateCompartmentDetails) {
	o.UpdateCompartmentDetails = updateCompartmentDetails
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCompartmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param compartmentId
	if err := r.SetPathParam("compartmentId", o.CompartmentID); err != nil {
		return err
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}

	}

	if o.UpdateCompartmentDetails == nil {
		o.UpdateCompartmentDetails = new(models.UpdateCompartmentDetails)
	}

	if err := r.SetBodyParam(o.UpdateCompartmentDetails); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
