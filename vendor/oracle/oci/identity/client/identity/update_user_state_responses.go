package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// UpdateUserStateReader is a Reader for the UpdateUserState structure.
type UpdateUserStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateUserStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateUserStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateUserStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateUserStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateUserStateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateUserStatePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateUserStateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateUserStateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateUserStateOK creates a UpdateUserStateOK with default headers values
func NewUpdateUserStateOK() *UpdateUserStateOK {
	return &UpdateUserStateOK{}
}

/*UpdateUserStateOK handles this case with default header values.

The user state was updated.
*/
type UpdateUserStateOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.User
}

func (o *UpdateUserStateOK) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] updateUserStateOK  %+v", 200, o.Payload)
}

func (o *UpdateUserStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserStateBadRequest creates a UpdateUserStateBadRequest with default headers values
func NewUpdateUserStateBadRequest() *UpdateUserStateBadRequest {
	return &UpdateUserStateBadRequest{}
}

/*UpdateUserStateBadRequest handles this case with default header values.

Bad Request
*/
type UpdateUserStateBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateUserStateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] updateUserStateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserStateForbidden creates a UpdateUserStateForbidden with default headers values
func NewUpdateUserStateForbidden() *UpdateUserStateForbidden {
	return &UpdateUserStateForbidden{}
}

/*UpdateUserStateForbidden handles this case with default header values.

Forbidden
*/
type UpdateUserStateForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateUserStateForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] updateUserStateForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserStateNotFound creates a UpdateUserStateNotFound with default headers values
func NewUpdateUserStateNotFound() *UpdateUserStateNotFound {
	return &UpdateUserStateNotFound{}
}

/*UpdateUserStateNotFound handles this case with default header values.

Not Found
*/
type UpdateUserStateNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateUserStateNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] updateUserStateNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserStateConflict creates a UpdateUserStateConflict with default headers values
func NewUpdateUserStateConflict() *UpdateUserStateConflict {
	return &UpdateUserStateConflict{}
}

/*UpdateUserStateConflict handles this case with default header values.

Conflict
*/
type UpdateUserStateConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateUserStateConflict) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] updateUserStateConflict  %+v", 409, o.Payload)
}

func (o *UpdateUserStateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserStatePreconditionFailed creates a UpdateUserStatePreconditionFailed with default headers values
func NewUpdateUserStatePreconditionFailed() *UpdateUserStatePreconditionFailed {
	return &UpdateUserStatePreconditionFailed{}
}

/*UpdateUserStatePreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateUserStatePreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateUserStatePreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] updateUserStatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateUserStatePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserStateInternalServerError creates a UpdateUserStateInternalServerError with default headers values
func NewUpdateUserStateInternalServerError() *UpdateUserStateInternalServerError {
	return &UpdateUserStateInternalServerError{}
}

/*UpdateUserStateInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateUserStateInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateUserStateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] updateUserStateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserStateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserStateDefault creates a UpdateUserStateDefault with default headers values
func NewUpdateUserStateDefault(code int) *UpdateUserStateDefault {
	return &UpdateUserStateDefault{
		_statusCode: code,
	}
}

/*UpdateUserStateDefault handles this case with default header values.

An error has occurred.

*/
type UpdateUserStateDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update user state default response
func (o *UpdateUserStateDefault) Code() int {
	return o._statusCode
}

func (o *UpdateUserStateDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/state/][%d] UpdateUserState default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateUserStateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
