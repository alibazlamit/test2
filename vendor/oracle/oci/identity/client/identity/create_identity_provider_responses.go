package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// CreateIdentityProviderReader is a Reader for the CreateIdentityProvider structure.
type CreateIdentityProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIdentityProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateIdentityProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateIdentityProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateIdentityProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateIdentityProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateIdentityProviderConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateIdentityProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateIdentityProviderDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateIdentityProviderOK creates a CreateIdentityProviderOK with default headers values
func NewCreateIdentityProviderOK() *CreateIdentityProviderOK {
	return &CreateIdentityProviderOK{}
}

/*CreateIdentityProviderOK handles this case with default header values.

The identity provider is being created.
*/
type CreateIdentityProviderOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload models.IdentityProvider
}

func (o *CreateIdentityProviderOK) Error() string {
	return fmt.Sprintf("[POST /identityProviders/][%d] createIdentityProviderOK  %+v", 200, o.Payload)
}

func (o *CreateIdentityProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload as interface type
	payload, err := models.UnmarshalIdentityProvider(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewCreateIdentityProviderBadRequest creates a CreateIdentityProviderBadRequest with default headers values
func NewCreateIdentityProviderBadRequest() *CreateIdentityProviderBadRequest {
	return &CreateIdentityProviderBadRequest{}
}

/*CreateIdentityProviderBadRequest handles this case with default header values.

Bad Request
*/
type CreateIdentityProviderBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdentityProviderBadRequest) Error() string {
	return fmt.Sprintf("[POST /identityProviders/][%d] createIdentityProviderBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIdentityProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdentityProviderForbidden creates a CreateIdentityProviderForbidden with default headers values
func NewCreateIdentityProviderForbidden() *CreateIdentityProviderForbidden {
	return &CreateIdentityProviderForbidden{}
}

/*CreateIdentityProviderForbidden handles this case with default header values.

Forbidden
*/
type CreateIdentityProviderForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdentityProviderForbidden) Error() string {
	return fmt.Sprintf("[POST /identityProviders/][%d] createIdentityProviderForbidden  %+v", 403, o.Payload)
}

func (o *CreateIdentityProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdentityProviderNotFound creates a CreateIdentityProviderNotFound with default headers values
func NewCreateIdentityProviderNotFound() *CreateIdentityProviderNotFound {
	return &CreateIdentityProviderNotFound{}
}

/*CreateIdentityProviderNotFound handles this case with default header values.

Not Found
*/
type CreateIdentityProviderNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdentityProviderNotFound) Error() string {
	return fmt.Sprintf("[POST /identityProviders/][%d] createIdentityProviderNotFound  %+v", 404, o.Payload)
}

func (o *CreateIdentityProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdentityProviderConflict creates a CreateIdentityProviderConflict with default headers values
func NewCreateIdentityProviderConflict() *CreateIdentityProviderConflict {
	return &CreateIdentityProviderConflict{}
}

/*CreateIdentityProviderConflict handles this case with default header values.

Conflict
*/
type CreateIdentityProviderConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdentityProviderConflict) Error() string {
	return fmt.Sprintf("[POST /identityProviders/][%d] createIdentityProviderConflict  %+v", 409, o.Payload)
}

func (o *CreateIdentityProviderConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdentityProviderInternalServerError creates a CreateIdentityProviderInternalServerError with default headers values
func NewCreateIdentityProviderInternalServerError() *CreateIdentityProviderInternalServerError {
	return &CreateIdentityProviderInternalServerError{}
}

/*CreateIdentityProviderInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateIdentityProviderInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdentityProviderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /identityProviders/][%d] createIdentityProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateIdentityProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdentityProviderDefault creates a CreateIdentityProviderDefault with default headers values
func NewCreateIdentityProviderDefault(code int) *CreateIdentityProviderDefault {
	return &CreateIdentityProviderDefault{
		_statusCode: code,
	}
}

/*CreateIdentityProviderDefault handles this case with default header values.

An error has occurred.

*/
type CreateIdentityProviderDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create identity provider default response
func (o *CreateIdentityProviderDefault) Code() int {
	return o._statusCode
}

func (o *CreateIdentityProviderDefault) Error() string {
	return fmt.Sprintf("[POST /identityProviders/][%d] CreateIdentityProvider default  %+v", o._statusCode, o.Payload)
}

func (o *CreateIdentityProviderDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
