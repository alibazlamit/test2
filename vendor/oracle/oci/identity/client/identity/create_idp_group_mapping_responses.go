package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// CreateIdpGroupMappingReader is a Reader for the CreateIdpGroupMapping structure.
type CreateIdpGroupMappingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIdpGroupMappingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateIdpGroupMappingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateIdpGroupMappingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateIdpGroupMappingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateIdpGroupMappingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateIdpGroupMappingConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateIdpGroupMappingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateIdpGroupMappingDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateIdpGroupMappingOK creates a CreateIdpGroupMappingOK with default headers values
func NewCreateIdpGroupMappingOK() *CreateIdpGroupMappingOK {
	return &CreateIdpGroupMappingOK{}
}

/*CreateIdpGroupMappingOK handles this case with default header values.

The mapping is being created.
*/
type CreateIdpGroupMappingOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.IdpGroupMapping
}

func (o *CreateIdpGroupMappingOK) Error() string {
	return fmt.Sprintf("[POST /identityProviders/{identityProviderId}/groupMappings/][%d] createIdpGroupMappingOK  %+v", 200, o.Payload)
}

func (o *CreateIdpGroupMappingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.IdpGroupMapping)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdpGroupMappingBadRequest creates a CreateIdpGroupMappingBadRequest with default headers values
func NewCreateIdpGroupMappingBadRequest() *CreateIdpGroupMappingBadRequest {
	return &CreateIdpGroupMappingBadRequest{}
}

/*CreateIdpGroupMappingBadRequest handles this case with default header values.

Bad Request
*/
type CreateIdpGroupMappingBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdpGroupMappingBadRequest) Error() string {
	return fmt.Sprintf("[POST /identityProviders/{identityProviderId}/groupMappings/][%d] createIdpGroupMappingBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIdpGroupMappingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdpGroupMappingForbidden creates a CreateIdpGroupMappingForbidden with default headers values
func NewCreateIdpGroupMappingForbidden() *CreateIdpGroupMappingForbidden {
	return &CreateIdpGroupMappingForbidden{}
}

/*CreateIdpGroupMappingForbidden handles this case with default header values.

Forbidden
*/
type CreateIdpGroupMappingForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdpGroupMappingForbidden) Error() string {
	return fmt.Sprintf("[POST /identityProviders/{identityProviderId}/groupMappings/][%d] createIdpGroupMappingForbidden  %+v", 403, o.Payload)
}

func (o *CreateIdpGroupMappingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdpGroupMappingNotFound creates a CreateIdpGroupMappingNotFound with default headers values
func NewCreateIdpGroupMappingNotFound() *CreateIdpGroupMappingNotFound {
	return &CreateIdpGroupMappingNotFound{}
}

/*CreateIdpGroupMappingNotFound handles this case with default header values.

Not Found
*/
type CreateIdpGroupMappingNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdpGroupMappingNotFound) Error() string {
	return fmt.Sprintf("[POST /identityProviders/{identityProviderId}/groupMappings/][%d] createIdpGroupMappingNotFound  %+v", 404, o.Payload)
}

func (o *CreateIdpGroupMappingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdpGroupMappingConflict creates a CreateIdpGroupMappingConflict with default headers values
func NewCreateIdpGroupMappingConflict() *CreateIdpGroupMappingConflict {
	return &CreateIdpGroupMappingConflict{}
}

/*CreateIdpGroupMappingConflict handles this case with default header values.

Conflict
*/
type CreateIdpGroupMappingConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdpGroupMappingConflict) Error() string {
	return fmt.Sprintf("[POST /identityProviders/{identityProviderId}/groupMappings/][%d] createIdpGroupMappingConflict  %+v", 409, o.Payload)
}

func (o *CreateIdpGroupMappingConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdpGroupMappingInternalServerError creates a CreateIdpGroupMappingInternalServerError with default headers values
func NewCreateIdpGroupMappingInternalServerError() *CreateIdpGroupMappingInternalServerError {
	return &CreateIdpGroupMappingInternalServerError{}
}

/*CreateIdpGroupMappingInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateIdpGroupMappingInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateIdpGroupMappingInternalServerError) Error() string {
	return fmt.Sprintf("[POST /identityProviders/{identityProviderId}/groupMappings/][%d] createIdpGroupMappingInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateIdpGroupMappingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIdpGroupMappingDefault creates a CreateIdpGroupMappingDefault with default headers values
func NewCreateIdpGroupMappingDefault(code int) *CreateIdpGroupMappingDefault {
	return &CreateIdpGroupMappingDefault{
		_statusCode: code,
	}
}

/*CreateIdpGroupMappingDefault handles this case with default header values.

An error has occurred.

*/
type CreateIdpGroupMappingDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create idp group mapping default response
func (o *CreateIdpGroupMappingDefault) Code() int {
	return o._statusCode
}

func (o *CreateIdpGroupMappingDefault) Error() string {
	return fmt.Sprintf("[POST /identityProviders/{identityProviderId}/groupMappings/][%d] CreateIdpGroupMapping default  %+v", o._statusCode, o.Payload)
}

func (o *CreateIdpGroupMappingDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
