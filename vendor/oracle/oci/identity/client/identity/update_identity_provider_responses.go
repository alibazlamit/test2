package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// UpdateIdentityProviderReader is a Reader for the UpdateIdentityProvider structure.
type UpdateIdentityProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIdentityProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateIdentityProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateIdentityProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateIdentityProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateIdentityProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateIdentityProviderConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateIdentityProviderPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateIdentityProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateIdentityProviderDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateIdentityProviderOK creates a UpdateIdentityProviderOK with default headers values
func NewUpdateIdentityProviderOK() *UpdateIdentityProviderOK {
	return &UpdateIdentityProviderOK{}
}

/*UpdateIdentityProviderOK handles this case with default header values.

The identity provider is being updated.
*/
type UpdateIdentityProviderOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload models.IdentityProvider
}

func (o *UpdateIdentityProviderOK) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] updateIdentityProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateIdentityProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload as interface type
	payload, err := models.UnmarshalIdentityProvider(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateIdentityProviderBadRequest creates a UpdateIdentityProviderBadRequest with default headers values
func NewUpdateIdentityProviderBadRequest() *UpdateIdentityProviderBadRequest {
	return &UpdateIdentityProviderBadRequest{}
}

/*UpdateIdentityProviderBadRequest handles this case with default header values.

Bad Request
*/
type UpdateIdentityProviderBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdentityProviderBadRequest) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] updateIdentityProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIdentityProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdentityProviderForbidden creates a UpdateIdentityProviderForbidden with default headers values
func NewUpdateIdentityProviderForbidden() *UpdateIdentityProviderForbidden {
	return &UpdateIdentityProviderForbidden{}
}

/*UpdateIdentityProviderForbidden handles this case with default header values.

Forbidden
*/
type UpdateIdentityProviderForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdentityProviderForbidden) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] updateIdentityProviderForbidden  %+v", 403, o.Payload)
}

func (o *UpdateIdentityProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdentityProviderNotFound creates a UpdateIdentityProviderNotFound with default headers values
func NewUpdateIdentityProviderNotFound() *UpdateIdentityProviderNotFound {
	return &UpdateIdentityProviderNotFound{}
}

/*UpdateIdentityProviderNotFound handles this case with default header values.

Not Found
*/
type UpdateIdentityProviderNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdentityProviderNotFound) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] updateIdentityProviderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateIdentityProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdentityProviderConflict creates a UpdateIdentityProviderConflict with default headers values
func NewUpdateIdentityProviderConflict() *UpdateIdentityProviderConflict {
	return &UpdateIdentityProviderConflict{}
}

/*UpdateIdentityProviderConflict handles this case with default header values.

Conflict
*/
type UpdateIdentityProviderConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdentityProviderConflict) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] updateIdentityProviderConflict  %+v", 409, o.Payload)
}

func (o *UpdateIdentityProviderConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdentityProviderPreconditionFailed creates a UpdateIdentityProviderPreconditionFailed with default headers values
func NewUpdateIdentityProviderPreconditionFailed() *UpdateIdentityProviderPreconditionFailed {
	return &UpdateIdentityProviderPreconditionFailed{}
}

/*UpdateIdentityProviderPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateIdentityProviderPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdentityProviderPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] updateIdentityProviderPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateIdentityProviderPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdentityProviderInternalServerError creates a UpdateIdentityProviderInternalServerError with default headers values
func NewUpdateIdentityProviderInternalServerError() *UpdateIdentityProviderInternalServerError {
	return &UpdateIdentityProviderInternalServerError{}
}

/*UpdateIdentityProviderInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateIdentityProviderInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdentityProviderInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] updateIdentityProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateIdentityProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdentityProviderDefault creates a UpdateIdentityProviderDefault with default headers values
func NewUpdateIdentityProviderDefault(code int) *UpdateIdentityProviderDefault {
	return &UpdateIdentityProviderDefault{
		_statusCode: code,
	}
}

/*UpdateIdentityProviderDefault handles this case with default header values.

An error has occurred.

*/
type UpdateIdentityProviderDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update identity provider default response
func (o *UpdateIdentityProviderDefault) Code() int {
	return o._statusCode
}

func (o *UpdateIdentityProviderDefault) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}][%d] UpdateIdentityProvider default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateIdentityProviderDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
