package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// CreateOrResetUipasswordReader is a Reader for the CreateOrResetUipassword structure.
type CreateOrResetUipasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrResetUipasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateOrResetUipasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateOrResetUipasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateOrResetUipasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateOrResetUipasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateOrResetUipasswordConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateOrResetUipasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateOrResetUipasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateOrResetUipasswordOK creates a CreateOrResetUipasswordOK with default headers values
func NewCreateOrResetUipasswordOK() *CreateOrResetUipasswordOK {
	return &CreateOrResetUipasswordOK{}
}

/*CreateOrResetUipasswordOK handles this case with default header values.

The new UI password is being created.
*/
type CreateOrResetUipasswordOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Uipassword
}

func (o *CreateOrResetUipasswordOK) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/uiPassword][%d] createOrResetUipasswordOK  %+v", 200, o.Payload)
}

func (o *CreateOrResetUipasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Uipassword)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrResetUipasswordBadRequest creates a CreateOrResetUipasswordBadRequest with default headers values
func NewCreateOrResetUipasswordBadRequest() *CreateOrResetUipasswordBadRequest {
	return &CreateOrResetUipasswordBadRequest{}
}

/*CreateOrResetUipasswordBadRequest handles this case with default header values.

Bad Request
*/
type CreateOrResetUipasswordBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateOrResetUipasswordBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/uiPassword][%d] createOrResetUipasswordBadRequest  %+v", 400, o.Payload)
}

func (o *CreateOrResetUipasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrResetUipasswordForbidden creates a CreateOrResetUipasswordForbidden with default headers values
func NewCreateOrResetUipasswordForbidden() *CreateOrResetUipasswordForbidden {
	return &CreateOrResetUipasswordForbidden{}
}

/*CreateOrResetUipasswordForbidden handles this case with default header values.

Forbidden
*/
type CreateOrResetUipasswordForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateOrResetUipasswordForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/uiPassword][%d] createOrResetUipasswordForbidden  %+v", 403, o.Payload)
}

func (o *CreateOrResetUipasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrResetUipasswordNotFound creates a CreateOrResetUipasswordNotFound with default headers values
func NewCreateOrResetUipasswordNotFound() *CreateOrResetUipasswordNotFound {
	return &CreateOrResetUipasswordNotFound{}
}

/*CreateOrResetUipasswordNotFound handles this case with default header values.

Not Found
*/
type CreateOrResetUipasswordNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateOrResetUipasswordNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/uiPassword][%d] createOrResetUipasswordNotFound  %+v", 404, o.Payload)
}

func (o *CreateOrResetUipasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrResetUipasswordConflict creates a CreateOrResetUipasswordConflict with default headers values
func NewCreateOrResetUipasswordConflict() *CreateOrResetUipasswordConflict {
	return &CreateOrResetUipasswordConflict{}
}

/*CreateOrResetUipasswordConflict handles this case with default header values.

Conflict
*/
type CreateOrResetUipasswordConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateOrResetUipasswordConflict) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/uiPassword][%d] createOrResetUipasswordConflict  %+v", 409, o.Payload)
}

func (o *CreateOrResetUipasswordConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrResetUipasswordInternalServerError creates a CreateOrResetUipasswordInternalServerError with default headers values
func NewCreateOrResetUipasswordInternalServerError() *CreateOrResetUipasswordInternalServerError {
	return &CreateOrResetUipasswordInternalServerError{}
}

/*CreateOrResetUipasswordInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateOrResetUipasswordInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateOrResetUipasswordInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/uiPassword][%d] createOrResetUipasswordInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateOrResetUipasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrResetUipasswordDefault creates a CreateOrResetUipasswordDefault with default headers values
func NewCreateOrResetUipasswordDefault(code int) *CreateOrResetUipasswordDefault {
	return &CreateOrResetUipasswordDefault{
		_statusCode: code,
	}
}

/*CreateOrResetUipasswordDefault handles this case with default header values.

An error has occurred.

*/
type CreateOrResetUipasswordDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create or reset uipassword default response
func (o *CreateOrResetUipasswordDefault) Code() int {
	return o._statusCode
}

func (o *CreateOrResetUipasswordDefault) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/uiPassword][%d] CreateOrResetUIPassword default  %+v", o._statusCode, o.Payload)
}

func (o *CreateOrResetUipasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
