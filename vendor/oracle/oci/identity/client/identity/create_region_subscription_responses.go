package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// CreateRegionSubscriptionReader is a Reader for the CreateRegionSubscription structure.
type CreateRegionSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRegionSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateRegionSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateRegionSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateRegionSubscriptionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateRegionSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateRegionSubscriptionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateRegionSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateRegionSubscriptionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateRegionSubscriptionOK creates a CreateRegionSubscriptionOK with default headers values
func NewCreateRegionSubscriptionOK() *CreateRegionSubscriptionOK {
	return &CreateRegionSubscriptionOK{}
}

/*CreateRegionSubscriptionOK handles this case with default header values.

The Region Subscription has been created.
*/
type CreateRegionSubscriptionOK struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.RegionSubscription
}

func (o *CreateRegionSubscriptionOK) Error() string {
	return fmt.Sprintf("[POST /tenancies/{tenancyId}/regionSubscriptions][%d] createRegionSubscriptionOK  %+v", 200, o.Payload)
}

func (o *CreateRegionSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.RegionSubscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRegionSubscriptionBadRequest creates a CreateRegionSubscriptionBadRequest with default headers values
func NewCreateRegionSubscriptionBadRequest() *CreateRegionSubscriptionBadRequest {
	return &CreateRegionSubscriptionBadRequest{}
}

/*CreateRegionSubscriptionBadRequest handles this case with default header values.

Bad Request
*/
type CreateRegionSubscriptionBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRegionSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[POST /tenancies/{tenancyId}/regionSubscriptions][%d] createRegionSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRegionSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRegionSubscriptionUnauthorized creates a CreateRegionSubscriptionUnauthorized with default headers values
func NewCreateRegionSubscriptionUnauthorized() *CreateRegionSubscriptionUnauthorized {
	return &CreateRegionSubscriptionUnauthorized{}
}

/*CreateRegionSubscriptionUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateRegionSubscriptionUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRegionSubscriptionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tenancies/{tenancyId}/regionSubscriptions][%d] createRegionSubscriptionUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRegionSubscriptionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRegionSubscriptionNotFound creates a CreateRegionSubscriptionNotFound with default headers values
func NewCreateRegionSubscriptionNotFound() *CreateRegionSubscriptionNotFound {
	return &CreateRegionSubscriptionNotFound{}
}

/*CreateRegionSubscriptionNotFound handles this case with default header values.

Not Found
*/
type CreateRegionSubscriptionNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRegionSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[POST /tenancies/{tenancyId}/regionSubscriptions][%d] createRegionSubscriptionNotFound  %+v", 404, o.Payload)
}

func (o *CreateRegionSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRegionSubscriptionConflict creates a CreateRegionSubscriptionConflict with default headers values
func NewCreateRegionSubscriptionConflict() *CreateRegionSubscriptionConflict {
	return &CreateRegionSubscriptionConflict{}
}

/*CreateRegionSubscriptionConflict handles this case with default header values.

Conflict
*/
type CreateRegionSubscriptionConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRegionSubscriptionConflict) Error() string {
	return fmt.Sprintf("[POST /tenancies/{tenancyId}/regionSubscriptions][%d] createRegionSubscriptionConflict  %+v", 409, o.Payload)
}

func (o *CreateRegionSubscriptionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRegionSubscriptionInternalServerError creates a CreateRegionSubscriptionInternalServerError with default headers values
func NewCreateRegionSubscriptionInternalServerError() *CreateRegionSubscriptionInternalServerError {
	return &CreateRegionSubscriptionInternalServerError{}
}

/*CreateRegionSubscriptionInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateRegionSubscriptionInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRegionSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tenancies/{tenancyId}/regionSubscriptions][%d] createRegionSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRegionSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRegionSubscriptionDefault creates a CreateRegionSubscriptionDefault with default headers values
func NewCreateRegionSubscriptionDefault(code int) *CreateRegionSubscriptionDefault {
	return &CreateRegionSubscriptionDefault{
		_statusCode: code,
	}
}

/*CreateRegionSubscriptionDefault handles this case with default header values.

An error has occurred.

*/
type CreateRegionSubscriptionDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create region subscription default response
func (o *CreateRegionSubscriptionDefault) Code() int {
	return o._statusCode
}

func (o *CreateRegionSubscriptionDefault) Error() string {
	return fmt.Sprintf("[POST /tenancies/{tenancyId}/regionSubscriptions][%d] CreateRegionSubscription default  %+v", o._statusCode, o.Payload)
}

func (o *CreateRegionSubscriptionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
