package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// GetTenancyReader is a Reader for the GetTenancy structure.
type GetTenancyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTenancyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTenancyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTenancyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTenancyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTenancyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTenancyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetTenancyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTenancyOK creates a GetTenancyOK with default headers values
func NewGetTenancyOK() *GetTenancyOK {
	return &GetTenancyOK{}
}

/*GetTenancyOK handles this case with default header values.

The tenancy was retrieved.
*/
type GetTenancyOK struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Tenancy
}

func (o *GetTenancyOK) Error() string {
	return fmt.Sprintf("[GET /tenancies/{tenancyId}][%d] getTenancyOK  %+v", 200, o.Payload)
}

func (o *GetTenancyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Tenancy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenancyBadRequest creates a GetTenancyBadRequest with default headers values
func NewGetTenancyBadRequest() *GetTenancyBadRequest {
	return &GetTenancyBadRequest{}
}

/*GetTenancyBadRequest handles this case with default header values.

Bad Request
*/
type GetTenancyBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetTenancyBadRequest) Error() string {
	return fmt.Sprintf("[GET /tenancies/{tenancyId}][%d] getTenancyBadRequest  %+v", 400, o.Payload)
}

func (o *GetTenancyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenancyUnauthorized creates a GetTenancyUnauthorized with default headers values
func NewGetTenancyUnauthorized() *GetTenancyUnauthorized {
	return &GetTenancyUnauthorized{}
}

/*GetTenancyUnauthorized handles this case with default header values.

Unauthorized
*/
type GetTenancyUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetTenancyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tenancies/{tenancyId}][%d] getTenancyUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTenancyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenancyNotFound creates a GetTenancyNotFound with default headers values
func NewGetTenancyNotFound() *GetTenancyNotFound {
	return &GetTenancyNotFound{}
}

/*GetTenancyNotFound handles this case with default header values.

Not Found
*/
type GetTenancyNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetTenancyNotFound) Error() string {
	return fmt.Sprintf("[GET /tenancies/{tenancyId}][%d] getTenancyNotFound  %+v", 404, o.Payload)
}

func (o *GetTenancyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenancyInternalServerError creates a GetTenancyInternalServerError with default headers values
func NewGetTenancyInternalServerError() *GetTenancyInternalServerError {
	return &GetTenancyInternalServerError{}
}

/*GetTenancyInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetTenancyInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetTenancyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tenancies/{tenancyId}][%d] getTenancyInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTenancyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenancyDefault creates a GetTenancyDefault with default headers values
func NewGetTenancyDefault(code int) *GetTenancyDefault {
	return &GetTenancyDefault{
		_statusCode: code,
	}
}

/*GetTenancyDefault handles this case with default header values.

An error has occurred.

*/
type GetTenancyDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get tenancy default response
func (o *GetTenancyDefault) Code() int {
	return o._statusCode
}

func (o *GetTenancyDefault) Error() string {
	return fmt.Sprintf("[GET /tenancies/{tenancyId}][%d] GetTenancy default  %+v", o._statusCode, o.Payload)
}

func (o *GetTenancyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
