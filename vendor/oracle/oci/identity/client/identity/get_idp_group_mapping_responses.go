package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// GetIdpGroupMappingReader is a Reader for the GetIdpGroupMapping structure.
type GetIdpGroupMappingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIdpGroupMappingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIdpGroupMappingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetIdpGroupMappingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetIdpGroupMappingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIdpGroupMappingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetIdpGroupMappingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetIdpGroupMappingDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIdpGroupMappingOK creates a GetIdpGroupMappingOK with default headers values
func NewGetIdpGroupMappingOK() *GetIdpGroupMappingOK {
	return &GetIdpGroupMappingOK{}
}

/*GetIdpGroupMappingOK handles this case with default header values.

The mapping is being retrieved.
*/
type GetIdpGroupMappingOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.IdpGroupMapping
}

func (o *GetIdpGroupMappingOK) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] getIdpGroupMappingOK  %+v", 200, o.Payload)
}

func (o *GetIdpGroupMappingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.IdpGroupMapping)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdpGroupMappingBadRequest creates a GetIdpGroupMappingBadRequest with default headers values
func NewGetIdpGroupMappingBadRequest() *GetIdpGroupMappingBadRequest {
	return &GetIdpGroupMappingBadRequest{}
}

/*GetIdpGroupMappingBadRequest handles this case with default header values.

Bad Request
*/
type GetIdpGroupMappingBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdpGroupMappingBadRequest) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] getIdpGroupMappingBadRequest  %+v", 400, o.Payload)
}

func (o *GetIdpGroupMappingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdpGroupMappingForbidden creates a GetIdpGroupMappingForbidden with default headers values
func NewGetIdpGroupMappingForbidden() *GetIdpGroupMappingForbidden {
	return &GetIdpGroupMappingForbidden{}
}

/*GetIdpGroupMappingForbidden handles this case with default header values.

Forbidden
*/
type GetIdpGroupMappingForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdpGroupMappingForbidden) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] getIdpGroupMappingForbidden  %+v", 403, o.Payload)
}

func (o *GetIdpGroupMappingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdpGroupMappingNotFound creates a GetIdpGroupMappingNotFound with default headers values
func NewGetIdpGroupMappingNotFound() *GetIdpGroupMappingNotFound {
	return &GetIdpGroupMappingNotFound{}
}

/*GetIdpGroupMappingNotFound handles this case with default header values.

Not Found
*/
type GetIdpGroupMappingNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdpGroupMappingNotFound) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] getIdpGroupMappingNotFound  %+v", 404, o.Payload)
}

func (o *GetIdpGroupMappingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdpGroupMappingInternalServerError creates a GetIdpGroupMappingInternalServerError with default headers values
func NewGetIdpGroupMappingInternalServerError() *GetIdpGroupMappingInternalServerError {
	return &GetIdpGroupMappingInternalServerError{}
}

/*GetIdpGroupMappingInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetIdpGroupMappingInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdpGroupMappingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] getIdpGroupMappingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIdpGroupMappingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdpGroupMappingDefault creates a GetIdpGroupMappingDefault with default headers values
func NewGetIdpGroupMappingDefault(code int) *GetIdpGroupMappingDefault {
	return &GetIdpGroupMappingDefault{
		_statusCode: code,
	}
}

/*GetIdpGroupMappingDefault handles this case with default header values.

An error has occurred.

*/
type GetIdpGroupMappingDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get idp group mapping default response
func (o *GetIdpGroupMappingDefault) Code() int {
	return o._statusCode
}

func (o *GetIdpGroupMappingDefault) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] GetIdpGroupMapping default  %+v", o._statusCode, o.Payload)
}

func (o *GetIdpGroupMappingDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
