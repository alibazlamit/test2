package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// DeleteAPIKeyReader is a Reader for the DeleteAPIKey structure.
type DeleteAPIKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAPIKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteAPIKeyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteAPIKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteAPIKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteAPIKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeleteAPIKeyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteAPIKeyPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteAPIKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteAPIKeyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteAPIKeyNoContent creates a DeleteAPIKeyNoContent with default headers values
func NewDeleteAPIKeyNoContent() *DeleteAPIKeyNoContent {
	return &DeleteAPIKeyNoContent{}
}

/*DeleteAPIKeyNoContent handles this case with default header values.

The key is being deleted.
*/
type DeleteAPIKeyNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteAPIKeyNoContent) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] deleteApiKeyNoContent ", 204)
}

func (o *DeleteAPIKeyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteAPIKeyBadRequest creates a DeleteAPIKeyBadRequest with default headers values
func NewDeleteAPIKeyBadRequest() *DeleteAPIKeyBadRequest {
	return &DeleteAPIKeyBadRequest{}
}

/*DeleteAPIKeyBadRequest handles this case with default header values.

Bad Request
*/
type DeleteAPIKeyBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteAPIKeyBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] deleteApiKeyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAPIKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAPIKeyForbidden creates a DeleteAPIKeyForbidden with default headers values
func NewDeleteAPIKeyForbidden() *DeleteAPIKeyForbidden {
	return &DeleteAPIKeyForbidden{}
}

/*DeleteAPIKeyForbidden handles this case with default header values.

Forbidden
*/
type DeleteAPIKeyForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteAPIKeyForbidden) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] deleteApiKeyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteAPIKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAPIKeyNotFound creates a DeleteAPIKeyNotFound with default headers values
func NewDeleteAPIKeyNotFound() *DeleteAPIKeyNotFound {
	return &DeleteAPIKeyNotFound{}
}

/*DeleteAPIKeyNotFound handles this case with default header values.

Not Found
*/
type DeleteAPIKeyNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteAPIKeyNotFound) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] deleteApiKeyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAPIKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAPIKeyConflict creates a DeleteAPIKeyConflict with default headers values
func NewDeleteAPIKeyConflict() *DeleteAPIKeyConflict {
	return &DeleteAPIKeyConflict{}
}

/*DeleteAPIKeyConflict handles this case with default header values.

Conflict
*/
type DeleteAPIKeyConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteAPIKeyConflict) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] deleteApiKeyConflict  %+v", 409, o.Payload)
}

func (o *DeleteAPIKeyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAPIKeyPreconditionFailed creates a DeleteAPIKeyPreconditionFailed with default headers values
func NewDeleteAPIKeyPreconditionFailed() *DeleteAPIKeyPreconditionFailed {
	return &DeleteAPIKeyPreconditionFailed{}
}

/*DeleteAPIKeyPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteAPIKeyPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteAPIKeyPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] deleteApiKeyPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteAPIKeyPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAPIKeyInternalServerError creates a DeleteAPIKeyInternalServerError with default headers values
func NewDeleteAPIKeyInternalServerError() *DeleteAPIKeyInternalServerError {
	return &DeleteAPIKeyInternalServerError{}
}

/*DeleteAPIKeyInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteAPIKeyInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteAPIKeyInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] deleteApiKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAPIKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAPIKeyDefault creates a DeleteAPIKeyDefault with default headers values
func NewDeleteAPIKeyDefault(code int) *DeleteAPIKeyDefault {
	return &DeleteAPIKeyDefault{
		_statusCode: code,
	}
}

/*DeleteAPIKeyDefault handles this case with default header values.

An error has occurred.

*/
type DeleteAPIKeyDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete Api key default response
func (o *DeleteAPIKeyDefault) Code() int {
	return o._statusCode
}

func (o *DeleteAPIKeyDefault) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/apiKeys/{fingerprint}][%d] DeleteApiKey default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteAPIKeyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
