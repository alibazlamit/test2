package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// DeleteGroupReader is a Reader for the DeleteGroup structure.
type DeleteGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeleteGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteGroupPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteGroupNoContent creates a DeleteGroupNoContent with default headers values
func NewDeleteGroupNoContent() *DeleteGroupNoContent {
	return &DeleteGroupNoContent{}
}

/*DeleteGroupNoContent handles this case with default header values.

The group is being deleted.
*/
type DeleteGroupNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteGroupNoContent) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] deleteGroupNoContent ", 204)
}

func (o *DeleteGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteGroupBadRequest creates a DeleteGroupBadRequest with default headers values
func NewDeleteGroupBadRequest() *DeleteGroupBadRequest {
	return &DeleteGroupBadRequest{}
}

/*DeleteGroupBadRequest handles this case with default header values.

Bad Request
*/
type DeleteGroupBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] deleteGroupBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupForbidden creates a DeleteGroupForbidden with default headers values
func NewDeleteGroupForbidden() *DeleteGroupForbidden {
	return &DeleteGroupForbidden{}
}

/*DeleteGroupForbidden handles this case with default header values.

Forbidden
*/
type DeleteGroupForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteGroupForbidden) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] deleteGroupForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupNotFound creates a DeleteGroupNotFound with default headers values
func NewDeleteGroupNotFound() *DeleteGroupNotFound {
	return &DeleteGroupNotFound{}
}

/*DeleteGroupNotFound handles this case with default header values.

Not Found
*/
type DeleteGroupNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] deleteGroupNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupConflict creates a DeleteGroupConflict with default headers values
func NewDeleteGroupConflict() *DeleteGroupConflict {
	return &DeleteGroupConflict{}
}

/*DeleteGroupConflict handles this case with default header values.

Conflict
*/
type DeleteGroupConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteGroupConflict) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] deleteGroupConflict  %+v", 409, o.Payload)
}

func (o *DeleteGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupPreconditionFailed creates a DeleteGroupPreconditionFailed with default headers values
func NewDeleteGroupPreconditionFailed() *DeleteGroupPreconditionFailed {
	return &DeleteGroupPreconditionFailed{}
}

/*DeleteGroupPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteGroupPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteGroupPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] deleteGroupPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteGroupPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupInternalServerError creates a DeleteGroupInternalServerError with default headers values
func NewDeleteGroupInternalServerError() *DeleteGroupInternalServerError {
	return &DeleteGroupInternalServerError{}
}

/*DeleteGroupInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteGroupInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteGroupInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] deleteGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupDefault creates a DeleteGroupDefault with default headers values
func NewDeleteGroupDefault(code int) *DeleteGroupDefault {
	return &DeleteGroupDefault{
		_statusCode: code,
	}
}

/*DeleteGroupDefault handles this case with default header values.

An error has occurred.

*/
type DeleteGroupDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete group default response
func (o *DeleteGroupDefault) Code() int {
	return o._statusCode
}

func (o *DeleteGroupDefault) Error() string {
	return fmt.Sprintf("[DELETE /groups/{groupId}][%d] DeleteGroup default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
