package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// DeleteSwiftPasswordReader is a Reader for the DeleteSwiftPassword structure.
type DeleteSwiftPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSwiftPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteSwiftPasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteSwiftPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteSwiftPasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteSwiftPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeleteSwiftPasswordConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteSwiftPasswordPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteSwiftPasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteSwiftPasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteSwiftPasswordNoContent creates a DeleteSwiftPasswordNoContent with default headers values
func NewDeleteSwiftPasswordNoContent() *DeleteSwiftPasswordNoContent {
	return &DeleteSwiftPasswordNoContent{}
}

/*DeleteSwiftPasswordNoContent handles this case with default header values.

The Swift password is being deleted.
*/
type DeleteSwiftPasswordNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteSwiftPasswordNoContent) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] deleteSwiftPasswordNoContent ", 204)
}

func (o *DeleteSwiftPasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteSwiftPasswordBadRequest creates a DeleteSwiftPasswordBadRequest with default headers values
func NewDeleteSwiftPasswordBadRequest() *DeleteSwiftPasswordBadRequest {
	return &DeleteSwiftPasswordBadRequest{}
}

/*DeleteSwiftPasswordBadRequest handles this case with default header values.

Bad Request
*/
type DeleteSwiftPasswordBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteSwiftPasswordBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] deleteSwiftPasswordBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSwiftPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSwiftPasswordForbidden creates a DeleteSwiftPasswordForbidden with default headers values
func NewDeleteSwiftPasswordForbidden() *DeleteSwiftPasswordForbidden {
	return &DeleteSwiftPasswordForbidden{}
}

/*DeleteSwiftPasswordForbidden handles this case with default header values.

Forbidden
*/
type DeleteSwiftPasswordForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteSwiftPasswordForbidden) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] deleteSwiftPasswordForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSwiftPasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSwiftPasswordNotFound creates a DeleteSwiftPasswordNotFound with default headers values
func NewDeleteSwiftPasswordNotFound() *DeleteSwiftPasswordNotFound {
	return &DeleteSwiftPasswordNotFound{}
}

/*DeleteSwiftPasswordNotFound handles this case with default header values.

Not Found
*/
type DeleteSwiftPasswordNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteSwiftPasswordNotFound) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] deleteSwiftPasswordNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSwiftPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSwiftPasswordConflict creates a DeleteSwiftPasswordConflict with default headers values
func NewDeleteSwiftPasswordConflict() *DeleteSwiftPasswordConflict {
	return &DeleteSwiftPasswordConflict{}
}

/*DeleteSwiftPasswordConflict handles this case with default header values.

Conflict
*/
type DeleteSwiftPasswordConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteSwiftPasswordConflict) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] deleteSwiftPasswordConflict  %+v", 409, o.Payload)
}

func (o *DeleteSwiftPasswordConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSwiftPasswordPreconditionFailed creates a DeleteSwiftPasswordPreconditionFailed with default headers values
func NewDeleteSwiftPasswordPreconditionFailed() *DeleteSwiftPasswordPreconditionFailed {
	return &DeleteSwiftPasswordPreconditionFailed{}
}

/*DeleteSwiftPasswordPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteSwiftPasswordPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteSwiftPasswordPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] deleteSwiftPasswordPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteSwiftPasswordPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSwiftPasswordInternalServerError creates a DeleteSwiftPasswordInternalServerError with default headers values
func NewDeleteSwiftPasswordInternalServerError() *DeleteSwiftPasswordInternalServerError {
	return &DeleteSwiftPasswordInternalServerError{}
}

/*DeleteSwiftPasswordInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteSwiftPasswordInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteSwiftPasswordInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] deleteSwiftPasswordInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSwiftPasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSwiftPasswordDefault creates a DeleteSwiftPasswordDefault with default headers values
func NewDeleteSwiftPasswordDefault(code int) *DeleteSwiftPasswordDefault {
	return &DeleteSwiftPasswordDefault{
		_statusCode: code,
	}
}

/*DeleteSwiftPasswordDefault handles this case with default header values.

An error has occurred.

*/
type DeleteSwiftPasswordDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete swift password default response
func (o *DeleteSwiftPasswordDefault) Code() int {
	return o._statusCode
}

func (o *DeleteSwiftPasswordDefault) Error() string {
	return fmt.Sprintf("[DELETE /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] DeleteSwiftPassword default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteSwiftPasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
