package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// GetIdentityProviderReader is a Reader for the GetIdentityProvider structure.
type GetIdentityProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIdentityProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIdentityProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetIdentityProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetIdentityProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIdentityProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetIdentityProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetIdentityProviderDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIdentityProviderOK creates a GetIdentityProviderOK with default headers values
func NewGetIdentityProviderOK() *GetIdentityProviderOK {
	return &GetIdentityProviderOK{}
}

/*GetIdentityProviderOK handles this case with default header values.

The user was found.
*/
type GetIdentityProviderOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload models.IdentityProvider
}

func (o *GetIdentityProviderOK) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}][%d] getIdentityProviderOK  %+v", 200, o.Payload)
}

func (o *GetIdentityProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload as interface type
	payload, err := models.UnmarshalIdentityProvider(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetIdentityProviderBadRequest creates a GetIdentityProviderBadRequest with default headers values
func NewGetIdentityProviderBadRequest() *GetIdentityProviderBadRequest {
	return &GetIdentityProviderBadRequest{}
}

/*GetIdentityProviderBadRequest handles this case with default header values.

Bad Request
*/
type GetIdentityProviderBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdentityProviderBadRequest) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}][%d] getIdentityProviderBadRequest  %+v", 400, o.Payload)
}

func (o *GetIdentityProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdentityProviderForbidden creates a GetIdentityProviderForbidden with default headers values
func NewGetIdentityProviderForbidden() *GetIdentityProviderForbidden {
	return &GetIdentityProviderForbidden{}
}

/*GetIdentityProviderForbidden handles this case with default header values.

Forbidden
*/
type GetIdentityProviderForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdentityProviderForbidden) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}][%d] getIdentityProviderForbidden  %+v", 403, o.Payload)
}

func (o *GetIdentityProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdentityProviderNotFound creates a GetIdentityProviderNotFound with default headers values
func NewGetIdentityProviderNotFound() *GetIdentityProviderNotFound {
	return &GetIdentityProviderNotFound{}
}

/*GetIdentityProviderNotFound handles this case with default header values.

Not Found
*/
type GetIdentityProviderNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdentityProviderNotFound) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}][%d] getIdentityProviderNotFound  %+v", 404, o.Payload)
}

func (o *GetIdentityProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdentityProviderInternalServerError creates a GetIdentityProviderInternalServerError with default headers values
func NewGetIdentityProviderInternalServerError() *GetIdentityProviderInternalServerError {
	return &GetIdentityProviderInternalServerError{}
}

/*GetIdentityProviderInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetIdentityProviderInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetIdentityProviderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}][%d] getIdentityProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIdentityProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIdentityProviderDefault creates a GetIdentityProviderDefault with default headers values
func NewGetIdentityProviderDefault(code int) *GetIdentityProviderDefault {
	return &GetIdentityProviderDefault{
		_statusCode: code,
	}
}

/*GetIdentityProviderDefault handles this case with default header values.

An error has occurred.

*/
type GetIdentityProviderDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get identity provider default response
func (o *GetIdentityProviderDefault) Code() int {
	return o._statusCode
}

func (o *GetIdentityProviderDefault) Error() string {
	return fmt.Sprintf("[GET /identityProviders/{identityProviderId}][%d] GetIdentityProvider default  %+v", o._statusCode, o.Payload)
}

func (o *GetIdentityProviderDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
