package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// UpdateIdpGroupMappingReader is a Reader for the UpdateIdpGroupMapping structure.
type UpdateIdpGroupMappingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIdpGroupMappingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateIdpGroupMappingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateIdpGroupMappingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateIdpGroupMappingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateIdpGroupMappingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateIdpGroupMappingConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateIdpGroupMappingPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateIdpGroupMappingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateIdpGroupMappingDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateIdpGroupMappingOK creates a UpdateIdpGroupMappingOK with default headers values
func NewUpdateIdpGroupMappingOK() *UpdateIdpGroupMappingOK {
	return &UpdateIdpGroupMappingOK{}
}

/*UpdateIdpGroupMappingOK handles this case with default header values.

The identity provider is being updated.
*/
type UpdateIdpGroupMappingOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.IdpGroupMapping
}

func (o *UpdateIdpGroupMappingOK) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] updateIdpGroupMappingOK  %+v", 200, o.Payload)
}

func (o *UpdateIdpGroupMappingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.IdpGroupMapping)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdpGroupMappingBadRequest creates a UpdateIdpGroupMappingBadRequest with default headers values
func NewUpdateIdpGroupMappingBadRequest() *UpdateIdpGroupMappingBadRequest {
	return &UpdateIdpGroupMappingBadRequest{}
}

/*UpdateIdpGroupMappingBadRequest handles this case with default header values.

Bad Request
*/
type UpdateIdpGroupMappingBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdpGroupMappingBadRequest) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] updateIdpGroupMappingBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIdpGroupMappingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdpGroupMappingForbidden creates a UpdateIdpGroupMappingForbidden with default headers values
func NewUpdateIdpGroupMappingForbidden() *UpdateIdpGroupMappingForbidden {
	return &UpdateIdpGroupMappingForbidden{}
}

/*UpdateIdpGroupMappingForbidden handles this case with default header values.

Forbidden
*/
type UpdateIdpGroupMappingForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdpGroupMappingForbidden) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] updateIdpGroupMappingForbidden  %+v", 403, o.Payload)
}

func (o *UpdateIdpGroupMappingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdpGroupMappingNotFound creates a UpdateIdpGroupMappingNotFound with default headers values
func NewUpdateIdpGroupMappingNotFound() *UpdateIdpGroupMappingNotFound {
	return &UpdateIdpGroupMappingNotFound{}
}

/*UpdateIdpGroupMappingNotFound handles this case with default header values.

Not Found
*/
type UpdateIdpGroupMappingNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdpGroupMappingNotFound) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] updateIdpGroupMappingNotFound  %+v", 404, o.Payload)
}

func (o *UpdateIdpGroupMappingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdpGroupMappingConflict creates a UpdateIdpGroupMappingConflict with default headers values
func NewUpdateIdpGroupMappingConflict() *UpdateIdpGroupMappingConflict {
	return &UpdateIdpGroupMappingConflict{}
}

/*UpdateIdpGroupMappingConflict handles this case with default header values.

Conflict
*/
type UpdateIdpGroupMappingConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdpGroupMappingConflict) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] updateIdpGroupMappingConflict  %+v", 409, o.Payload)
}

func (o *UpdateIdpGroupMappingConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdpGroupMappingPreconditionFailed creates a UpdateIdpGroupMappingPreconditionFailed with default headers values
func NewUpdateIdpGroupMappingPreconditionFailed() *UpdateIdpGroupMappingPreconditionFailed {
	return &UpdateIdpGroupMappingPreconditionFailed{}
}

/*UpdateIdpGroupMappingPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateIdpGroupMappingPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdpGroupMappingPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] updateIdpGroupMappingPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateIdpGroupMappingPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdpGroupMappingInternalServerError creates a UpdateIdpGroupMappingInternalServerError with default headers values
func NewUpdateIdpGroupMappingInternalServerError() *UpdateIdpGroupMappingInternalServerError {
	return &UpdateIdpGroupMappingInternalServerError{}
}

/*UpdateIdpGroupMappingInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateIdpGroupMappingInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateIdpGroupMappingInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] updateIdpGroupMappingInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateIdpGroupMappingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIdpGroupMappingDefault creates a UpdateIdpGroupMappingDefault with default headers values
func NewUpdateIdpGroupMappingDefault(code int) *UpdateIdpGroupMappingDefault {
	return &UpdateIdpGroupMappingDefault{
		_statusCode: code,
	}
}

/*UpdateIdpGroupMappingDefault handles this case with default header values.

An error has occurred.

*/
type UpdateIdpGroupMappingDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update idp group mapping default response
func (o *UpdateIdpGroupMappingDefault) Code() int {
	return o._statusCode
}

func (o *UpdateIdpGroupMappingDefault) Error() string {
	return fmt.Sprintf("[PUT /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] UpdateIdpGroupMapping default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateIdpGroupMappingDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
