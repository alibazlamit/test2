package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// UpdateCompartmentReader is a Reader for the UpdateCompartment structure.
type UpdateCompartmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCompartmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateCompartmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateCompartmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateCompartmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateCompartmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateCompartmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateCompartmentPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateCompartmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateCompartmentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateCompartmentOK creates a UpdateCompartmentOK with default headers values
func NewUpdateCompartmentOK() *UpdateCompartmentOK {
	return &UpdateCompartmentOK{}
}

/*UpdateCompartmentOK handles this case with default header values.

The compartment is being updated.
*/
type UpdateCompartmentOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Compartment
}

func (o *UpdateCompartmentOK) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] updateCompartmentOK  %+v", 200, o.Payload)
}

func (o *UpdateCompartmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Compartment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompartmentBadRequest creates a UpdateCompartmentBadRequest with default headers values
func NewUpdateCompartmentBadRequest() *UpdateCompartmentBadRequest {
	return &UpdateCompartmentBadRequest{}
}

/*UpdateCompartmentBadRequest handles this case with default header values.

Bad Request
*/
type UpdateCompartmentBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCompartmentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] updateCompartmentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCompartmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompartmentForbidden creates a UpdateCompartmentForbidden with default headers values
func NewUpdateCompartmentForbidden() *UpdateCompartmentForbidden {
	return &UpdateCompartmentForbidden{}
}

/*UpdateCompartmentForbidden handles this case with default header values.

Forbidden
*/
type UpdateCompartmentForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCompartmentForbidden) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] updateCompartmentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCompartmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompartmentNotFound creates a UpdateCompartmentNotFound with default headers values
func NewUpdateCompartmentNotFound() *UpdateCompartmentNotFound {
	return &UpdateCompartmentNotFound{}
}

/*UpdateCompartmentNotFound handles this case with default header values.

Not Found
*/
type UpdateCompartmentNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCompartmentNotFound) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] updateCompartmentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCompartmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompartmentConflict creates a UpdateCompartmentConflict with default headers values
func NewUpdateCompartmentConflict() *UpdateCompartmentConflict {
	return &UpdateCompartmentConflict{}
}

/*UpdateCompartmentConflict handles this case with default header values.

Conflict
*/
type UpdateCompartmentConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCompartmentConflict) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] updateCompartmentConflict  %+v", 409, o.Payload)
}

func (o *UpdateCompartmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompartmentPreconditionFailed creates a UpdateCompartmentPreconditionFailed with default headers values
func NewUpdateCompartmentPreconditionFailed() *UpdateCompartmentPreconditionFailed {
	return &UpdateCompartmentPreconditionFailed{}
}

/*UpdateCompartmentPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateCompartmentPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCompartmentPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] updateCompartmentPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateCompartmentPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompartmentInternalServerError creates a UpdateCompartmentInternalServerError with default headers values
func NewUpdateCompartmentInternalServerError() *UpdateCompartmentInternalServerError {
	return &UpdateCompartmentInternalServerError{}
}

/*UpdateCompartmentInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateCompartmentInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateCompartmentInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] updateCompartmentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCompartmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCompartmentDefault creates a UpdateCompartmentDefault with default headers values
func NewUpdateCompartmentDefault(code int) *UpdateCompartmentDefault {
	return &UpdateCompartmentDefault{
		_statusCode: code,
	}
}

/*UpdateCompartmentDefault handles this case with default header values.

An error has occurred.

*/
type UpdateCompartmentDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update compartment default response
func (o *UpdateCompartmentDefault) Code() int {
	return o._statusCode
}

func (o *UpdateCompartmentDefault) Error() string {
	return fmt.Sprintf("[PUT /compartments/{compartmentId}][%d] UpdateCompartment default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateCompartmentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
