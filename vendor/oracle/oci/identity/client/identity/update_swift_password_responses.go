package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// UpdateSwiftPasswordReader is a Reader for the UpdateSwiftPassword structure.
type UpdateSwiftPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSwiftPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateSwiftPasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateSwiftPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateSwiftPasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateSwiftPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateSwiftPasswordConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateSwiftPasswordPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateSwiftPasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateSwiftPasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateSwiftPasswordOK creates a UpdateSwiftPasswordOK with default headers values
func NewUpdateSwiftPasswordOK() *UpdateSwiftPasswordOK {
	return &UpdateSwiftPasswordOK{}
}

/*UpdateSwiftPasswordOK handles this case with default header values.

The Swift password object was updated.
*/
type UpdateSwiftPasswordOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.SwiftPassword
}

func (o *UpdateSwiftPasswordOK) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] updateSwiftPasswordOK  %+v", 200, o.Payload)
}

func (o *UpdateSwiftPasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.SwiftPassword)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSwiftPasswordBadRequest creates a UpdateSwiftPasswordBadRequest with default headers values
func NewUpdateSwiftPasswordBadRequest() *UpdateSwiftPasswordBadRequest {
	return &UpdateSwiftPasswordBadRequest{}
}

/*UpdateSwiftPasswordBadRequest handles this case with default header values.

Bad Request
*/
type UpdateSwiftPasswordBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateSwiftPasswordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] updateSwiftPasswordBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSwiftPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSwiftPasswordForbidden creates a UpdateSwiftPasswordForbidden with default headers values
func NewUpdateSwiftPasswordForbidden() *UpdateSwiftPasswordForbidden {
	return &UpdateSwiftPasswordForbidden{}
}

/*UpdateSwiftPasswordForbidden handles this case with default header values.

Forbidden
*/
type UpdateSwiftPasswordForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateSwiftPasswordForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] updateSwiftPasswordForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSwiftPasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSwiftPasswordNotFound creates a UpdateSwiftPasswordNotFound with default headers values
func NewUpdateSwiftPasswordNotFound() *UpdateSwiftPasswordNotFound {
	return &UpdateSwiftPasswordNotFound{}
}

/*UpdateSwiftPasswordNotFound handles this case with default header values.

Not Found
*/
type UpdateSwiftPasswordNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateSwiftPasswordNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] updateSwiftPasswordNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSwiftPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSwiftPasswordConflict creates a UpdateSwiftPasswordConflict with default headers values
func NewUpdateSwiftPasswordConflict() *UpdateSwiftPasswordConflict {
	return &UpdateSwiftPasswordConflict{}
}

/*UpdateSwiftPasswordConflict handles this case with default header values.

Conflict
*/
type UpdateSwiftPasswordConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateSwiftPasswordConflict) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] updateSwiftPasswordConflict  %+v", 409, o.Payload)
}

func (o *UpdateSwiftPasswordConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSwiftPasswordPreconditionFailed creates a UpdateSwiftPasswordPreconditionFailed with default headers values
func NewUpdateSwiftPasswordPreconditionFailed() *UpdateSwiftPasswordPreconditionFailed {
	return &UpdateSwiftPasswordPreconditionFailed{}
}

/*UpdateSwiftPasswordPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateSwiftPasswordPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateSwiftPasswordPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] updateSwiftPasswordPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateSwiftPasswordPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSwiftPasswordInternalServerError creates a UpdateSwiftPasswordInternalServerError with default headers values
func NewUpdateSwiftPasswordInternalServerError() *UpdateSwiftPasswordInternalServerError {
	return &UpdateSwiftPasswordInternalServerError{}
}

/*UpdateSwiftPasswordInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateSwiftPasswordInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateSwiftPasswordInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] updateSwiftPasswordInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSwiftPasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSwiftPasswordDefault creates a UpdateSwiftPasswordDefault with default headers values
func NewUpdateSwiftPasswordDefault(code int) *UpdateSwiftPasswordDefault {
	return &UpdateSwiftPasswordDefault{
		_statusCode: code,
	}
}

/*UpdateSwiftPasswordDefault handles this case with default header values.

An error has occurred.

*/
type UpdateSwiftPasswordDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update swift password default response
func (o *UpdateSwiftPasswordDefault) Code() int {
	return o._statusCode
}

func (o *UpdateSwiftPasswordDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{userId}/swiftPasswords/{swiftPasswordId}][%d] UpdateSwiftPassword default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateSwiftPasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
