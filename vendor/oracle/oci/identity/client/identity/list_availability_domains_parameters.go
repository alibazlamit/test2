package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListAvailabilityDomainsParams creates a new ListAvailabilityDomainsParams object
// with the default values initialized.
func NewListAvailabilityDomainsParams() *ListAvailabilityDomainsParams {
	var ()
	return &ListAvailabilityDomainsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAvailabilityDomainsParamsWithTimeout creates a new ListAvailabilityDomainsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAvailabilityDomainsParamsWithTimeout(timeout time.Duration) *ListAvailabilityDomainsParams {
	var ()
	return &ListAvailabilityDomainsParams{

		timeout: timeout,
	}
}

// NewListAvailabilityDomainsParamsWithContext creates a new ListAvailabilityDomainsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAvailabilityDomainsParamsWithContext(ctx context.Context) *ListAvailabilityDomainsParams {
	var ()
	return &ListAvailabilityDomainsParams{

		Context: ctx,
	}
}

// NewListAvailabilityDomainsParamsWithHTTPClient creates a new ListAvailabilityDomainsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAvailabilityDomainsParamsWithHTTPClient(client *http.Client) *ListAvailabilityDomainsParams {
	var ()
	return &ListAvailabilityDomainsParams{
		HTTPClient: client,
	}
}

/*ListAvailabilityDomainsParams contains all the parameters to send to the API endpoint
for the list availability domains operation typically these are written to a http.Request
*/
type ListAvailabilityDomainsParams struct {

	/*CompartmentID
	  The OCID of the compartment (remember that the tenancy is simply the root compartment).


	*/
	CompartmentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list availability domains params
func (o *ListAvailabilityDomainsParams) WithTimeout(timeout time.Duration) *ListAvailabilityDomainsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list availability domains params
func (o *ListAvailabilityDomainsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list availability domains params
func (o *ListAvailabilityDomainsParams) WithContext(ctx context.Context) *ListAvailabilityDomainsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list availability domains params
func (o *ListAvailabilityDomainsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list availability domains params
func (o *ListAvailabilityDomainsParams) WithHTTPClient(client *http.Client) *ListAvailabilityDomainsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list availability domains params
func (o *ListAvailabilityDomainsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompartmentID adds the compartmentID to the list availability domains params
func (o *ListAvailabilityDomainsParams) WithCompartmentID(compartmentID string) *ListAvailabilityDomainsParams {
	o.SetCompartmentID(compartmentID)
	return o
}

// SetCompartmentID adds the compartmentId to the list availability domains params
func (o *ListAvailabilityDomainsParams) SetCompartmentID(compartmentID string) {
	o.CompartmentID = compartmentID
}

// WriteToRequest writes these params to a swagger request
func (o *ListAvailabilityDomainsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param compartmentId
	qrCompartmentID := o.CompartmentID
	qCompartmentID := qrCompartmentID
	if qCompartmentID != "" {
		if err := r.SetQueryParam("compartmentId", qCompartmentID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
