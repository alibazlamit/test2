package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// DeleteIdpGroupMappingReader is a Reader for the DeleteIdpGroupMapping structure.
type DeleteIdpGroupMappingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIdpGroupMappingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteIdpGroupMappingNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteIdpGroupMappingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteIdpGroupMappingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteIdpGroupMappingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeleteIdpGroupMappingConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteIdpGroupMappingPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteIdpGroupMappingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteIdpGroupMappingDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteIdpGroupMappingNoContent creates a DeleteIdpGroupMappingNoContent with default headers values
func NewDeleteIdpGroupMappingNoContent() *DeleteIdpGroupMappingNoContent {
	return &DeleteIdpGroupMappingNoContent{}
}

/*DeleteIdpGroupMappingNoContent handles this case with default header values.

The mapping is being deleted.
*/
type DeleteIdpGroupMappingNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteIdpGroupMappingNoContent) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] deleteIdpGroupMappingNoContent ", 204)
}

func (o *DeleteIdpGroupMappingNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteIdpGroupMappingBadRequest creates a DeleteIdpGroupMappingBadRequest with default headers values
func NewDeleteIdpGroupMappingBadRequest() *DeleteIdpGroupMappingBadRequest {
	return &DeleteIdpGroupMappingBadRequest{}
}

/*DeleteIdpGroupMappingBadRequest handles this case with default header values.

Bad Request
*/
type DeleteIdpGroupMappingBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIdpGroupMappingBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] deleteIdpGroupMappingBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteIdpGroupMappingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIdpGroupMappingForbidden creates a DeleteIdpGroupMappingForbidden with default headers values
func NewDeleteIdpGroupMappingForbidden() *DeleteIdpGroupMappingForbidden {
	return &DeleteIdpGroupMappingForbidden{}
}

/*DeleteIdpGroupMappingForbidden handles this case with default header values.

Forbidden
*/
type DeleteIdpGroupMappingForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIdpGroupMappingForbidden) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] deleteIdpGroupMappingForbidden  %+v", 403, o.Payload)
}

func (o *DeleteIdpGroupMappingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIdpGroupMappingNotFound creates a DeleteIdpGroupMappingNotFound with default headers values
func NewDeleteIdpGroupMappingNotFound() *DeleteIdpGroupMappingNotFound {
	return &DeleteIdpGroupMappingNotFound{}
}

/*DeleteIdpGroupMappingNotFound handles this case with default header values.

Not Found
*/
type DeleteIdpGroupMappingNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIdpGroupMappingNotFound) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] deleteIdpGroupMappingNotFound  %+v", 404, o.Payload)
}

func (o *DeleteIdpGroupMappingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIdpGroupMappingConflict creates a DeleteIdpGroupMappingConflict with default headers values
func NewDeleteIdpGroupMappingConflict() *DeleteIdpGroupMappingConflict {
	return &DeleteIdpGroupMappingConflict{}
}

/*DeleteIdpGroupMappingConflict handles this case with default header values.

Conflict
*/
type DeleteIdpGroupMappingConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIdpGroupMappingConflict) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] deleteIdpGroupMappingConflict  %+v", 409, o.Payload)
}

func (o *DeleteIdpGroupMappingConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIdpGroupMappingPreconditionFailed creates a DeleteIdpGroupMappingPreconditionFailed with default headers values
func NewDeleteIdpGroupMappingPreconditionFailed() *DeleteIdpGroupMappingPreconditionFailed {
	return &DeleteIdpGroupMappingPreconditionFailed{}
}

/*DeleteIdpGroupMappingPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteIdpGroupMappingPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIdpGroupMappingPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] deleteIdpGroupMappingPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteIdpGroupMappingPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIdpGroupMappingInternalServerError creates a DeleteIdpGroupMappingInternalServerError with default headers values
func NewDeleteIdpGroupMappingInternalServerError() *DeleteIdpGroupMappingInternalServerError {
	return &DeleteIdpGroupMappingInternalServerError{}
}

/*DeleteIdpGroupMappingInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteIdpGroupMappingInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteIdpGroupMappingInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] deleteIdpGroupMappingInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteIdpGroupMappingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIdpGroupMappingDefault creates a DeleteIdpGroupMappingDefault with default headers values
func NewDeleteIdpGroupMappingDefault(code int) *DeleteIdpGroupMappingDefault {
	return &DeleteIdpGroupMappingDefault{
		_statusCode: code,
	}
}

/*DeleteIdpGroupMappingDefault handles this case with default header values.

An error has occurred.

*/
type DeleteIdpGroupMappingDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete idp group mapping default response
func (o *DeleteIdpGroupMappingDefault) Code() int {
	return o._statusCode
}

func (o *DeleteIdpGroupMappingDefault) Error() string {
	return fmt.Sprintf("[DELETE /identityProviders/{identityProviderId}/groupMappings/{mappingId}][%d] DeleteIdpGroupMapping default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteIdpGroupMappingDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
