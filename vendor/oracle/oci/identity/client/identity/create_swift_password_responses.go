package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/oci/identity/models"
)

// CreateSwiftPasswordReader is a Reader for the CreateSwiftPassword structure.
type CreateSwiftPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSwiftPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateSwiftPasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateSwiftPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateSwiftPasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateSwiftPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateSwiftPasswordConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateSwiftPasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateSwiftPasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateSwiftPasswordOK creates a CreateSwiftPasswordOK with default headers values
func NewCreateSwiftPasswordOK() *CreateSwiftPasswordOK {
	return &CreateSwiftPasswordOK{}
}

/*CreateSwiftPasswordOK handles this case with default header values.

The new Swift password is being created.
*/
type CreateSwiftPasswordOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.SwiftPassword
}

func (o *CreateSwiftPasswordOK) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/swiftPasswords/][%d] createSwiftPasswordOK  %+v", 200, o.Payload)
}

func (o *CreateSwiftPasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.SwiftPassword)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSwiftPasswordBadRequest creates a CreateSwiftPasswordBadRequest with default headers values
func NewCreateSwiftPasswordBadRequest() *CreateSwiftPasswordBadRequest {
	return &CreateSwiftPasswordBadRequest{}
}

/*CreateSwiftPasswordBadRequest handles this case with default header values.

Bad Request
*/
type CreateSwiftPasswordBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateSwiftPasswordBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/swiftPasswords/][%d] createSwiftPasswordBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSwiftPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSwiftPasswordForbidden creates a CreateSwiftPasswordForbidden with default headers values
func NewCreateSwiftPasswordForbidden() *CreateSwiftPasswordForbidden {
	return &CreateSwiftPasswordForbidden{}
}

/*CreateSwiftPasswordForbidden handles this case with default header values.

Forbidden
*/
type CreateSwiftPasswordForbidden struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateSwiftPasswordForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/swiftPasswords/][%d] createSwiftPasswordForbidden  %+v", 403, o.Payload)
}

func (o *CreateSwiftPasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSwiftPasswordNotFound creates a CreateSwiftPasswordNotFound with default headers values
func NewCreateSwiftPasswordNotFound() *CreateSwiftPasswordNotFound {
	return &CreateSwiftPasswordNotFound{}
}

/*CreateSwiftPasswordNotFound handles this case with default header values.

Not Found
*/
type CreateSwiftPasswordNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateSwiftPasswordNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/swiftPasswords/][%d] createSwiftPasswordNotFound  %+v", 404, o.Payload)
}

func (o *CreateSwiftPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSwiftPasswordConflict creates a CreateSwiftPasswordConflict with default headers values
func NewCreateSwiftPasswordConflict() *CreateSwiftPasswordConflict {
	return &CreateSwiftPasswordConflict{}
}

/*CreateSwiftPasswordConflict handles this case with default header values.

Conflict
*/
type CreateSwiftPasswordConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateSwiftPasswordConflict) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/swiftPasswords/][%d] createSwiftPasswordConflict  %+v", 409, o.Payload)
}

func (o *CreateSwiftPasswordConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSwiftPasswordInternalServerError creates a CreateSwiftPasswordInternalServerError with default headers values
func NewCreateSwiftPasswordInternalServerError() *CreateSwiftPasswordInternalServerError {
	return &CreateSwiftPasswordInternalServerError{}
}

/*CreateSwiftPasswordInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateSwiftPasswordInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateSwiftPasswordInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/swiftPasswords/][%d] createSwiftPasswordInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateSwiftPasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSwiftPasswordDefault creates a CreateSwiftPasswordDefault with default headers values
func NewCreateSwiftPasswordDefault(code int) *CreateSwiftPasswordDefault {
	return &CreateSwiftPasswordDefault{
		_statusCode: code,
	}
}

/*CreateSwiftPasswordDefault handles this case with default header values.

An error has occurred.

*/
type CreateSwiftPasswordDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create swift password default response
func (o *CreateSwiftPasswordDefault) Code() int {
	return o._statusCode
}

func (o *CreateSwiftPasswordDefault) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/swiftPasswords/][%d] CreateSwiftPassword default  %+v", o._statusCode, o.Payload)
}

func (o *CreateSwiftPasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
